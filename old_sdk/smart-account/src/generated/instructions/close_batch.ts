/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category generated
 */
export const close_batchStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'CloseBatchInstructionArgs'
)
/**
 * Accounts required by the _CloseBatchInstructionAccounts_ instruction
 *
 * @property [] settings
 * @property [] proposal
 * @property [] batch
 * @property [] proposalRentCollector
 * @property [] batchRentCollector
 * @property [] systemProgram
 * @category Instructions
 * @category generated
 */
export type CloseBatchInstructionAccounts = {
  settings: web3.PublicKey
  proposal: web3.PublicKey
  batch: web3.PublicKey
  proposalRentCollector: web3.PublicKey
  batchRentCollector: web3.PublicKey
  systemProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}
export const closeBatchInstructionDiscriminator = [
  166, 174, 35, 253, 209, 211, 181, 28,
]

/**
 * Creates a _CloseBatch_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category CloseBatch
 * @category generated
 */
export function createCloseBatchInstruction(
  accounts: CloseBatchInstructionAccounts,
  programId = new web3.PublicKey('97Xsunnsy4C6EET3V3cd2bSd1ArLcdUcihD8CKEjdS4c')
) {
  const [data] = close_batchStruct.serialize({
    instructionDiscriminator: closeBatchInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.settings,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.batch,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposalRentCollector,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.batchRentCollector,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
