/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  InitProgramConfigArgs,
  initProgramConfigArgsBeet,
} from '../types/InitProgramConfigArgs'

/**
 * @category Instructions
 * @category generated
 */
export type InitializeProgramConfigInstructionArgs = {
  args: InitProgramConfigArgs
}
/**
 * @category Instructions
 * @category generated
 */
export const initialize_program_configStruct = new beet.BeetArgsStruct<
  InitializeProgramConfigInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', initProgramConfigArgsBeet],
  ],
  'InitializeProgramConfigInstructionArgs'
)
/**
 * Accounts required by the _InitializeProgramConfigInstructionAccounts_ instruction
 *
 * @property [] programConfig
 * @property [] initializer
 * @property [] systemProgram
 * @category Instructions
 * @category generated
 */
export type InitializeProgramConfigInstructionAccounts = {
  programConfig: web3.PublicKey
  initializer: web3.PublicKey
  systemProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}
export const initializeProgramConfigInstructionDiscriminator = [
  6, 131, 61, 237, 40, 110, 83, 124,
]

/**
 * Creates a _InitializeProgramConfig_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializeProgramConfig
 * @category generated
 */
export function createInitializeProgramConfigInstruction(
  accounts: InitializeProgramConfigInstructionAccounts,
  args: InitializeProgramConfigInstructionArgs,
  programId = new web3.PublicKey('97Xsunnsy4C6EET3V3cd2bSd1ArLcdUcihD8CKEjdS4c')
) {
  const [data] = initialize_program_configStruct.serialize({
    instructionDiscriminator: initializeProgramConfigInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.programConfig,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.initializer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
