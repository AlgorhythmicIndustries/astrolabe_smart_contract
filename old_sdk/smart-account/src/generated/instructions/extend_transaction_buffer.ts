/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  ExtendTransactionBufferArgs,
  extendTransactionBufferArgsBeet,
} from '../types/ExtendTransactionBufferArgs'

/**
 * @category Instructions
 * @category generated
 */
export type ExtendTransactionBufferInstructionArgs = {
  args: ExtendTransactionBufferArgs
}
/**
 * @category Instructions
 * @category generated
 */
export const extend_transaction_bufferStruct = new beet.FixableBeetArgsStruct<
  ExtendTransactionBufferInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', extendTransactionBufferArgsBeet],
  ],
  'ExtendTransactionBufferInstructionArgs'
)
/**
 * Accounts required by the _ExtendTransactionBufferInstructionAccounts_ instruction
 *
 * @property [] settings
 * @property [] transactionBuffer
 * @property [] creator
 * @category Instructions
 * @category generated
 */
export type ExtendTransactionBufferInstructionAccounts = {
  settings: web3.PublicKey
  transactionBuffer: web3.PublicKey
  creator: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}
export const extendTransactionBufferInstructionDiscriminator = [
  190, 86, 246, 95, 231, 154, 229, 91,
]

/**
 * Creates a _ExtendTransactionBuffer_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category ExtendTransactionBuffer
 * @category generated
 */
export function createExtendTransactionBufferInstruction(
  accounts: ExtendTransactionBufferInstructionAccounts,
  args: ExtendTransactionBufferInstructionArgs,
  programId = new web3.PublicKey('97Xsunnsy4C6EET3V3cd2bSd1ArLcdUcihD8CKEjdS4c')
) {
  const [data] = extend_transaction_bufferStruct.serialize({
    instructionDiscriminator: extendTransactionBufferInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.settings,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.transactionBuffer,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.creator,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
