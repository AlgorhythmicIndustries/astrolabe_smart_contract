/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  SetNewSettingsAuthorityArgs,
  setNewSettingsAuthorityArgsBeet,
} from '../types/SetNewSettingsAuthorityArgs'

/**
 * @category Instructions
 * @category generated
 */
export type SetNewSettingsAuthorityAsAuthorityInstructionArgs = {
  args: SetNewSettingsAuthorityArgs
}
/**
 * @category Instructions
 * @category generated
 */
export const set_new_settings_authority_as_authorityStruct =
  new beet.FixableBeetArgsStruct<
    SetNewSettingsAuthorityAsAuthorityInstructionArgs & {
      instructionDiscriminator: number[] /* size: 8 */
    }
  >(
    [
      ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
      ['args', setNewSettingsAuthorityArgsBeet],
    ],
    'SetNewSettingsAuthorityAsAuthorityInstructionArgs'
  )
/**
 * Accounts required by the _SetNewSettingsAuthorityAsAuthorityInstructionAccounts_ instruction
 *
 * @property [] settings
 * @property [] settingsAuthority
 * @property [] rentPayer (optional)
 * @property [] systemProgram (optional)
 * @property [] program
 * @category Instructions
 * @category generated
 */
export type SetNewSettingsAuthorityAsAuthorityInstructionAccounts = {
  settings: web3.PublicKey
  settingsAuthority: web3.PublicKey
  rentPayer?: web3.PublicKey
  systemProgram?: web3.PublicKey
  program: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}
export const setNewSettingsAuthorityAsAuthorityInstructionDiscriminator = [
  221, 112, 133, 229, 146, 58, 90, 56,
]

/**
 * Creates a _SetNewSettingsAuthorityAsAuthority_ instruction.
 *
 * Optional accounts that are not provided default to the program ID since
 * this was indicated in the IDL from which this instruction was generated.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetNewSettingsAuthorityAsAuthority
 * @category generated
 */
export function createSetNewSettingsAuthorityAsAuthorityInstruction(
  accounts: SetNewSettingsAuthorityAsAuthorityInstructionAccounts,
  args: SetNewSettingsAuthorityAsAuthorityInstructionArgs,
  programId = new web3.PublicKey('97Xsunnsy4C6EET3V3cd2bSd1ArLcdUcihD8CKEjdS4c')
) {
  const [data] = set_new_settings_authority_as_authorityStruct.serialize({
    instructionDiscriminator:
      setNewSettingsAuthorityAsAuthorityInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.settings,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.settingsAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rentPayer ?? programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.program,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
