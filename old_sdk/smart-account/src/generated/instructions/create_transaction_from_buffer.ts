/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CreateTransactionArgs,
  createTransactionArgsBeet,
} from '../types/CreateTransactionArgs'

/**
 * @category Instructions
 * @category generated
 */
export type TransactionFromBufferInstructionArgs = {
  args: CreateTransactionArgs
}
/**
 * @category Instructions
 * @category generated
 */
export const create_transaction_from_bufferStruct =
  new beet.FixableBeetArgsStruct<
    TransactionFromBufferInstructionArgs & {
      instructionDiscriminator: number[] /* size: 8 */
    }
  >(
    [
      ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
      ['args', createTransactionArgsBeet],
    ],
    'TransactionFromBufferInstructionArgs'
  )
/**
 * Accounts required by the _TransactionFromBufferInstructionAccounts_ instruction
 *
 * @property [] transactionCreateItemSettings
 * @property [] transactionCreateItemTransaction
 * @property [] transactionCreateItemCreator
 * @property [] transactionCreateItemRentPayer
 * @property [] transactionCreateItemSystemProgram
 * @property [] transactionBuffer
 * @property [] creator
 * @category Instructions
 * @category generated
 */
export type TransactionFromBufferInstructionAccounts = {
  transactionCreateItemSettings: web3.PublicKey
  transactionCreateItemTransaction: web3.PublicKey
  transactionCreateItemCreator: web3.PublicKey
  transactionCreateItemRentPayer: web3.PublicKey
  transactionCreateItemSystemProgram: web3.PublicKey
  transactionBuffer: web3.PublicKey
  creator: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}
export const transactionFromBufferInstructionDiscriminator = [
  53, 192, 39, 239, 124, 84, 43, 249,
]

/**
 * Creates a _TransactionFromBuffer_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category TransactionFromBuffer
 * @category generated
 */
export function TransactionFromBufferInstruction(
  accounts: TransactionFromBufferInstructionAccounts,
  args: TransactionFromBufferInstructionArgs,
  programId = new web3.PublicKey('97Xsunnsy4C6EET3V3cd2bSd1ArLcdUcihD8CKEjdS4c')
) {
  const [data] = create_transaction_from_bufferStruct.serialize({
    instructionDiscriminator: transactionFromBufferInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.transactionCreateItemSettings,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.transactionCreateItemTransaction,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.transactionCreateItemCreator,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.transactionCreateItemRentPayer,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.transactionCreateItemSystemProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.transactionBuffer,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.creator,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
