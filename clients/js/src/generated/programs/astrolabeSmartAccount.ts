/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  type ParsedActivateProposalInstruction,
  type ParsedAddSignerAsAuthorityInstruction,
  type ParsedAddSpendingLimitAsAuthorityInstruction,
  type ParsedAddTransactionToBatchInstruction,
  type ParsedApproveProposalInstruction,
  type ParsedCancelProposalInstruction,
  type ParsedChangeThresholdAsAuthorityInstruction,
  type ParsedCloseBatchInstruction,
  type ParsedCloseBatchTransactionInstruction,
  type ParsedCloseSettingsTransactionInstruction,
  type ParsedCloseTransactionBufferInstruction,
  type ParsedCloseTransactionInstruction,
  type ParsedCreateBatchInstruction,
  type ParsedCreateProposalInstruction,
  type ParsedCreateSettingsTransactionInstruction,
  type ParsedCreateSmartAccountInstruction,
  type ParsedCreateTransactionBufferInstruction,
  type ParsedCreateTransactionFromBufferInstruction,
  type ParsedCreateTransactionInstruction,
  type ParsedExecuteBatchTransactionInstruction,
  type ParsedExecuteSettingsTransactionInstruction,
  type ParsedExecuteSettingsTransactionSyncInstruction,
  type ParsedExecuteTransactionInstruction,
  type ParsedExecuteTransactionSyncInstruction,
  type ParsedExtendTransactionBufferInstruction,
  type ParsedInitializeProgramConfigInstruction,
  type ParsedLogEventInstruction,
  type ParsedRejectProposalInstruction,
  type ParsedRemoveSignerAsAuthorityInstruction,
  type ParsedRemoveSpendingLimitAsAuthorityInstruction,
  type ParsedSetArchivalAuthorityAsAuthorityInstruction,
  type ParsedSetNewSettingsAuthorityAsAuthorityInstruction,
  type ParsedSetProgramConfigAuthorityInstruction,
  type ParsedSetProgramConfigSmartAccountCreationFeeInstruction,
  type ParsedSetProgramConfigTreasuryInstruction,
  type ParsedSetTimeLockAsAuthorityInstruction,
  type ParsedUseSpendingLimitInstruction,
} from '../instructions';

export const ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS =
  'D7ArmwT3y5vrMYuRhnAKvv9Qqbk9VtbfRY1ShLhLoW6W' as Address<'D7ArmwT3y5vrMYuRhnAKvv9Qqbk9VtbfRY1ShLhLoW6W'>;

export enum AstrolabeSmartAccountAccount {
  Batch,
  BatchTransaction,
  ProgramConfig,
  Proposal,
  Settings,
  SettingsTransaction,
  SpendingLimit,
  Transaction,
  TransactionBuffer,
}

export function identifyAstrolabeSmartAccountAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AstrolabeSmartAccountAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([156, 194, 70, 44, 22, 88, 137, 44])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountAccount.Batch;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([92, 20, 61, 146, 155, 62, 112, 72])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountAccount.BatchTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([196, 210, 90, 231, 144, 149, 140, 63])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountAccount.ProgramConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([26, 94, 189, 187, 116, 136, 53, 33])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountAccount.Proposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([223, 179, 163, 190, 177, 224, 67, 173])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountAccount.Settings;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([199, 151, 72, 87, 77, 124, 16, 0])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountAccount.SettingsTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([10, 201, 27, 160, 218, 195, 222, 152])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountAccount.SpendingLimit;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([11, 24, 174, 129, 203, 117, 242, 23])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountAccount.Transaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([90, 36, 35, 219, 93, 225, 110, 96])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountAccount.TransactionBuffer;
  }
  throw new Error(
    'The provided account could not be identified as a astrolabeSmartAccount account.'
  );
}

export enum AstrolabeSmartAccountInstruction {
  ActivateProposal,
  AddSignerAsAuthority,
  AddSpendingLimitAsAuthority,
  AddTransactionToBatch,
  ApproveProposal,
  CancelProposal,
  ChangeThresholdAsAuthority,
  CloseBatch,
  CloseBatchTransaction,
  CloseSettingsTransaction,
  CloseTransaction,
  CloseTransactionBuffer,
  CreateBatch,
  CreateProposal,
  CreateSettingsTransaction,
  CreateSmartAccount,
  CreateTransaction,
  CreateTransactionBuffer,
  CreateTransactionFromBuffer,
  ExecuteBatchTransaction,
  ExecuteSettingsTransaction,
  ExecuteSettingsTransactionSync,
  ExecuteTransaction,
  ExecuteTransactionSync,
  ExtendTransactionBuffer,
  InitializeProgramConfig,
  LogEvent,
  RejectProposal,
  RemoveSignerAsAuthority,
  RemoveSpendingLimitAsAuthority,
  SetArchivalAuthorityAsAuthority,
  SetNewSettingsAuthorityAsAuthority,
  SetProgramConfigAuthority,
  SetProgramConfigSmartAccountCreationFee,
  SetProgramConfigTreasury,
  SetTimeLockAsAuthority,
  UseSpendingLimit,
}

export function identifyAstrolabeSmartAccountInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): AstrolabeSmartAccountInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([90, 186, 203, 234, 70, 185, 191, 21])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.ActivateProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([80, 198, 228, 154, 7, 234, 99, 56])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.AddSignerAsAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([169, 189, 84, 54, 30, 244, 223, 212])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.AddSpendingLimitAsAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([147, 75, 197, 227, 20, 149, 150, 113])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.AddTransactionToBatch;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([136, 108, 102, 85, 98, 114, 7, 147])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.ApproveProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([106, 74, 128, 146, 19, 65, 39, 23])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.CancelProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([51, 141, 78, 133, 70, 47, 95, 124])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.ChangeThresholdAsAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([166, 174, 35, 253, 209, 211, 181, 28])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.CloseBatch;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([86, 144, 133, 225, 45, 209, 62, 251])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.CloseBatchTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([251, 112, 34, 108, 214, 13, 41, 116])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.CloseSettingsTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([97, 46, 152, 170, 42, 215, 192, 218])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.CloseTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([224, 221, 123, 213, 0, 204, 5, 191])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.CloseTransactionBuffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([159, 198, 248, 43, 248, 31, 235, 86])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.CreateBatch;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([132, 116, 68, 174, 216, 160, 198, 22])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.CreateProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([101, 168, 254, 203, 222, 102, 95, 192])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.CreateSettingsTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([197, 102, 253, 231, 77, 84, 50, 17])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.CreateSmartAccount;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([227, 193, 53, 239, 55, 126, 112, 105])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.CreateTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([57, 97, 250, 156, 59, 211, 32, 208])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.CreateTransactionBuffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([53, 192, 39, 239, 124, 84, 43, 249])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.CreateTransactionFromBuffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([237, 67, 201, 173, 33, 130, 88, 134])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.ExecuteBatchTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([131, 210, 27, 88, 27, 204, 143, 189])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.ExecuteSettingsTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([138, 209, 64, 163, 79, 67, 233, 76])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.ExecuteSettingsTransactionSync;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([231, 173, 49, 91, 235, 24, 68, 19])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.ExecuteTransaction;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([43, 102, 248, 89, 231, 97, 104, 134])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.ExecuteTransactionSync;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([190, 86, 246, 95, 231, 154, 229, 91])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.ExtendTransactionBuffer;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([6, 131, 61, 237, 40, 110, 83, 124])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.InitializeProgramConfig;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([5, 9, 90, 141, 223, 134, 57, 217])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.LogEvent;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([114, 162, 164, 82, 191, 11, 102, 25])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.RejectProposal;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([58, 19, 149, 16, 181, 16, 125, 148])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.RemoveSignerAsAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([94, 32, 68, 127, 251, 44, 145, 7])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.RemoveSpendingLimitAsAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([178, 199, 4, 13, 237, 234, 152, 202])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.SetArchivalAuthorityAsAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([221, 112, 133, 229, 146, 58, 90, 56])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.SetNewSettingsAuthorityAsAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([130, 40, 234, 111, 237, 155, 246, 203])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.SetProgramConfigAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([222, 30, 134, 176, 131, 113, 195, 202])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.SetProgramConfigSmartAccountCreationFee;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([244, 119, 192, 190, 182, 101, 227, 189])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.SetProgramConfigTreasury;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([2, 234, 93, 93, 40, 92, 31, 234])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.SetTimeLockAsAuthority;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([41, 179, 70, 5, 194, 147, 239, 158])
      ),
      0
    )
  ) {
    return AstrolabeSmartAccountInstruction.UseSpendingLimit;
  }
  throw new Error(
    'The provided instruction could not be identified as a astrolabeSmartAccount instruction.'
  );
}

export type ParsedAstrolabeSmartAccountInstruction<
  TProgram extends string = 'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD',
> =
  | ({
      instructionType: AstrolabeSmartAccountInstruction.ActivateProposal;
    } & ParsedActivateProposalInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.AddSignerAsAuthority;
    } & ParsedAddSignerAsAuthorityInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.AddSpendingLimitAsAuthority;
    } & ParsedAddSpendingLimitAsAuthorityInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.AddTransactionToBatch;
    } & ParsedAddTransactionToBatchInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.ApproveProposal;
    } & ParsedApproveProposalInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.CancelProposal;
    } & ParsedCancelProposalInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.ChangeThresholdAsAuthority;
    } & ParsedChangeThresholdAsAuthorityInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.CloseBatch;
    } & ParsedCloseBatchInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.CloseBatchTransaction;
    } & ParsedCloseBatchTransactionInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.CloseSettingsTransaction;
    } & ParsedCloseSettingsTransactionInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.CloseTransaction;
    } & ParsedCloseTransactionInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.CloseTransactionBuffer;
    } & ParsedCloseTransactionBufferInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.CreateBatch;
    } & ParsedCreateBatchInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.CreateProposal;
    } & ParsedCreateProposalInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.CreateSettingsTransaction;
    } & ParsedCreateSettingsTransactionInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.CreateSmartAccount;
    } & ParsedCreateSmartAccountInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.CreateTransaction;
    } & ParsedCreateTransactionInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.CreateTransactionBuffer;
    } & ParsedCreateTransactionBufferInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.CreateTransactionFromBuffer;
    } & ParsedCreateTransactionFromBufferInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.ExecuteBatchTransaction;
    } & ParsedExecuteBatchTransactionInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.ExecuteSettingsTransaction;
    } & ParsedExecuteSettingsTransactionInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.ExecuteSettingsTransactionSync;
    } & ParsedExecuteSettingsTransactionSyncInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.ExecuteTransaction;
    } & ParsedExecuteTransactionInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.ExecuteTransactionSync;
    } & ParsedExecuteTransactionSyncInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.ExtendTransactionBuffer;
    } & ParsedExtendTransactionBufferInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.InitializeProgramConfig;
    } & ParsedInitializeProgramConfigInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.LogEvent;
    } & ParsedLogEventInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.RejectProposal;
    } & ParsedRejectProposalInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.RemoveSignerAsAuthority;
    } & ParsedRemoveSignerAsAuthorityInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.RemoveSpendingLimitAsAuthority;
    } & ParsedRemoveSpendingLimitAsAuthorityInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.SetArchivalAuthorityAsAuthority;
    } & ParsedSetArchivalAuthorityAsAuthorityInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.SetNewSettingsAuthorityAsAuthority;
    } & ParsedSetNewSettingsAuthorityAsAuthorityInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.SetProgramConfigAuthority;
    } & ParsedSetProgramConfigAuthorityInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.SetProgramConfigSmartAccountCreationFee;
    } & ParsedSetProgramConfigSmartAccountCreationFeeInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.SetProgramConfigTreasury;
    } & ParsedSetProgramConfigTreasuryInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.SetTimeLockAsAuthority;
    } & ParsedSetTimeLockAsAuthorityInstruction<TProgram>)
  | ({
      instructionType: AstrolabeSmartAccountInstruction.UseSpendingLimit;
    } & ParsedUseSpendingLimitInstruction<TProgram>);
