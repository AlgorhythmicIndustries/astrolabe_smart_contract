/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getSmartAccountTransactionMessageDecoder,
  getSmartAccountTransactionMessageEncoder,
  type SmartAccountTransactionMessage,
  type SmartAccountTransactionMessageArgs,
} from '../types';

export const BATCH_TRANSACTION_DISCRIMINATOR = new Uint8Array([
  92, 20, 61, 146, 155, 62, 112, 72,
]);

export function getBatchTransactionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    BATCH_TRANSACTION_DISCRIMINATOR
  );
}

export type BatchTransaction = {
  discriminator: ReadonlyUint8Array;
  /** PDA bump. */
  bump: number;
  /** The rent collector for the batch transaction account. */
  rentCollector: Address;
  /**
   * Derivation bumps for additional signers.
   * Some transactions require multiple signers. Often these additional signers are "ephemeral" keypairs
   * that are generated on the client with a sole purpose of signing the transaction and be discarded immediately after.
   * When wrapping such transactions into Smart Account ones, we replace these "ephemeral" signing keypairs
   * with PDAs derived from the transaction's `transaction_index` and controlled by the Smart Account Program;
   * during execution the program includes the seeds of these PDAs into the `invoke_signed` calls,
   * thus "signing" on behalf of these PDAs.
   */
  ephemeralSignerBumps: ReadonlyUint8Array;
  /** data required for executing the transaction. */
  message: SmartAccountTransactionMessage;
};

export type BatchTransactionArgs = {
  /** PDA bump. */
  bump: number;
  /** The rent collector for the batch transaction account. */
  rentCollector: Address;
  /**
   * Derivation bumps for additional signers.
   * Some transactions require multiple signers. Often these additional signers are "ephemeral" keypairs
   * that are generated on the client with a sole purpose of signing the transaction and be discarded immediately after.
   * When wrapping such transactions into Smart Account ones, we replace these "ephemeral" signing keypairs
   * with PDAs derived from the transaction's `transaction_index` and controlled by the Smart Account Program;
   * during execution the program includes the seeds of these PDAs into the `invoke_signed` calls,
   * thus "signing" on behalf of these PDAs.
   */
  ephemeralSignerBumps: ReadonlyUint8Array;
  /** data required for executing the transaction. */
  message: SmartAccountTransactionMessageArgs;
};

export function getBatchTransactionEncoder(): Encoder<BatchTransactionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bump', getU8Encoder()],
      ['rentCollector', getAddressEncoder()],
      [
        'ephemeralSignerBumps',
        addEncoderSizePrefix(getBytesEncoder(), getU32Encoder()),
      ],
      ['message', getSmartAccountTransactionMessageEncoder()],
    ]),
    (value) => ({ ...value, discriminator: BATCH_TRANSACTION_DISCRIMINATOR })
  );
}

export function getBatchTransactionDecoder(): Decoder<BatchTransaction> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bump', getU8Decoder()],
    ['rentCollector', getAddressDecoder()],
    [
      'ephemeralSignerBumps',
      addDecoderSizePrefix(getBytesDecoder(), getU32Decoder()),
    ],
    ['message', getSmartAccountTransactionMessageDecoder()],
  ]);
}

export function getBatchTransactionCodec(): Codec<
  BatchTransactionArgs,
  BatchTransaction
> {
  return combineCodec(
    getBatchTransactionEncoder(),
    getBatchTransactionDecoder()
  );
}

export function decodeBatchTransaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<BatchTransaction, TAddress>;
export function decodeBatchTransaction<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<BatchTransaction, TAddress>;
export function decodeBatchTransaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<BatchTransaction, TAddress>
  | MaybeAccount<BatchTransaction, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getBatchTransactionDecoder()
  );
}

export async function fetchBatchTransaction<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<BatchTransaction, TAddress>> {
  const maybeAccount = await fetchMaybeBatchTransaction(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeBatchTransaction<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<BatchTransaction, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeBatchTransaction(maybeAccount);
}

export async function fetchAllBatchTransaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<BatchTransaction>[]> {
  const maybeAccounts = await fetchAllMaybeBatchTransaction(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeBatchTransaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<BatchTransaction>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeBatchTransaction(maybeAccount)
  );
}
