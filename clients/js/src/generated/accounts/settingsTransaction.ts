/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import {
  getSettingsActionDecoder,
  getSettingsActionEncoder,
  type SettingsAction,
  type SettingsActionArgs,
} from '../types';

export const SETTINGS_TRANSACTION_DISCRIMINATOR = new Uint8Array([
  199, 151, 72, 87, 77, 124, 16, 0,
]);

export function getSettingsTransactionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SETTINGS_TRANSACTION_DISCRIMINATOR
  );
}

export type SettingsTransaction = {
  discriminator: ReadonlyUint8Array;
  /** The settings this belongs to. */
  settings: Address;
  /** Signer on the settings who submitted the transaction. */
  creator: Address;
  /** The rent collector for the settings transaction account. */
  rentCollector: Address;
  /** Index of this transaction within the settings. */
  index: bigint;
  /** bump for the transaction seeds. */
  bump: number;
  /** Action to be performed on the settings. */
  actions: Array<SettingsAction>;
};

export type SettingsTransactionArgs = {
  /** The settings this belongs to. */
  settings: Address;
  /** Signer on the settings who submitted the transaction. */
  creator: Address;
  /** The rent collector for the settings transaction account. */
  rentCollector: Address;
  /** Index of this transaction within the settings. */
  index: number | bigint;
  /** bump for the transaction seeds. */
  bump: number;
  /** Action to be performed on the settings. */
  actions: Array<SettingsActionArgs>;
};

export function getSettingsTransactionEncoder(): Encoder<SettingsTransactionArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['settings', getAddressEncoder()],
      ['creator', getAddressEncoder()],
      ['rentCollector', getAddressEncoder()],
      ['index', getU64Encoder()],
      ['bump', getU8Encoder()],
      ['actions', getArrayEncoder(getSettingsActionEncoder())],
    ]),
    (value) => ({ ...value, discriminator: SETTINGS_TRANSACTION_DISCRIMINATOR })
  );
}

export function getSettingsTransactionDecoder(): Decoder<SettingsTransaction> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['settings', getAddressDecoder()],
    ['creator', getAddressDecoder()],
    ['rentCollector', getAddressDecoder()],
    ['index', getU64Decoder()],
    ['bump', getU8Decoder()],
    ['actions', getArrayDecoder(getSettingsActionDecoder())],
  ]);
}

export function getSettingsTransactionCodec(): Codec<
  SettingsTransactionArgs,
  SettingsTransaction
> {
  return combineCodec(
    getSettingsTransactionEncoder(),
    getSettingsTransactionDecoder()
  );
}

export function decodeSettingsTransaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<SettingsTransaction, TAddress>;
export function decodeSettingsTransaction<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<SettingsTransaction, TAddress>;
export function decodeSettingsTransaction<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<SettingsTransaction, TAddress>
  | MaybeAccount<SettingsTransaction, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getSettingsTransactionDecoder()
  );
}

export async function fetchSettingsTransaction<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<SettingsTransaction, TAddress>> {
  const maybeAccount = await fetchMaybeSettingsTransaction(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeSettingsTransaction<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<SettingsTransaction, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeSettingsTransaction(maybeAccount);
}

export async function fetchAllSettingsTransaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<SettingsTransaction>[]> {
  const maybeAccounts = await fetchAllMaybeSettingsTransaction(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeSettingsTransaction(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<SettingsTransaction>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeSettingsTransaction(maybeAccount)
  );
}
