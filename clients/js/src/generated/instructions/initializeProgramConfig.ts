/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_PROGRAM_CONFIG_DISCRIMINATOR = new Uint8Array([
  6, 131, 61, 237, 40, 110, 83, 124,
]);

export function getInitializeProgramConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_PROGRAM_CONFIG_DISCRIMINATOR
  );
}

export type InitializeProgramConfigInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountProgramConfig extends string | IAccountMeta<string> = string,
  TAccountInitializer extends
    | string
    | IAccountMeta<string> = 'BrQAbGdWQ9YUHmWWgKFdFe4miTURH71jkYFPXfaosqDv',
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProgramConfig extends string
        ? WritableAccount<TAccountProgramConfig>
        : TAccountProgramConfig,
      TAccountInitializer extends string
        ? WritableSignerAccount<TAccountInitializer> &
            IAccountSignerMeta<TAccountInitializer>
        : TAccountInitializer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeProgramConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** The authority that can configure the program config: change the treasury, etc. */
  authority: Address;
  /** The fee that is charged for creating a new smart account. */
  smartAccountCreationFee: bigint;
  /** The treasury where the creation fee is transferred to. */
  treasury: Address;
};

export type InitializeProgramConfigInstructionDataArgs = {
  /** The authority that can configure the program config: change the treasury, etc. */
  authority: Address;
  /** The fee that is charged for creating a new smart account. */
  smartAccountCreationFee: number | bigint;
  /** The treasury where the creation fee is transferred to. */
  treasury: Address;
};

export function getInitializeProgramConfigInstructionDataEncoder(): Encoder<InitializeProgramConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['authority', getAddressEncoder()],
      ['smartAccountCreationFee', getU64Encoder()],
      ['treasury', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: INITIALIZE_PROGRAM_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getInitializeProgramConfigInstructionDataDecoder(): Decoder<InitializeProgramConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['authority', getAddressDecoder()],
    ['smartAccountCreationFee', getU64Decoder()],
    ['treasury', getAddressDecoder()],
  ]);
}

export function getInitializeProgramConfigInstructionDataCodec(): Codec<
  InitializeProgramConfigInstructionDataArgs,
  InitializeProgramConfigInstructionData
> {
  return combineCodec(
    getInitializeProgramConfigInstructionDataEncoder(),
    getInitializeProgramConfigInstructionDataDecoder()
  );
}

export type InitializeProgramConfigAsyncInput<
  TAccountProgramConfig extends string = string,
  TAccountInitializer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  programConfig?: Address<TAccountProgramConfig>;
  /** The hard-coded account that is used to initialize the program config once. */
  initializer?: TransactionSigner<TAccountInitializer>;
  systemProgram?: Address<TAccountSystemProgram>;
  authority: InitializeProgramConfigInstructionDataArgs['authority'];
  smartAccountCreationFee: InitializeProgramConfigInstructionDataArgs['smartAccountCreationFee'];
  treasury: InitializeProgramConfigInstructionDataArgs['treasury'];
};

export async function getInitializeProgramConfigInstructionAsync<
  TAccountProgramConfig extends string,
  TAccountInitializer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: InitializeProgramConfigAsyncInput<
    TAccountProgramConfig,
    TAccountInitializer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeProgramConfigInstruction<
    TProgramAddress,
    TAccountProgramConfig,
    TAccountInitializer,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    programConfig: { value: input.programConfig ?? null, isWritable: true },
    initializer: { value: input.initializer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.programConfig.value) {
    accounts.programConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            115, 109, 97, 114, 116, 95, 97, 99, 99, 111, 117, 110, 116,
          ])
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 103, 114, 97, 109, 95, 99, 111, 110, 102, 105, 103,
          ])
        ),
      ],
    });
  }
  if (!accounts.initializer.value) {
    accounts.initializer.value =
      'BrQAbGdWQ9YUHmWWgKFdFe4miTURH71jkYFPXfaosqDv' as Address<'BrQAbGdWQ9YUHmWWgKFdFe4miTURH71jkYFPXfaosqDv'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.programConfig),
      getAccountMeta(accounts.initializer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeProgramConfigInstructionDataEncoder().encode(
      args as InitializeProgramConfigInstructionDataArgs
    ),
  } as InitializeProgramConfigInstruction<
    TProgramAddress,
    TAccountProgramConfig,
    TAccountInitializer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type InitializeProgramConfigInput<
  TAccountProgramConfig extends string = string,
  TAccountInitializer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  programConfig: Address<TAccountProgramConfig>;
  /** The hard-coded account that is used to initialize the program config once. */
  initializer?: TransactionSigner<TAccountInitializer>;
  systemProgram?: Address<TAccountSystemProgram>;
  authority: InitializeProgramConfigInstructionDataArgs['authority'];
  smartAccountCreationFee: InitializeProgramConfigInstructionDataArgs['smartAccountCreationFee'];
  treasury: InitializeProgramConfigInstructionDataArgs['treasury'];
};

export function getInitializeProgramConfigInstruction<
  TAccountProgramConfig extends string,
  TAccountInitializer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: InitializeProgramConfigInput<
    TAccountProgramConfig,
    TAccountInitializer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeProgramConfigInstruction<
  TProgramAddress,
  TAccountProgramConfig,
  TAccountInitializer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    programConfig: { value: input.programConfig ?? null, isWritable: true },
    initializer: { value: input.initializer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.initializer.value) {
    accounts.initializer.value =
      'BrQAbGdWQ9YUHmWWgKFdFe4miTURH71jkYFPXfaosqDv' as Address<'BrQAbGdWQ9YUHmWWgKFdFe4miTURH71jkYFPXfaosqDv'>;
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.programConfig),
      getAccountMeta(accounts.initializer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getInitializeProgramConfigInstructionDataEncoder().encode(
      args as InitializeProgramConfigInstructionDataArgs
    ),
  } as InitializeProgramConfigInstruction<
    TProgramAddress,
    TAccountProgramConfig,
    TAccountInitializer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedInitializeProgramConfigInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    programConfig: TAccountMetas[0];
    /** The hard-coded account that is used to initialize the program config once. */
    initializer: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: InitializeProgramConfigInstructionData;
};

export function parseInitializeProgramConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedInitializeProgramConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      programConfig: getNextAccount(),
      initializer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeProgramConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
