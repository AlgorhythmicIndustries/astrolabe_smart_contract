/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getSettingsActionDecoder,
  getSettingsActionEncoder,
  type SettingsAction,
  type SettingsActionArgs,
} from '../types';

export const CREATE_SETTINGS_TRANSACTION_DISCRIMINATOR = new Uint8Array([
  101, 168, 254, 203, 222, 102, 95, 192,
]);

export function getCreateSettingsTransactionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_SETTINGS_TRANSACTION_DISCRIMINATOR
  );
}

export type CreateSettingsTransactionInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | IAccountMeta<string> = string,
  TAccountTransaction extends string | IAccountMeta<string> = string,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TAccountRentPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountTransaction extends string
        ? WritableAccount<TAccountTransaction>
        : TAccountTransaction,
      TAccountCreator extends string
        ? ReadonlySignerAccount<TAccountCreator> &
            IAccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            IAccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateSettingsTransactionInstructionData = {
  discriminator: ReadonlyUint8Array;
  actions: Array<SettingsAction>;
  memo: Option<string>;
};

export type CreateSettingsTransactionInstructionDataArgs = {
  actions: Array<SettingsActionArgs>;
  memo: OptionOrNullable<string>;
};

export function getCreateSettingsTransactionInstructionDataEncoder(): Encoder<CreateSettingsTransactionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['actions', getArrayEncoder(getSettingsActionEncoder())],
      [
        'memo',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_SETTINGS_TRANSACTION_DISCRIMINATOR,
    })
  );
}

export function getCreateSettingsTransactionInstructionDataDecoder(): Decoder<CreateSettingsTransactionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['actions', getArrayDecoder(getSettingsActionDecoder())],
    [
      'memo',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getCreateSettingsTransactionInstructionDataCodec(): Codec<
  CreateSettingsTransactionInstructionDataArgs,
  CreateSettingsTransactionInstructionData
> {
  return combineCodec(
    getCreateSettingsTransactionInstructionDataEncoder(),
    getCreateSettingsTransactionInstructionDataDecoder()
  );
}

export type CreateSettingsTransactionInput<
  TAccountSettings extends string = string,
  TAccountTransaction extends string = string,
  TAccountCreator extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  settings: Address<TAccountSettings>;
  transaction: Address<TAccountTransaction>;
  /** The signer on the smart account that is creating the transaction. */
  creator: TransactionSigner<TAccountCreator>;
  /** The payer for the transaction account rent. */
  rentPayer: TransactionSigner<TAccountRentPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  actions: CreateSettingsTransactionInstructionDataArgs['actions'];
  memo: CreateSettingsTransactionInstructionDataArgs['memo'];
};

export function getCreateSettingsTransactionInstruction<
  TAccountSettings extends string,
  TAccountTransaction extends string,
  TAccountCreator extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: CreateSettingsTransactionInput<
    TAccountSettings,
    TAccountTransaction,
    TAccountCreator,
    TAccountRentPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateSettingsTransactionInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountTransaction,
  TAccountCreator,
  TAccountRentPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    transaction: { value: input.transaction ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: false },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.transaction),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCreateSettingsTransactionInstructionDataEncoder().encode(
      args as CreateSettingsTransactionInstructionDataArgs
    ),
  } as CreateSettingsTransactionInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountTransaction,
    TAccountCreator,
    TAccountRentPayer,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCreateSettingsTransactionInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    transaction: TAccountMetas[1];
    /** The signer on the smart account that is creating the transaction. */
    creator: TAccountMetas[2];
    /** The payer for the transaction account rent. */
    rentPayer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: CreateSettingsTransactionInstructionData;
};

export function parseCreateSettingsTransactionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateSettingsTransactionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      transaction: getNextAccount(),
      creator: getNextAccount(),
      rentPayer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateSettingsTransactionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
