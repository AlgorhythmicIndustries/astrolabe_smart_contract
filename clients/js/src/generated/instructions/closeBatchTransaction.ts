/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_BATCH_TRANSACTION_DISCRIMINATOR = new Uint8Array([
  86, 144, 133, 225, 45, 209, 62, 251,
]);

export function getCloseBatchTransactionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_BATCH_TRANSACTION_DISCRIMINATOR
  );
}

export type CloseBatchTransactionInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountProposal extends string | AccountMeta<string> = string,
  TAccountBatch extends string | AccountMeta<string> = string,
  TAccountTransaction extends string | AccountMeta<string> = string,
  TAccountTransactionRentCollector extends
    | string
    | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? ReadonlyAccount<TAccountSettings>
        : TAccountSettings,
      TAccountProposal extends string
        ? ReadonlyAccount<TAccountProposal>
        : TAccountProposal,
      TAccountBatch extends string
        ? WritableAccount<TAccountBatch>
        : TAccountBatch,
      TAccountTransaction extends string
        ? WritableAccount<TAccountTransaction>
        : TAccountTransaction,
      TAccountTransactionRentCollector extends string
        ? WritableAccount<TAccountTransactionRentCollector>
        : TAccountTransactionRentCollector,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CloseBatchTransactionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CloseBatchTransactionInstructionDataArgs = {};

export function getCloseBatchTransactionInstructionDataEncoder(): FixedSizeEncoder<CloseBatchTransactionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CLOSE_BATCH_TRANSACTION_DISCRIMINATOR,
    })
  );
}

export function getCloseBatchTransactionInstructionDataDecoder(): FixedSizeDecoder<CloseBatchTransactionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseBatchTransactionInstructionDataCodec(): FixedSizeCodec<
  CloseBatchTransactionInstructionDataArgs,
  CloseBatchTransactionInstructionData
> {
  return combineCodec(
    getCloseBatchTransactionInstructionDataEncoder(),
    getCloseBatchTransactionInstructionDataDecoder()
  );
}

export type CloseBatchTransactionInput<
  TAccountSettings extends string = string,
  TAccountProposal extends string = string,
  TAccountBatch extends string = string,
  TAccountTransaction extends string = string,
  TAccountTransactionRentCollector extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  settings: Address<TAccountSettings>;
  proposal: Address<TAccountProposal>;
  /** `Batch` corresponding to the `proposal`. */
  batch: Address<TAccountBatch>;
  /**
   * `BatchTransaction` account to close.
   * The transaction must be the current last one in the batch.
   */
  transaction: Address<TAccountTransaction>;
  /** The rent collector. */
  transactionRentCollector: Address<TAccountTransactionRentCollector>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getCloseBatchTransactionInstruction<
  TAccountSettings extends string,
  TAccountProposal extends string,
  TAccountBatch extends string,
  TAccountTransaction extends string,
  TAccountTransactionRentCollector extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: CloseBatchTransactionInput<
    TAccountSettings,
    TAccountProposal,
    TAccountBatch,
    TAccountTransaction,
    TAccountTransactionRentCollector,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CloseBatchTransactionInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountProposal,
  TAccountBatch,
  TAccountTransaction,
  TAccountTransactionRentCollector,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: false },
    proposal: { value: input.proposal ?? null, isWritable: false },
    batch: { value: input.batch ?? null, isWritable: true },
    transaction: { value: input.transaction ?? null, isWritable: true },
    transactionRentCollector: {
      value: input.transactionRentCollector ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.batch),
      getAccountMeta(accounts.transaction),
      getAccountMeta(accounts.transactionRentCollector),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCloseBatchTransactionInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseBatchTransactionInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountProposal,
    TAccountBatch,
    TAccountTransaction,
    TAccountTransactionRentCollector,
    TAccountSystemProgram
  >);
}

export type ParsedCloseBatchTransactionInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    proposal: TAccountMetas[1];
    /** `Batch` corresponding to the `proposal`. */
    batch: TAccountMetas[2];
    /**
     * `BatchTransaction` account to close.
     * The transaction must be the current last one in the batch.
     */
    transaction: TAccountMetas[3];
    /** The rent collector. */
    transactionRentCollector: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: CloseBatchTransactionInstructionData;
};

export function parseCloseBatchTransactionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseBatchTransactionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      proposal: getNextAccount(),
      batch: getNextAccount(),
      transaction: getNextAccount(),
      transactionRentCollector: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCloseBatchTransactionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
