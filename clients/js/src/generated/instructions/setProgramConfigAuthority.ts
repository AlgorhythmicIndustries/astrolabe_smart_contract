/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_PROGRAM_CONFIG_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  130, 40, 234, 111, 237, 155, 246, 203,
]);

export function getSetProgramConfigAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_PROGRAM_CONFIG_AUTHORITY_DISCRIMINATOR
  );
}

export type SetProgramConfigAuthorityInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountProgramConfig extends string | AccountMeta<string> = string,
  TAccountAuthority extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountProgramConfig extends string
        ? WritableAccount<TAccountProgramConfig>
        : TAccountProgramConfig,
      TAccountAuthority extends string
        ? ReadonlySignerAccount<TAccountAuthority> &
            AccountSignerMeta<TAccountAuthority>
        : TAccountAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type SetProgramConfigAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
  newAuthority: Address;
};

export type SetProgramConfigAuthorityInstructionDataArgs = {
  newAuthority: Address;
};

export function getSetProgramConfigAuthorityInstructionDataEncoder(): FixedSizeEncoder<SetProgramConfigAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newAuthority', getAddressEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_PROGRAM_CONFIG_AUTHORITY_DISCRIMINATOR,
    })
  );
}

export function getSetProgramConfigAuthorityInstructionDataDecoder(): FixedSizeDecoder<SetProgramConfigAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newAuthority', getAddressDecoder()],
  ]);
}

export function getSetProgramConfigAuthorityInstructionDataCodec(): FixedSizeCodec<
  SetProgramConfigAuthorityInstructionDataArgs,
  SetProgramConfigAuthorityInstructionData
> {
  return combineCodec(
    getSetProgramConfigAuthorityInstructionDataEncoder(),
    getSetProgramConfigAuthorityInstructionDataDecoder()
  );
}

export type SetProgramConfigAuthorityAsyncInput<
  TAccountProgramConfig extends string = string,
  TAccountAuthority extends string = string,
> = {
  programConfig?: Address<TAccountProgramConfig>;
  authority: TransactionSigner<TAccountAuthority>;
  newAuthority: SetProgramConfigAuthorityInstructionDataArgs['newAuthority'];
};

export async function getSetProgramConfigAuthorityInstructionAsync<
  TAccountProgramConfig extends string,
  TAccountAuthority extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: SetProgramConfigAuthorityAsyncInput<
    TAccountProgramConfig,
    TAccountAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  SetProgramConfigAuthorityInstruction<
    TProgramAddress,
    TAccountProgramConfig,
    TAccountAuthority
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    programConfig: { value: input.programConfig ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.programConfig.value) {
    accounts.programConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            115, 109, 97, 114, 116, 95, 97, 99, 99, 111, 117, 110, 116,
          ])
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 103, 114, 97, 109, 95, 99, 111, 110, 102, 105, 103,
          ])
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.programConfig),
      getAccountMeta(accounts.authority),
    ],
    data: getSetProgramConfigAuthorityInstructionDataEncoder().encode(
      args as SetProgramConfigAuthorityInstructionDataArgs
    ),
    programAddress,
  } as SetProgramConfigAuthorityInstruction<
    TProgramAddress,
    TAccountProgramConfig,
    TAccountAuthority
  >);
}

export type SetProgramConfigAuthorityInput<
  TAccountProgramConfig extends string = string,
  TAccountAuthority extends string = string,
> = {
  programConfig: Address<TAccountProgramConfig>;
  authority: TransactionSigner<TAccountAuthority>;
  newAuthority: SetProgramConfigAuthorityInstructionDataArgs['newAuthority'];
};

export function getSetProgramConfigAuthorityInstruction<
  TAccountProgramConfig extends string,
  TAccountAuthority extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: SetProgramConfigAuthorityInput<
    TAccountProgramConfig,
    TAccountAuthority
  >,
  config?: { programAddress?: TProgramAddress }
): SetProgramConfigAuthorityInstruction<
  TProgramAddress,
  TAccountProgramConfig,
  TAccountAuthority
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    programConfig: { value: input.programConfig ?? null, isWritable: true },
    authority: { value: input.authority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.programConfig),
      getAccountMeta(accounts.authority),
    ],
    data: getSetProgramConfigAuthorityInstructionDataEncoder().encode(
      args as SetProgramConfigAuthorityInstructionDataArgs
    ),
    programAddress,
  } as SetProgramConfigAuthorityInstruction<
    TProgramAddress,
    TAccountProgramConfig,
    TAccountAuthority
  >);
}

export type ParsedSetProgramConfigAuthorityInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    programConfig: TAccountMetas[0];
    authority: TAccountMetas[1];
  };
  data: SetProgramConfigAuthorityInstructionData;
};

export function parseSetProgramConfigAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetProgramConfigAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { programConfig: getNextAccount(), authority: getNextAccount() },
    data: getSetProgramConfigAuthorityInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
