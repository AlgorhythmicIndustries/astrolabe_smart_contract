/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const SET_ARCHIVAL_AUTHORITY_AS_AUTHORITY_DISCRIMINATOR = new Uint8Array(
  [178, 199, 4, 13, 237, 234, 152, 202]
);

export function getSetArchivalAuthorityAsAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_ARCHIVAL_AUTHORITY_AS_AUTHORITY_DISCRIMINATOR
  );
}

export type SetArchivalAuthorityAsAuthorityInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountSettingsAuthority extends string | AccountMeta<string> = string,
  TAccountRentPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountProgram extends
    | string
    | AccountMeta<string> = 'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountSettingsAuthority extends string
        ? ReadonlySignerAccount<TAccountSettingsAuthority> &
            AccountSignerMeta<TAccountSettingsAuthority>
        : TAccountSettingsAuthority,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            AccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type SetArchivalAuthorityAsAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
  newArchivalAuthority: Option<Address>;
  /** Memo is used for indexing only. */
  memo: Option<string>;
};

export type SetArchivalAuthorityAsAuthorityInstructionDataArgs = {
  newArchivalAuthority: OptionOrNullable<Address>;
  /** Memo is used for indexing only. */
  memo: OptionOrNullable<string>;
};

export function getSetArchivalAuthorityAsAuthorityInstructionDataEncoder(): Encoder<SetArchivalAuthorityAsAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newArchivalAuthority', getOptionEncoder(getAddressEncoder())],
      [
        'memo',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_ARCHIVAL_AUTHORITY_AS_AUTHORITY_DISCRIMINATOR,
    })
  );
}

export function getSetArchivalAuthorityAsAuthorityInstructionDataDecoder(): Decoder<SetArchivalAuthorityAsAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newArchivalAuthority', getOptionDecoder(getAddressDecoder())],
    [
      'memo',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getSetArchivalAuthorityAsAuthorityInstructionDataCodec(): Codec<
  SetArchivalAuthorityAsAuthorityInstructionDataArgs,
  SetArchivalAuthorityAsAuthorityInstructionData
> {
  return combineCodec(
    getSetArchivalAuthorityAsAuthorityInstructionDataEncoder(),
    getSetArchivalAuthorityAsAuthorityInstructionDataDecoder()
  );
}

export type SetArchivalAuthorityAsAuthorityInput<
  TAccountSettings extends string = string,
  TAccountSettingsAuthority extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountProgram extends string = string,
> = {
  settings: Address<TAccountSettings>;
  /** Settings `settings_authority` that must authorize the configuration change. */
  settingsAuthority: TransactionSigner<TAccountSettingsAuthority>;
  /**
   * The account that will be charged or credited in case the settings account needs to reallocate space,
   * for example when adding a new signer or a spending limit.
   * This is usually the same as `settings_authority`, but can be a different account if needed.
   */
  rentPayer?: TransactionSigner<TAccountRentPayer>;
  /** We might need it in case reallocation is needed. */
  systemProgram?: Address<TAccountSystemProgram>;
  program?: Address<TAccountProgram>;
  newArchivalAuthority: SetArchivalAuthorityAsAuthorityInstructionDataArgs['newArchivalAuthority'];
  memo: SetArchivalAuthorityAsAuthorityInstructionDataArgs['memo'];
};

export function getSetArchivalAuthorityAsAuthorityInstruction<
  TAccountSettings extends string,
  TAccountSettingsAuthority extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: SetArchivalAuthorityAsAuthorityInput<
    TAccountSettings,
    TAccountSettingsAuthority,
    TAccountRentPayer,
    TAccountSystemProgram,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): SetArchivalAuthorityAsAuthorityInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountSettingsAuthority,
  TAccountRentPayer,
  TAccountSystemProgram,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    settingsAuthority: {
      value: input.settingsAuthority ?? null,
      isWritable: false,
    },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.program.value) {
    accounts.program.value =
      'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q' as Address<'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.settingsAuthority),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.program),
    ],
    data: getSetArchivalAuthorityAsAuthorityInstructionDataEncoder().encode(
      args as SetArchivalAuthorityAsAuthorityInstructionDataArgs
    ),
    programAddress,
  } as SetArchivalAuthorityAsAuthorityInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountSettingsAuthority,
    TAccountRentPayer,
    TAccountSystemProgram,
    TAccountProgram
  >);
}

export type ParsedSetArchivalAuthorityAsAuthorityInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    /** Settings `settings_authority` that must authorize the configuration change. */
    settingsAuthority: TAccountMetas[1];
    /**
     * The account that will be charged or credited in case the settings account needs to reallocate space,
     * for example when adding a new signer or a spending limit.
     * This is usually the same as `settings_authority`, but can be a different account if needed.
     */
    rentPayer?: TAccountMetas[2] | undefined;
    /** We might need it in case reallocation is needed. */
    systemProgram?: TAccountMetas[3] | undefined;
    program: TAccountMetas[4];
  };
  data: SetArchivalAuthorityAsAuthorityInstructionData;
};

export function parseSetArchivalAuthorityAsAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedSetArchivalAuthorityAsAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      settingsAuthority: getNextAccount(),
      rentPayer: getNextOptionalAccount(),
      systemProgram: getNextOptionalAccount(),
      program: getNextAccount(),
    },
    data: getSetArchivalAuthorityAsAuthorityInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
