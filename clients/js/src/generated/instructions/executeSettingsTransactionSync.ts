/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getSettingsActionDecoder,
  getSettingsActionEncoder,
  type SettingsAction,
  type SettingsActionArgs,
} from '../types';

export const EXECUTE_SETTINGS_TRANSACTION_SYNC_DISCRIMINATOR = new Uint8Array([
  138, 209, 64, 163, 79, 67, 233, 76,
]);

export function getExecuteSettingsTransactionSyncDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EXECUTE_SETTINGS_TRANSACTION_SYNC_DISCRIMINATOR
  );
}

export type ExecuteSettingsTransactionSyncInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountRentPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TAccountProgram extends
    | string
    | AccountMeta<string> = 'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            AccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ExecuteSettingsTransactionSyncInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** The number of signers to reach threshold and adequate permissions */
  numSigners: number;
  /** The settings actions to execute */
  actions: Array<SettingsAction>;
  memo: Option<string>;
};

export type ExecuteSettingsTransactionSyncInstructionDataArgs = {
  /** The number of signers to reach threshold and adequate permissions */
  numSigners: number;
  /** The settings actions to execute */
  actions: Array<SettingsActionArgs>;
  memo: OptionOrNullable<string>;
};

export function getExecuteSettingsTransactionSyncInstructionDataEncoder(): Encoder<ExecuteSettingsTransactionSyncInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['numSigners', getU8Encoder()],
      ['actions', getArrayEncoder(getSettingsActionEncoder())],
      [
        'memo',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: EXECUTE_SETTINGS_TRANSACTION_SYNC_DISCRIMINATOR,
    })
  );
}

export function getExecuteSettingsTransactionSyncInstructionDataDecoder(): Decoder<ExecuteSettingsTransactionSyncInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['numSigners', getU8Decoder()],
    ['actions', getArrayDecoder(getSettingsActionDecoder())],
    [
      'memo',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getExecuteSettingsTransactionSyncInstructionDataCodec(): Codec<
  ExecuteSettingsTransactionSyncInstructionDataArgs,
  ExecuteSettingsTransactionSyncInstructionData
> {
  return combineCodec(
    getExecuteSettingsTransactionSyncInstructionDataEncoder(),
    getExecuteSettingsTransactionSyncInstructionDataDecoder()
  );
}

export type ExecuteSettingsTransactionSyncInput<
  TAccountSettings extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountProgram extends string = string,
> = {
  settings: Address<TAccountSettings>;
  /**
   * The account that will be charged/credited in case the settings transaction causes space reallocation,
   * for example when adding a new signer, adding or removing a spending limit.
   * This is usually the same as `signer`, but can be a different account if needed.
   */
  rentPayer?: TransactionSigner<TAccountRentPayer>;
  /** We might need it in case reallocation is needed. */
  systemProgram?: Address<TAccountSystemProgram>;
  program?: Address<TAccountProgram>;
  numSigners: ExecuteSettingsTransactionSyncInstructionDataArgs['numSigners'];
  actions: ExecuteSettingsTransactionSyncInstructionDataArgs['actions'];
  memo: ExecuteSettingsTransactionSyncInstructionDataArgs['memo'];
};

export function getExecuteSettingsTransactionSyncInstruction<
  TAccountSettings extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: ExecuteSettingsTransactionSyncInput<
    TAccountSettings,
    TAccountRentPayer,
    TAccountSystemProgram,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ExecuteSettingsTransactionSyncInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountRentPayer,
  TAccountSystemProgram,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.program.value) {
    accounts.program.value =
      'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q' as Address<'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.program),
    ],
    data: getExecuteSettingsTransactionSyncInstructionDataEncoder().encode(
      args as ExecuteSettingsTransactionSyncInstructionDataArgs
    ),
    programAddress,
  } as ExecuteSettingsTransactionSyncInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountRentPayer,
    TAccountSystemProgram,
    TAccountProgram
  >);
}

export type ParsedExecuteSettingsTransactionSyncInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    /**
     * The account that will be charged/credited in case the settings transaction causes space reallocation,
     * for example when adding a new signer, adding or removing a spending limit.
     * This is usually the same as `signer`, but can be a different account if needed.
     */
    rentPayer?: TAccountMetas[1] | undefined;
    /** We might need it in case reallocation is needed. */
    systemProgram?: TAccountMetas[2] | undefined;
    program: TAccountMetas[3];
  };
  data: ExecuteSettingsTransactionSyncInstructionData;
};

export function parseExecuteSettingsTransactionSyncInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedExecuteSettingsTransactionSyncInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      rentPayer: getNextOptionalAccount(),
      systemProgram: getNextOptionalAccount(),
      program: getNextAccount(),
    },
    data: getExecuteSettingsTransactionSyncInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
