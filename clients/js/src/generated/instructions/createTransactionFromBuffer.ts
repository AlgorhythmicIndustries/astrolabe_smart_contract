/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getCreateTransactionArgsDecoder,
  getCreateTransactionArgsEncoder,
  type CreateTransactionArgs,
  type CreateTransactionArgsArgs,
} from '../types';

export const CREATE_TRANSACTION_FROM_BUFFER_DISCRIMINATOR = new Uint8Array([
  53, 192, 39, 239, 124, 84, 43, 249,
]);

export function getCreateTransactionFromBufferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_TRANSACTION_FROM_BUFFER_DISCRIMINATOR
  );
}

export type CreateTransactionFromBufferInstruction<
  TProgram extends
    string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | IAccountMeta<string> = string,
  TAccountTransaction extends string | IAccountMeta<string> = string,
  TAccountTransactionCreator extends string | IAccountMeta<string> = string,
  TAccountRentPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountTransactionBuffer extends string | IAccountMeta<string> = string,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountTransaction extends string
        ? WritableAccount<TAccountTransaction>
        : TAccountTransaction,
      TAccountTransactionCreator extends string
        ? ReadonlySignerAccount<TAccountTransactionCreator> &
            IAccountSignerMeta<TAccountTransactionCreator>
        : TAccountTransactionCreator,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            IAccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountTransactionBuffer extends string
        ? WritableAccount<TAccountTransactionBuffer>
        : TAccountTransactionBuffer,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            IAccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      ...TRemainingAccounts,
    ]
  >;

export type CreateTransactionFromBufferInstructionData = {
  discriminator: ReadonlyUint8Array;
  args: CreateTransactionArgs;
};

export type CreateTransactionFromBufferInstructionDataArgs = {
  args: CreateTransactionArgsArgs;
};

export function getCreateTransactionFromBufferInstructionDataEncoder(): Encoder<CreateTransactionFromBufferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['args', getCreateTransactionArgsEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_TRANSACTION_FROM_BUFFER_DISCRIMINATOR,
    })
  );
}

export function getCreateTransactionFromBufferInstructionDataDecoder(): Decoder<CreateTransactionFromBufferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['args', getCreateTransactionArgsDecoder()],
  ]);
}

export function getCreateTransactionFromBufferInstructionDataCodec(): Codec<
  CreateTransactionFromBufferInstructionDataArgs,
  CreateTransactionFromBufferInstructionData
> {
  return combineCodec(
    getCreateTransactionFromBufferInstructionDataEncoder(),
    getCreateTransactionFromBufferInstructionDataDecoder()
  );
}

export type CreateTransactionFromBufferInput<
  TAccountSettings extends string = string,
  TAccountTransaction extends string = string,
  TAccountTransactionCreator extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountTransactionBuffer extends string = string,
  TAccountCreator extends string = string,
> = {
  settings: Address<TAccountSettings>;
  transaction: Address<TAccountTransaction>;
  /** The member of the multisig that is creating the transaction. */
  transactionCreator: TransactionSigner<TAccountTransactionCreator>;
  /** The payer for the transaction account rent. */
  rentPayer: TransactionSigner<TAccountRentPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  transactionBuffer: Address<TAccountTransactionBuffer>;
  /** The top-level creator. */
  creator: TransactionSigner<TAccountCreator>;
  args: CreateTransactionFromBufferInstructionDataArgs['args'];
};

export function getCreateTransactionFromBufferInstruction<
  TAccountSettings extends string,
  TAccountTransaction extends string,
  TAccountTransactionCreator extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TAccountTransactionBuffer extends string,
  TAccountCreator extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: CreateTransactionFromBufferInput<
    TAccountSettings,
    TAccountTransaction,
    TAccountTransactionCreator,
    TAccountRentPayer,
    TAccountSystemProgram,
    TAccountTransactionBuffer,
    TAccountCreator
  >,
  config?: { programAddress?: TProgramAddress }
): CreateTransactionFromBufferInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountTransaction,
  TAccountTransactionCreator,
  TAccountRentPayer,
  TAccountSystemProgram,
  TAccountTransactionBuffer,
  TAccountCreator
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    transaction: { value: input.transaction ?? null, isWritable: true },
    transactionCreator: { value: input.transactionCreator ?? null, isWritable: false },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    transactionBuffer: {
      value: input.transactionBuffer ?? null,
      isWritable: true,
    },
    creator: { value: input.creator ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.transaction),
      getAccountMeta(accounts.transactionCreator),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.transactionBuffer),
      getAccountMeta(accounts.creator),
    ],
    programAddress,
    data: getCreateTransactionFromBufferInstructionDataEncoder().encode(
      args as CreateTransactionFromBufferInstructionDataArgs
    ),
  } as CreateTransactionFromBufferInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountTransaction,
    TAccountTransactionCreator,
    TAccountRentPayer,
    TAccountSystemProgram,
    TAccountTransactionBuffer,
    TAccountCreator
  >;

  return instruction;
}

export type ParsedCreateTransactionFromBufferInstruction<
  TProgram extends
    string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    transaction: TAccountMetas[1];
    /** The member of the multisig that is creating the transaction. */
    transactionCreator: TAccountMetas[2];
    /** The payer for the transaction account rent. */
    rentPayer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    transactionBuffer: TAccountMetas[5];
    /** The top-level creator. */
    creator: TAccountMetas[6];
  };
  data: CreateTransactionFromBufferInstructionData;
};

export function parseCreateTransactionFromBufferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateTransactionFromBufferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      transaction: getNextAccount(),
      transactionCreator: getNextAccount(),
      rentPayer: getNextAccount(),
      systemProgram: getNextAccount(),
      transactionBuffer: getNextAccount(),
      creator: getNextAccount(),
    },
    data: getCreateTransactionFromBufferInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
