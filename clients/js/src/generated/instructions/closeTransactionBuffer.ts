/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_TRANSACTION_BUFFER_DISCRIMINATOR = new Uint8Array([
  224, 221, 123, 213, 0, 204, 5, 191,
]);

export function getCloseTransactionBufferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CLOSE_TRANSACTION_BUFFER_DISCRIMINATOR
  );
}

export type CloseTransactionBufferInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountTransactionBuffer extends string | AccountMeta<string> = string,
  TAccountCreator extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? ReadonlyAccount<TAccountSettings>
        : TAccountSettings,
      TAccountTransactionBuffer extends string
        ? WritableAccount<TAccountTransactionBuffer>
        : TAccountTransactionBuffer,
      TAccountCreator extends string
        ? ReadonlySignerAccount<TAccountCreator> &
            AccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      ...TRemainingAccounts,
    ]
  >;

export type CloseTransactionBufferInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type CloseTransactionBufferInstructionDataArgs = {};

export function getCloseTransactionBufferInstructionDataEncoder(): FixedSizeEncoder<CloseTransactionBufferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: CLOSE_TRANSACTION_BUFFER_DISCRIMINATOR,
    })
  );
}

export function getCloseTransactionBufferInstructionDataDecoder(): FixedSizeDecoder<CloseTransactionBufferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseTransactionBufferInstructionDataCodec(): FixedSizeCodec<
  CloseTransactionBufferInstructionDataArgs,
  CloseTransactionBufferInstructionData
> {
  return combineCodec(
    getCloseTransactionBufferInstructionDataEncoder(),
    getCloseTransactionBufferInstructionDataDecoder()
  );
}

export type CloseTransactionBufferInput<
  TAccountSettings extends string = string,
  TAccountTransactionBuffer extends string = string,
  TAccountCreator extends string = string,
> = {
  settings: Address<TAccountSettings>;
  transactionBuffer: Address<TAccountTransactionBuffer>;
  /** The signer on the smart account that created the TransactionBuffer. */
  creator: TransactionSigner<TAccountCreator>;
};

export function getCloseTransactionBufferInstruction<
  TAccountSettings extends string,
  TAccountTransactionBuffer extends string,
  TAccountCreator extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: CloseTransactionBufferInput<
    TAccountSettings,
    TAccountTransactionBuffer,
    TAccountCreator
  >,
  config?: { programAddress?: TProgramAddress }
): CloseTransactionBufferInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountTransactionBuffer,
  TAccountCreator
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: false },
    transactionBuffer: {
      value: input.transactionBuffer ?? null,
      isWritable: true,
    },
    creator: { value: input.creator ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.transactionBuffer),
      getAccountMeta(accounts.creator),
    ],
    data: getCloseTransactionBufferInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseTransactionBufferInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountTransactionBuffer,
    TAccountCreator
  >);
}

export type ParsedCloseTransactionBufferInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    transactionBuffer: TAccountMetas[1];
    /** The signer on the smart account that created the TransactionBuffer. */
    creator: TAccountMetas[2];
  };
  data: CloseTransactionBufferInstructionData;
};

export function parseCloseTransactionBufferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseTransactionBufferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      transactionBuffer: getNextAccount(),
      creator: getNextAccount(),
    },
    data: getCloseTransactionBufferInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
