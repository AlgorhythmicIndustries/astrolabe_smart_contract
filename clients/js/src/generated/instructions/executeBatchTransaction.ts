/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const EXECUTE_BATCH_TRANSACTION_DISCRIMINATOR = new Uint8Array([
  237, 67, 201, 173, 33, 130, 88, 134,
]);

export function getExecuteBatchTransactionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EXECUTE_BATCH_TRANSACTION_DISCRIMINATOR
  );
}

export type ExecuteBatchTransactionInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | IAccountMeta<string> = string,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountProposal extends string | IAccountMeta<string> = string,
  TAccountBatch extends string | IAccountMeta<string> = string,
  TAccountTransaction extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSettings extends string
        ? ReadonlyAccount<TAccountSettings>
        : TAccountSettings,
      TAccountSigner extends string
        ? ReadonlySignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountBatch extends string
        ? WritableAccount<TAccountBatch>
        : TAccountBatch,
      TAccountTransaction extends string
        ? ReadonlyAccount<TAccountTransaction>
        : TAccountTransaction,
      ...TRemainingAccounts,
    ]
  >;

export type ExecuteBatchTransactionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ExecuteBatchTransactionInstructionDataArgs = {};

export function getExecuteBatchTransactionInstructionDataEncoder(): Encoder<ExecuteBatchTransactionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: EXECUTE_BATCH_TRANSACTION_DISCRIMINATOR,
    })
  );
}

export function getExecuteBatchTransactionInstructionDataDecoder(): Decoder<ExecuteBatchTransactionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getExecuteBatchTransactionInstructionDataCodec(): Codec<
  ExecuteBatchTransactionInstructionDataArgs,
  ExecuteBatchTransactionInstructionData
> {
  return combineCodec(
    getExecuteBatchTransactionInstructionDataEncoder(),
    getExecuteBatchTransactionInstructionDataDecoder()
  );
}

export type ExecuteBatchTransactionInput<
  TAccountSettings extends string = string,
  TAccountSigner extends string = string,
  TAccountProposal extends string = string,
  TAccountBatch extends string = string,
  TAccountTransaction extends string = string,
> = {
  /** Settings account this batch belongs to. */
  settings: Address<TAccountSettings>;
  /** Signer of the settings. */
  signer: TransactionSigner<TAccountSigner>;
  /**
   * The proposal account associated with the batch.
   * If `transaction` is the last in the batch, the `proposal` status will be set to `Executed`.
   */
  proposal: Address<TAccountProposal>;
  batch: Address<TAccountBatch>;
  /** Batch transaction to execute. */
  transaction: Address<TAccountTransaction>;
};

export function getExecuteBatchTransactionInstruction<
  TAccountSettings extends string,
  TAccountSigner extends string,
  TAccountProposal extends string,
  TAccountBatch extends string,
  TAccountTransaction extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: ExecuteBatchTransactionInput<
    TAccountSettings,
    TAccountSigner,
    TAccountProposal,
    TAccountBatch,
    TAccountTransaction
  >,
  config?: { programAddress?: TProgramAddress }
): ExecuteBatchTransactionInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountSigner,
  TAccountProposal,
  TAccountBatch,
  TAccountTransaction
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: false },
    signer: { value: input.signer ?? null, isWritable: false },
    proposal: { value: input.proposal ?? null, isWritable: true },
    batch: { value: input.batch ?? null, isWritable: true },
    transaction: { value: input.transaction ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.batch),
      getAccountMeta(accounts.transaction),
    ],
    programAddress,
    data: getExecuteBatchTransactionInstructionDataEncoder().encode({}),
  } as ExecuteBatchTransactionInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountSigner,
    TAccountProposal,
    TAccountBatch,
    TAccountTransaction
  >;

  return instruction;
}

export type ParsedExecuteBatchTransactionInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Settings account this batch belongs to. */
    settings: TAccountMetas[0];
    /** Signer of the settings. */
    signer: TAccountMetas[1];
    /**
     * The proposal account associated with the batch.
     * If `transaction` is the last in the batch, the `proposal` status will be set to `Executed`.
     */

    proposal: TAccountMetas[2];
    batch: TAccountMetas[3];
    /** Batch transaction to execute. */
    transaction: TAccountMetas[4];
  };
  data: ExecuteBatchTransactionInstructionData;
};

export function parseExecuteBatchTransactionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedExecuteBatchTransactionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      signer: getNextAccount(),
      proposal: getNextAccount(),
      batch: getNextAccount(),
      transaction: getNextAccount(),
    },
    data: getExecuteBatchTransactionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
