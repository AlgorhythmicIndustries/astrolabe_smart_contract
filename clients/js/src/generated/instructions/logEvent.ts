/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const LOG_EVENT_DISCRIMINATOR = new Uint8Array([
  5, 9, 90, 141, 223, 134, 57, 217,
]);

export function getLogEventDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(LOG_EVENT_DISCRIMINATOR);
}

export type LogEventInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountLogAuthority extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountLogAuthority extends string
        ? ReadonlySignerAccount<TAccountLogAuthority> &
            IAccountSignerMeta<TAccountLogAuthority>
        : TAccountLogAuthority,
      ...TRemainingAccounts,
    ]
  >;

export type LogEventInstructionData = {
  discriminator: ReadonlyUint8Array;
  accountSeeds: Array<ReadonlyUint8Array>;
  bump: number;
  event: ReadonlyUint8Array;
};

export type LogEventInstructionDataArgs = {
  accountSeeds: Array<ReadonlyUint8Array>;
  bump: number;
  event: ReadonlyUint8Array;
};

export function getLogEventInstructionDataEncoder(): Encoder<LogEventInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'accountSeeds',
        getArrayEncoder(
          addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())
        ),
      ],
      ['bump', getU8Encoder()],
      ['event', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: LOG_EVENT_DISCRIMINATOR })
  );
}

export function getLogEventInstructionDataDecoder(): Decoder<LogEventInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'accountSeeds',
      getArrayDecoder(addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())),
    ],
    ['bump', getU8Decoder()],
    ['event', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getLogEventInstructionDataCodec(): Codec<
  LogEventInstructionDataArgs,
  LogEventInstructionData
> {
  return combineCodec(
    getLogEventInstructionDataEncoder(),
    getLogEventInstructionDataDecoder()
  );
}

export type LogEventInput<TAccountLogAuthority extends string = string> = {
  logAuthority: TransactionSigner<TAccountLogAuthority>;
  accountSeeds: LogEventInstructionDataArgs['accountSeeds'];
  bump: LogEventInstructionDataArgs['bump'];
  event: LogEventInstructionDataArgs['event'];
};

export function getLogEventInstruction<
  TAccountLogAuthority extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: LogEventInput<TAccountLogAuthority>,
  config?: { programAddress?: TProgramAddress }
): LogEventInstruction<TProgramAddress, TAccountLogAuthority> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    logAuthority: { value: input.logAuthority ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.logAuthority)],
    programAddress,
    data: getLogEventInstructionDataEncoder().encode(
      args as LogEventInstructionDataArgs
    ),
  } as LogEventInstruction<TProgramAddress, TAccountLogAuthority>;

  return instruction;
}

export type ParsedLogEventInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    logAuthority: TAccountMetas[0];
  };
  data: LogEventInstructionData;
};

export function parseLogEventInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedLogEventInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 1) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      logAuthority: getNextAccount(),
    },
    data: getLogEventInstructionDataDecoder().decode(instruction.data),
  };
}
