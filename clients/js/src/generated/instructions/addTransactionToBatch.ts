/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ADD_TRANSACTION_TO_BATCH_DISCRIMINATOR = new Uint8Array([
  147, 75, 197, 227, 20, 149, 150, 113,
]);

export function getAddTransactionToBatchDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ADD_TRANSACTION_TO_BATCH_DISCRIMINATOR
  );
}

export type AddTransactionToBatchInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountProposal extends string | AccountMeta<string> = string,
  TAccountBatch extends string | AccountMeta<string> = string,
  TAccountTransaction extends string | AccountMeta<string> = string,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountRentPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? ReadonlyAccount<TAccountSettings>
        : TAccountSettings,
      TAccountProposal extends string
        ? ReadonlyAccount<TAccountProposal>
        : TAccountProposal,
      TAccountBatch extends string
        ? WritableAccount<TAccountBatch>
        : TAccountBatch,
      TAccountTransaction extends string
        ? WritableAccount<TAccountTransaction>
        : TAccountTransaction,
      TAccountSigner extends string
        ? ReadonlySignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            AccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type AddTransactionToBatchInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** Number of ephemeral signing PDAs required by the transaction. */
  ephemeralSigners: number;
  transactionMessage: ReadonlyUint8Array;
};

export type AddTransactionToBatchInstructionDataArgs = {
  /** Number of ephemeral signing PDAs required by the transaction. */
  ephemeralSigners: number;
  transactionMessage: ReadonlyUint8Array;
};

export function getAddTransactionToBatchInstructionDataEncoder(): Encoder<AddTransactionToBatchInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['ephemeralSigners', getU8Encoder()],
      [
        'transactionMessage',
        addEncoderSizePrefix(getBytesEncoder(), getU32Encoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: ADD_TRANSACTION_TO_BATCH_DISCRIMINATOR,
    })
  );
}

export function getAddTransactionToBatchInstructionDataDecoder(): Decoder<AddTransactionToBatchInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['ephemeralSigners', getU8Decoder()],
    [
      'transactionMessage',
      addDecoderSizePrefix(getBytesDecoder(), getU32Decoder()),
    ],
  ]);
}

export function getAddTransactionToBatchInstructionDataCodec(): Codec<
  AddTransactionToBatchInstructionDataArgs,
  AddTransactionToBatchInstructionData
> {
  return combineCodec(
    getAddTransactionToBatchInstructionDataEncoder(),
    getAddTransactionToBatchInstructionDataDecoder()
  );
}

export type AddTransactionToBatchInput<
  TAccountSettings extends string = string,
  TAccountProposal extends string = string,
  TAccountBatch extends string = string,
  TAccountTransaction extends string = string,
  TAccountSigner extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** Settings account this batch belongs to. */
  settings: Address<TAccountSettings>;
  /** The proposal account associated with the batch. */
  proposal: Address<TAccountProposal>;
  batch: Address<TAccountBatch>;
  /** `BatchTransaction` account to initialize and add to the `batch`. */
  transaction: Address<TAccountTransaction>;
  /** Signer of the smart account. */
  signer: TransactionSigner<TAccountSigner>;
  /** The payer for the batch transaction account rent. */
  rentPayer: TransactionSigner<TAccountRentPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  ephemeralSigners: AddTransactionToBatchInstructionDataArgs['ephemeralSigners'];
  transactionMessage: AddTransactionToBatchInstructionDataArgs['transactionMessage'];
};

export function getAddTransactionToBatchInstruction<
  TAccountSettings extends string,
  TAccountProposal extends string,
  TAccountBatch extends string,
  TAccountTransaction extends string,
  TAccountSigner extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: AddTransactionToBatchInput<
    TAccountSettings,
    TAccountProposal,
    TAccountBatch,
    TAccountTransaction,
    TAccountSigner,
    TAccountRentPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): AddTransactionToBatchInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountProposal,
  TAccountBatch,
  TAccountTransaction,
  TAccountSigner,
  TAccountRentPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: false },
    proposal: { value: input.proposal ?? null, isWritable: false },
    batch: { value: input.batch ?? null, isWritable: true },
    transaction: { value: input.transaction ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: false },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.batch),
      getAccountMeta(accounts.transaction),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getAddTransactionToBatchInstructionDataEncoder().encode(
      args as AddTransactionToBatchInstructionDataArgs
    ),
    programAddress,
  } as AddTransactionToBatchInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountProposal,
    TAccountBatch,
    TAccountTransaction,
    TAccountSigner,
    TAccountRentPayer,
    TAccountSystemProgram
  >);
}

export type ParsedAddTransactionToBatchInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Settings account this batch belongs to. */
    settings: TAccountMetas[0];
    /** The proposal account associated with the batch. */
    proposal: TAccountMetas[1];
    batch: TAccountMetas[2];
    /** `BatchTransaction` account to initialize and add to the `batch`. */
    transaction: TAccountMetas[3];
    /** Signer of the smart account. */
    signer: TAccountMetas[4];
    /** The payer for the batch transaction account rent. */
    rentPayer: TAccountMetas[5];
    systemProgram: TAccountMetas[6];
  };
  data: AddTransactionToBatchInstructionData;
};

export function parseAddTransactionToBatchInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedAddTransactionToBatchInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 7) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      proposal: getNextAccount(),
      batch: getNextAccount(),
      transaction: getNextAccount(),
      signer: getNextAccount(),
      rentPayer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getAddTransactionToBatchInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
