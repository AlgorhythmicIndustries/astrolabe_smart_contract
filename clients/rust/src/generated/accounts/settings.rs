//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_pubkey::Pubkey;
use crate::generated::types::SmartAccountSigner;
use crate::generated::types::RestrictedSmartAccountSigner;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;


#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
pub struct Settings {
pub discriminator: [u8; 8],
/// An integer that is used seed the settings PDA. Its incremented by 1
/// inside the program conifg by 1 for each smart account created. This is
/// to ensure uniqueness of each settings PDA without relying on user input.
/// 
/// Note: As this represents a DOS vector in the current creation architecture,
/// account creation will be permissioned until compression is implemented.
pub seed: u128,
/// The authority that can change the smart account settings.
/// This is a very important parameter as this authority can change the signers and threshold.
/// 
/// The convention is to set this to `Pubkey::default()`.
/// In this case, the smart account becomes autonomous, so every settings change goes through
/// the normal process of voting by the signers.
/// 
/// However, if this parameter is set to any other key, all the setting changes for this smart account settings
/// will need to be signed by the `settings_authority`. We call such a smart account a "controlled smart account".
#[cfg_attr(feature = "serde", serde(with = "serde_with::As::<serde_with::DisplayFromStr>"))]
pub settings_authority: Pubkey,
/// Threshold for signatures.
pub threshold: u16,
/// How many seconds must pass between transaction voting settlement and execution.
pub time_lock: u32,
/// Last transaction index. 0 means no transactions have been created.
pub transaction_index: u64,
/// Last stale transaction index. All transactions up until this index are stale.
/// This index is updated when smart account settings (signers/threshold/time_lock) change.
pub stale_transaction_index: u64,
/// Field reserved for when archival/compression is implemented.
/// Will be set to Pubkey::default() to mark accounts that should
/// be eligible for archival before the feature is implemented.
pub archival_authority: Option<Pubkey>,
/// Field that will prevent a smart account from being archived immediately after unarchival.
/// This is to prevent a DOS vector where the archival authority could
/// constantly unarchive and archive the smart account to prevent it from
/// being used.
pub archivable_after: u64,
/// Bump for the smart account PDA seed.
pub bump: u8,
/// Signers attached to the smart account
pub signers: Vec<SmartAccountSigner>,
pub restricted_signers: Vec<RestrictedSmartAccountSigner>,
/// Counter for how many sub accounts are in use (improves off-chain indexing)
pub account_utilization: u8,
pub reserved1: u8,
pub reserved2: u8,
}


pub const SETTINGS_DISCRIMINATOR: [u8; 8] = [223, 179, 163, 190, 177, 224, 67, 173];

impl Settings {
  
  
  
  #[inline(always)]
  pub fn from_bytes(data: &[u8]) -> Result<Self, std::io::Error> {
    let mut data = data;
    Self::deserialize(&mut data)
  }
}

impl<'a> TryFrom<&solana_account_info::AccountInfo<'a>> for Settings {
  type Error = std::io::Error;

  fn try_from(account_info: &solana_account_info::AccountInfo<'a>) -> Result<Self, Self::Error> {
      let mut data: &[u8] = &(*account_info.data).borrow();
      Self::deserialize(&mut data)
  }
}

#[cfg(feature = "fetch")]
pub fn fetch_settings(
  rpc: &solana_client::rpc_client::RpcClient,
  address: &solana_pubkey::Pubkey,
) -> Result<crate::shared::DecodedAccount<Settings>, std::io::Error> {
  let accounts = fetch_all_settings(rpc, &[*address])?;
  Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_settings(
  rpc: &solana_client::rpc_client::RpcClient,
  addresses: &[solana_pubkey::Pubkey],
) -> Result<Vec<crate::shared::DecodedAccount<Settings>>, std::io::Error> {
    let accounts = rpc.get_multiple_accounts(addresses)
      .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::DecodedAccount<Settings>> = Vec::new();
    for i in 0..addresses.len() {
      let address = addresses[i];
      let account = accounts[i].as_ref()
        .ok_or(std::io::Error::new(std::io::ErrorKind::Other, format!("Account not found: {}", address)))?;
      let data = Settings::from_bytes(&account.data)?;
      decoded_accounts.push(crate::shared::DecodedAccount { address, account: account.clone(), data });
    }
    Ok(decoded_accounts)
}

#[cfg(feature = "fetch")]
pub fn fetch_maybe_settings(
  rpc: &solana_client::rpc_client::RpcClient,
  address: &solana_pubkey::Pubkey,
) -> Result<crate::shared::MaybeAccount<Settings>, std::io::Error> {
    let accounts = fetch_all_maybe_settings(rpc, &[*address])?;
    Ok(accounts[0].clone())
}

#[cfg(feature = "fetch")]
pub fn fetch_all_maybe_settings(
  rpc: &solana_client::rpc_client::RpcClient,
  addresses: &[solana_pubkey::Pubkey],
) -> Result<Vec<crate::shared::MaybeAccount<Settings>>, std::io::Error> {
    let accounts = rpc.get_multiple_accounts(addresses)
      .map_err(|e| std::io::Error::new(std::io::ErrorKind::Other, e.to_string()))?;
    let mut decoded_accounts: Vec<crate::shared::MaybeAccount<Settings>> = Vec::new();
    for i in 0..addresses.len() {
      let address = addresses[i];
      if let Some(account) = accounts[i].as_ref() {
        let data = Settings::from_bytes(&account.data)?;
        decoded_accounts.push(crate::shared::MaybeAccount::Exists(crate::shared::DecodedAccount { address, account: account.clone(), data }));
      } else {
        decoded_accounts.push(crate::shared::MaybeAccount::NotFound(address));
      }
    }
  Ok(decoded_accounts)
}

  #[cfg(feature = "anchor")]
  impl anchor_lang::AccountDeserialize for Settings {
      fn try_deserialize_unchecked(buf: &mut &[u8]) -> anchor_lang::Result<Self> {
        Ok(Self::deserialize(buf)?)
      }
  }

  #[cfg(feature = "anchor")]
  impl anchor_lang::AccountSerialize for Settings {}

  #[cfg(feature = "anchor")]
  impl anchor_lang::Owner for Settings {
      fn owner() -> Pubkey {
        crate::ASTROLABE_SMART_ACCOUNT_ID
      }
  }

  #[cfg(feature = "anchor-idl-build")]
  impl anchor_lang::IdlBuild for Settings {}

  
  #[cfg(feature = "anchor-idl-build")]
  impl anchor_lang::Discriminator for Settings {
    const DISCRIMINATOR: &[u8] = &[0; 8];
  }

