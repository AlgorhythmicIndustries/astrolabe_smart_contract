//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct UseSpendingLimit {
            /// The settings the `spending_limit` belongs to.

    
              
          pub settings: solana_pubkey::Pubkey,
          
              
          pub signer: solana_pubkey::Pubkey,
                /// The SpendingLimit account to use.

    
              
          pub spending_limit: solana_pubkey::Pubkey,
                /// Smart account to transfer tokens from.

    
              
          pub smart_account: solana_pubkey::Pubkey,
                /// Destination account to transfer tokens to.

    
              
          pub destination: solana_pubkey::Pubkey,
                /// In case `spending_limit.mint` is SOL.

    
              
          pub system_program: Option<solana_pubkey::Pubkey>,
                /// The mint of the tokens to transfer in case `spending_limit.mint` is an SPL token.

    
              
          pub mint: Option<solana_pubkey::Pubkey>,
                /// Smart account token account to transfer tokens from in case `spending_limit.mint` is an SPL token.

    
              
          pub smart_account_token_account: Option<solana_pubkey::Pubkey>,
                /// Destination token account in case `spending_limit.mint` is an SPL token.

    
              
          pub destination_token_account: Option<solana_pubkey::Pubkey>,
                /// In case `spending_limit.mint` is an SPL token.

    
              
          pub token_program: Option<solana_pubkey::Pubkey>,
          
              
          pub program: solana_pubkey::Pubkey,
      }

impl UseSpendingLimit {
  pub fn instruction(&self, args: UseSpendingLimitInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: UseSpendingLimitInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(11+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.settings,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.signer,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.spending_limit,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.smart_account,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.destination,
            false
          ));
                                                      if let Some(system_program) = self.system_program {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                system_program,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::ASTROLABE_SMART_ACCOUNT_ID,
                false,
              ));
            }
                                                                if let Some(mint) = self.mint {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                mint,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::ASTROLABE_SMART_ACCOUNT_ID,
                false,
              ));
            }
                                                                if let Some(smart_account_token_account) = self.smart_account_token_account {
              accounts.push(solana_instruction::AccountMeta::new(
                smart_account_token_account,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::ASTROLABE_SMART_ACCOUNT_ID,
                false,
              ));
            }
                                                                if let Some(destination_token_account) = self.destination_token_account {
              accounts.push(solana_instruction::AccountMeta::new(
                destination_token_account,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::ASTROLABE_SMART_ACCOUNT_ID,
                false,
              ));
            }
                                                                if let Some(token_program) = self.token_program {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                token_program,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::ASTROLABE_SMART_ACCOUNT_ID,
                false,
              ));
            }
                                                    accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&UseSpendingLimitInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct UseSpendingLimitInstructionData {
            discriminator: [u8; 8],
                        }

impl UseSpendingLimitInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [41, 179, 70, 5, 194, 147, 239, 158],
                                                            }
  }
}

impl Default for UseSpendingLimitInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct UseSpendingLimitInstructionArgs {
                  pub amount: u64,
                pub decimals: u8,
                pub memo: Option<String>,
      }


/// Instruction builder for `UseSpendingLimit`.
///
/// ### Accounts:
///
          ///   0. `[]` settings
                ///   1. `[signer]` signer
                ///   2. `[writable]` spending_limit
                ///   3. `[writable]` smart_account
                ///   4. `[writable]` destination
                ///   5. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   6. `[optional]` mint
                      ///   7. `[writable, optional]` smart_account_token_account
                      ///   8. `[writable, optional]` destination_token_account
                ///   9. `[optional]` token_program
                ///   10. `[optional]` program (default to `GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD`)
#[derive(Clone, Debug, Default)]
pub struct UseSpendingLimitBuilder {
            settings: Option<solana_pubkey::Pubkey>,
                signer: Option<solana_pubkey::Pubkey>,
                spending_limit: Option<solana_pubkey::Pubkey>,
                smart_account: Option<solana_pubkey::Pubkey>,
                destination: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                mint: Option<solana_pubkey::Pubkey>,
                smart_account_token_account: Option<solana_pubkey::Pubkey>,
                destination_token_account: Option<solana_pubkey::Pubkey>,
                token_program: Option<solana_pubkey::Pubkey>,
                program: Option<solana_pubkey::Pubkey>,
                        amount: Option<u64>,
                decimals: Option<u8>,
                memo: Option<String>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl UseSpendingLimitBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            /// The settings the `spending_limit` belongs to.
#[inline(always)]
    pub fn settings(&mut self, settings: solana_pubkey::Pubkey) -> &mut Self {
                        self.settings = Some(settings);
                    self
    }
            #[inline(always)]
    pub fn signer(&mut self, signer: solana_pubkey::Pubkey) -> &mut Self {
                        self.signer = Some(signer);
                    self
    }
            /// The SpendingLimit account to use.
#[inline(always)]
    pub fn spending_limit(&mut self, spending_limit: solana_pubkey::Pubkey) -> &mut Self {
                        self.spending_limit = Some(spending_limit);
                    self
    }
            /// Smart account to transfer tokens from.
#[inline(always)]
    pub fn smart_account(&mut self, smart_account: solana_pubkey::Pubkey) -> &mut Self {
                        self.smart_account = Some(smart_account);
                    self
    }
            /// Destination account to transfer tokens to.
#[inline(always)]
    pub fn destination(&mut self, destination: solana_pubkey::Pubkey) -> &mut Self {
                        self.destination = Some(destination);
                    self
    }
            /// `[optional account]`
/// In case `spending_limit.mint` is SOL.
#[inline(always)]
    pub fn system_program(&mut self, system_program: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.system_program = system_program;
                    self
    }
            /// `[optional account]`
/// The mint of the tokens to transfer in case `spending_limit.mint` is an SPL token.
#[inline(always)]
    pub fn mint(&mut self, mint: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.mint = mint;
                    self
    }
            /// `[optional account]`
/// Smart account token account to transfer tokens from in case `spending_limit.mint` is an SPL token.
#[inline(always)]
    pub fn smart_account_token_account(&mut self, smart_account_token_account: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.smart_account_token_account = smart_account_token_account;
                    self
    }
            /// `[optional account]`
/// Destination token account in case `spending_limit.mint` is an SPL token.
#[inline(always)]
    pub fn destination_token_account(&mut self, destination_token_account: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.destination_token_account = destination_token_account;
                    self
    }
            /// `[optional account]`
/// In case `spending_limit.mint` is an SPL token.
#[inline(always)]
    pub fn token_program(&mut self, token_program: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.token_program = token_program;
                    self
    }
            /// `[optional account, default to 'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD']`
#[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.amount = Some(amount);
        self
      }
                #[inline(always)]
      pub fn decimals(&mut self, decimals: u8) -> &mut Self {
        self.decimals = Some(decimals);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn memo(&mut self, memo: String) -> &mut Self {
        self.memo = Some(memo);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = UseSpendingLimit {
                              settings: self.settings.expect("settings is not set"),
                                        signer: self.signer.expect("signer is not set"),
                                        spending_limit: self.spending_limit.expect("spending_limit is not set"),
                                        smart_account: self.smart_account.expect("smart_account is not set"),
                                        destination: self.destination.expect("destination is not set"),
                                        system_program: self.system_program,
                                        mint: self.mint,
                                        smart_account_token_account: self.smart_account_token_account,
                                        destination_token_account: self.destination_token_account,
                                        token_program: self.token_program,
                                        program: self.program.unwrap_or(solana_pubkey::pubkey!("GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD")),
                      };
          let args = UseSpendingLimitInstructionArgs {
                                                              amount: self.amount.clone().expect("amount is not set"),
                                                                  decimals: self.decimals.clone().expect("decimals is not set"),
                                                                  memo: self.memo.clone(),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `use_spending_limit` CPI accounts.
  pub struct UseSpendingLimitCpiAccounts<'a, 'b> {
                  /// The settings the `spending_limit` belongs to.

      
                    
              pub settings: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub signer: &'b solana_account_info::AccountInfo<'a>,
                        /// The SpendingLimit account to use.

      
                    
              pub spending_limit: &'b solana_account_info::AccountInfo<'a>,
                        /// Smart account to transfer tokens from.

      
                    
              pub smart_account: &'b solana_account_info::AccountInfo<'a>,
                        /// Destination account to transfer tokens to.

      
                    
              pub destination: &'b solana_account_info::AccountInfo<'a>,
                        /// In case `spending_limit.mint` is SOL.

      
                    
              pub system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        /// The mint of the tokens to transfer in case `spending_limit.mint` is an SPL token.

      
                    
              pub mint: Option<&'b solana_account_info::AccountInfo<'a>>,
                        /// Smart account token account to transfer tokens from in case `spending_limit.mint` is an SPL token.

      
                    
              pub smart_account_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                        /// Destination token account in case `spending_limit.mint` is an SPL token.

      
                    
              pub destination_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                        /// In case `spending_limit.mint` is an SPL token.

      
                    
              pub token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                
                    
              pub program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `use_spending_limit` CPI instruction.
pub struct UseSpendingLimitCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
            /// The settings the `spending_limit` belongs to.

    
              
          pub settings: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub signer: &'b solana_account_info::AccountInfo<'a>,
                /// The SpendingLimit account to use.

    
              
          pub spending_limit: &'b solana_account_info::AccountInfo<'a>,
                /// Smart account to transfer tokens from.

    
              
          pub smart_account: &'b solana_account_info::AccountInfo<'a>,
                /// Destination account to transfer tokens to.

    
              
          pub destination: &'b solana_account_info::AccountInfo<'a>,
                /// In case `spending_limit.mint` is SOL.

    
              
          pub system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                /// The mint of the tokens to transfer in case `spending_limit.mint` is an SPL token.

    
              
          pub mint: Option<&'b solana_account_info::AccountInfo<'a>>,
                /// Smart account token account to transfer tokens from in case `spending_limit.mint` is an SPL token.

    
              
          pub smart_account_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                /// Destination token account in case `spending_limit.mint` is an SPL token.

    
              
          pub destination_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                /// In case `spending_limit.mint` is an SPL token.

    
              
          pub token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
          
              
          pub program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: UseSpendingLimitInstructionArgs,
  }

impl<'a, 'b> UseSpendingLimitCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: UseSpendingLimitCpiAccounts<'a, 'b>,
              args: UseSpendingLimitInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              settings: accounts.settings,
              signer: accounts.signer,
              spending_limit: accounts.spending_limit,
              smart_account: accounts.smart_account,
              destination: accounts.destination,
              system_program: accounts.system_program,
              mint: accounts.mint,
              smart_account_token_account: accounts.smart_account_token_account,
              destination_token_account: accounts.destination_token_account,
              token_program: accounts.token_program,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(11+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.settings.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.signer.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.spending_limit.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.smart_account.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.destination.key,
            false
          ));
                                          if let Some(system_program) = self.system_program {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              *system_program.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::ASTROLABE_SMART_ACCOUNT_ID,
              false,
            ));
          }
                                          if let Some(mint) = self.mint {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              *mint.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::ASTROLABE_SMART_ACCOUNT_ID,
              false,
            ));
          }
                                          if let Some(smart_account_token_account) = self.smart_account_token_account {
            accounts.push(solana_instruction::AccountMeta::new(
              *smart_account_token_account.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::ASTROLABE_SMART_ACCOUNT_ID,
              false,
            ));
          }
                                          if let Some(destination_token_account) = self.destination_token_account {
            accounts.push(solana_instruction::AccountMeta::new(
              *destination_token_account.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::ASTROLABE_SMART_ACCOUNT_ID,
              false,
            ));
          }
                                          if let Some(token_program) = self.token_program {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              *token_program.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::ASTROLABE_SMART_ACCOUNT_ID,
              false,
            ));
          }
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&UseSpendingLimitInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(12 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.settings.clone());
                        account_infos.push(self.signer.clone());
                        account_infos.push(self.spending_limit.clone());
                        account_infos.push(self.smart_account.clone());
                        account_infos.push(self.destination.clone());
                        if let Some(system_program) = self.system_program {
          account_infos.push(system_program.clone());
        }
                        if let Some(mint) = self.mint {
          account_infos.push(mint.clone());
        }
                        if let Some(smart_account_token_account) = self.smart_account_token_account {
          account_infos.push(smart_account_token_account.clone());
        }
                        if let Some(destination_token_account) = self.destination_token_account {
          account_infos.push(destination_token_account.clone());
        }
                        if let Some(token_program) = self.token_program {
          account_infos.push(token_program.clone());
        }
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `UseSpendingLimit` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` settings
                ///   1. `[signer]` signer
                ///   2. `[writable]` spending_limit
                ///   3. `[writable]` smart_account
                ///   4. `[writable]` destination
                ///   5. `[optional]` system_program
                ///   6. `[optional]` mint
                      ///   7. `[writable, optional]` smart_account_token_account
                      ///   8. `[writable, optional]` destination_token_account
                ///   9. `[optional]` token_program
          ///   10. `[]` program
#[derive(Clone, Debug)]
pub struct UseSpendingLimitCpiBuilder<'a, 'b> {
  instruction: Box<UseSpendingLimitCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> UseSpendingLimitCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(UseSpendingLimitCpiBuilderInstruction {
      __program: program,
              settings: None,
              signer: None,
              spending_limit: None,
              smart_account: None,
              destination: None,
              system_program: None,
              mint: None,
              smart_account_token_account: None,
              destination_token_account: None,
              token_program: None,
              program: None,
                                            amount: None,
                                decimals: None,
                                memo: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      /// The settings the `spending_limit` belongs to.
#[inline(always)]
    pub fn settings(&mut self, settings: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.settings = Some(settings);
                    self
    }
      #[inline(always)]
    pub fn signer(&mut self, signer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.signer = Some(signer);
                    self
    }
      /// The SpendingLimit account to use.
#[inline(always)]
    pub fn spending_limit(&mut self, spending_limit: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.spending_limit = Some(spending_limit);
                    self
    }
      /// Smart account to transfer tokens from.
#[inline(always)]
    pub fn smart_account(&mut self, smart_account: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.smart_account = Some(smart_account);
                    self
    }
      /// Destination account to transfer tokens to.
#[inline(always)]
    pub fn destination(&mut self, destination: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.destination = Some(destination);
                    self
    }
      /// `[optional account]`
/// In case `spending_limit.mint` is SOL.
#[inline(always)]
    pub fn system_program(&mut self, system_program: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.system_program = system_program;
                    self
    }
      /// `[optional account]`
/// The mint of the tokens to transfer in case `spending_limit.mint` is an SPL token.
#[inline(always)]
    pub fn mint(&mut self, mint: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.mint = mint;
                    self
    }
      /// `[optional account]`
/// Smart account token account to transfer tokens from in case `spending_limit.mint` is an SPL token.
#[inline(always)]
    pub fn smart_account_token_account(&mut self, smart_account_token_account: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.smart_account_token_account = smart_account_token_account;
                    self
    }
      /// `[optional account]`
/// Destination token account in case `spending_limit.mint` is an SPL token.
#[inline(always)]
    pub fn destination_token_account(&mut self, destination_token_account: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.destination_token_account = destination_token_account;
                    self
    }
      /// `[optional account]`
/// In case `spending_limit.mint` is an SPL token.
#[inline(always)]
    pub fn token_program(&mut self, token_program: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.token_program = token_program;
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn amount(&mut self, amount: u64) -> &mut Self {
        self.instruction.amount = Some(amount);
        self
      }
                #[inline(always)]
      pub fn decimals(&mut self, decimals: u8) -> &mut Self {
        self.instruction.decimals = Some(decimals);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn memo(&mut self, memo: String) -> &mut Self {
        self.instruction.memo = Some(memo);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = UseSpendingLimitInstructionArgs {
                                                              amount: self.instruction.amount.clone().expect("amount is not set"),
                                                                  decimals: self.instruction.decimals.clone().expect("decimals is not set"),
                                                                  memo: self.instruction.memo.clone(),
                                    };
        let instruction = UseSpendingLimitCpi {
        __program: self.instruction.__program,
                  
          settings: self.instruction.settings.expect("settings is not set"),
                  
          signer: self.instruction.signer.expect("signer is not set"),
                  
          spending_limit: self.instruction.spending_limit.expect("spending_limit is not set"),
                  
          smart_account: self.instruction.smart_account.expect("smart_account is not set"),
                  
          destination: self.instruction.destination.expect("destination is not set"),
                  
          system_program: self.instruction.system_program,
                  
          mint: self.instruction.mint,
                  
          smart_account_token_account: self.instruction.smart_account_token_account,
                  
          destination_token_account: self.instruction.destination_token_account,
                  
          token_program: self.instruction.token_program,
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct UseSpendingLimitCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            settings: Option<&'b solana_account_info::AccountInfo<'a>>,
                signer: Option<&'b solana_account_info::AccountInfo<'a>>,
                spending_limit: Option<&'b solana_account_info::AccountInfo<'a>>,
                smart_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                destination: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                mint: Option<&'b solana_account_info::AccountInfo<'a>>,
                smart_account_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                destination_token_account: Option<&'b solana_account_info::AccountInfo<'a>>,
                token_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        amount: Option<u64>,
                decimals: Option<u8>,
                memo: Option<String>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

