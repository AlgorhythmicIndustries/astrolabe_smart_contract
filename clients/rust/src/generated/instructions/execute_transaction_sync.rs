//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const EXECUTE_TRANSACTION_SYNC_DISCRIMINATOR: [u8; 8] = [43, 102, 248, 89, 231, 97, 104, 134];

/// Accounts.
#[derive(Debug)]
pub struct ExecuteTransactionSync {
      
              
          pub settings: solana_pubkey::Pubkey,
          
              
          pub program: solana_pubkey::Pubkey,
      }

impl ExecuteTransactionSync {
  pub fn instruction(&self, args: ExecuteTransactionSyncInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: ExecuteTransactionSyncInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(2+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.settings,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&ExecuteTransactionSyncInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ExecuteTransactionSyncInstructionData {
            discriminator: [u8; 8],
                        }

impl ExecuteTransactionSyncInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [43, 102, 248, 89, 231, 97, 104, 134],
                                                            }
  }
}

impl Default for ExecuteTransactionSyncInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct ExecuteTransactionSyncInstructionArgs {
                  pub account_index: u8,
                pub num_signers: u8,
                pub instructions: Vec<u8>,
      }


/// Instruction builder for `ExecuteTransactionSync`.
///
/// ### Accounts:
///
          ///   0. `[]` settings
                ///   1. `[optional]` program (default to `ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q`)
#[derive(Clone, Debug, Default)]
pub struct ExecuteTransactionSyncBuilder {
            settings: Option<solana_pubkey::Pubkey>,
                program: Option<solana_pubkey::Pubkey>,
                        account_index: Option<u8>,
                num_signers: Option<u8>,
                instructions: Option<Vec<u8>>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl ExecuteTransactionSyncBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn settings(&mut self, settings: solana_pubkey::Pubkey) -> &mut Self {
                        self.settings = Some(settings);
                    self
    }
            /// `[optional account, default to 'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q']`
#[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn account_index(&mut self, account_index: u8) -> &mut Self {
        self.account_index = Some(account_index);
        self
      }
                #[inline(always)]
      pub fn num_signers(&mut self, num_signers: u8) -> &mut Self {
        self.num_signers = Some(num_signers);
        self
      }
                #[inline(always)]
      pub fn instructions(&mut self, instructions: Vec<u8>) -> &mut Self {
        self.instructions = Some(instructions);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = ExecuteTransactionSync {
                              settings: self.settings.expect("settings is not set"),
                                        program: self.program.unwrap_or(solana_pubkey::pubkey!("ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q")),
                      };
          let args = ExecuteTransactionSyncInstructionArgs {
                                                              account_index: self.account_index.clone().expect("account_index is not set"),
                                                                  num_signers: self.num_signers.clone().expect("num_signers is not set"),
                                                                  instructions: self.instructions.clone().expect("instructions is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `execute_transaction_sync` CPI accounts.
  pub struct ExecuteTransactionSyncCpiAccounts<'a, 'b> {
          
                    
              pub settings: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `execute_transaction_sync` CPI instruction.
pub struct ExecuteTransactionSyncCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub settings: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: ExecuteTransactionSyncInstructionArgs,
  }

impl<'a, 'b> ExecuteTransactionSyncCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: ExecuteTransactionSyncCpiAccounts<'a, 'b>,
              args: ExecuteTransactionSyncInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              settings: accounts.settings,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(2+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.settings.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&ExecuteTransactionSyncInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(3 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.settings.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `ExecuteTransactionSync` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` settings
          ///   1. `[]` program
#[derive(Clone, Debug)]
pub struct ExecuteTransactionSyncCpiBuilder<'a, 'b> {
  instruction: Box<ExecuteTransactionSyncCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> ExecuteTransactionSyncCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(ExecuteTransactionSyncCpiBuilderInstruction {
      __program: program,
              settings: None,
              program: None,
                                            account_index: None,
                                num_signers: None,
                                instructions: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn settings(&mut self, settings: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.settings = Some(settings);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn account_index(&mut self, account_index: u8) -> &mut Self {
        self.instruction.account_index = Some(account_index);
        self
      }
                #[inline(always)]
      pub fn num_signers(&mut self, num_signers: u8) -> &mut Self {
        self.instruction.num_signers = Some(num_signers);
        self
      }
                #[inline(always)]
      pub fn instructions(&mut self, instructions: Vec<u8>) -> &mut Self {
        self.instruction.instructions = Some(instructions);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = ExecuteTransactionSyncInstructionArgs {
                                                              account_index: self.instruction.account_index.clone().expect("account_index is not set"),
                                                                  num_signers: self.instruction.num_signers.clone().expect("num_signers is not set"),
                                                                  instructions: self.instruction.instructions.clone().expect("instructions is not set"),
                                    };
        let instruction = ExecuteTransactionSyncCpi {
        __program: self.instruction.__program,
                  
          settings: self.instruction.settings.expect("settings is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct ExecuteTransactionSyncCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            settings: Option<&'b solana_account_info::AccountInfo<'a>>,
                program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        account_index: Option<u8>,
                num_signers: Option<u8>,
                instructions: Option<Vec<u8>>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

