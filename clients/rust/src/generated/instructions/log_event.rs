//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const LOG_EVENT_DISCRIMINATOR: [u8; 8] = [5, 9, 90, 141, 223, 134, 57, 217];

/// Accounts.
#[derive(Debug)]
pub struct LogEvent {
      
              
          pub log_authority: solana_pubkey::Pubkey,
      }

impl LogEvent {
  pub fn instruction(&self, args: LogEventInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: LogEventInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(1+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.log_authority,
            true
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&LogEventInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct LogEventInstructionData {
            discriminator: [u8; 8],
                        }

impl LogEventInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [5, 9, 90, 141, 223, 134, 57, 217],
                                                            }
  }
}

impl Default for LogEventInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct LogEventInstructionArgs {
                  pub account_seeds: Vec<Vec<u8>>,
                pub bump: u8,
                pub event: Vec<u8>,
      }


/// Instruction builder for `LogEvent`.
///
/// ### Accounts:
///
                ///   0. `[signer]` log_authority
#[derive(Clone, Debug, Default)]
pub struct LogEventBuilder {
            log_authority: Option<solana_pubkey::Pubkey>,
                        account_seeds: Option<Vec<Vec<u8>>>,
                bump: Option<u8>,
                event: Option<Vec<u8>>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl LogEventBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn log_authority(&mut self, log_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.log_authority = Some(log_authority);
                    self
    }
                    #[inline(always)]
      pub fn account_seeds(&mut self, account_seeds: Vec<Vec<u8>>) -> &mut Self {
        self.account_seeds = Some(account_seeds);
        self
      }
                #[inline(always)]
      pub fn bump(&mut self, bump: u8) -> &mut Self {
        self.bump = Some(bump);
        self
      }
                #[inline(always)]
      pub fn event(&mut self, event: Vec<u8>) -> &mut Self {
        self.event = Some(event);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = LogEvent {
                              log_authority: self.log_authority.expect("log_authority is not set"),
                      };
          let args = LogEventInstructionArgs {
                                                              account_seeds: self.account_seeds.clone().expect("account_seeds is not set"),
                                                                  bump: self.bump.clone().expect("bump is not set"),
                                                                  event: self.event.clone().expect("event is not set"),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `log_event` CPI accounts.
  pub struct LogEventCpiAccounts<'a, 'b> {
          
                    
              pub log_authority: &'b solana_account_info::AccountInfo<'a>,
            }

/// `log_event` CPI instruction.
pub struct LogEventCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub log_authority: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: LogEventInstructionArgs,
  }

impl<'a, 'b> LogEventCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: LogEventCpiAccounts<'a, 'b>,
              args: LogEventInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              log_authority: accounts.log_authority,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(1+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.log_authority.key,
            true
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&LogEventInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(2 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.log_authority.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `LogEvent` via CPI.
///
/// ### Accounts:
///
                ///   0. `[signer]` log_authority
#[derive(Clone, Debug)]
pub struct LogEventCpiBuilder<'a, 'b> {
  instruction: Box<LogEventCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> LogEventCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(LogEventCpiBuilderInstruction {
      __program: program,
              log_authority: None,
                                            account_seeds: None,
                                bump: None,
                                event: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn log_authority(&mut self, log_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.log_authority = Some(log_authority);
                    self
    }
                    #[inline(always)]
      pub fn account_seeds(&mut self, account_seeds: Vec<Vec<u8>>) -> &mut Self {
        self.instruction.account_seeds = Some(account_seeds);
        self
      }
                #[inline(always)]
      pub fn bump(&mut self, bump: u8) -> &mut Self {
        self.instruction.bump = Some(bump);
        self
      }
                #[inline(always)]
      pub fn event(&mut self, event: Vec<u8>) -> &mut Self {
        self.instruction.event = Some(event);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = LogEventInstructionArgs {
                                                              account_seeds: self.instruction.account_seeds.clone().expect("account_seeds is not set"),
                                                                  bump: self.instruction.bump.clone().expect("bump is not set"),
                                                                  event: self.instruction.event.clone().expect("event is not set"),
                                    };
        let instruction = LogEventCpi {
        __program: self.instruction.__program,
                  
          log_authority: self.instruction.log_authority.expect("log_authority is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct LogEventCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            log_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                        account_seeds: Option<Vec<Vec<u8>>>,
                bump: Option<u8>,
                event: Option<Vec<u8>>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

