//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const CREATE_BATCH_DISCRIMINATOR: [u8; 8] = [159, 198, 248, 43, 248, 31, 235, 86];

/// Accounts.
#[derive(Debug)]
pub struct CreateBatch {
      
              
          pub settings: solana_pubkey::Pubkey,
          
              
          pub batch: solana_pubkey::Pubkey,
                /// The signer of the settings that is creating the batch.

    
              
          pub creator: solana_pubkey::Pubkey,
                /// The payer for the batch account rent.

    
              
          pub rent_payer: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
      }

impl CreateBatch {
  pub fn instruction(&self, args: CreateBatchInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: CreateBatchInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.settings,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.batch,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.creator,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.rent_payer,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&CreateBatchInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CreateBatchInstructionData {
            discriminator: [u8; 8],
                  }

impl CreateBatchInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [159, 198, 248, 43, 248, 31, 235, 86],
                                              }
  }
}

impl Default for CreateBatchInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CreateBatchInstructionArgs {
                  pub account_index: u8,
                pub memo: Option<String>,
      }


/// Instruction builder for `CreateBatch`.
///
/// ### Accounts:
///
                ///   0. `[writable]` settings
                ///   1. `[writable]` batch
                ///   2. `[signer]` creator
                      ///   3. `[writable, signer]` rent_payer
                ///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CreateBatchBuilder {
            settings: Option<solana_pubkey::Pubkey>,
                batch: Option<solana_pubkey::Pubkey>,
                creator: Option<solana_pubkey::Pubkey>,
                rent_payer: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                        account_index: Option<u8>,
                memo: Option<String>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CreateBatchBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn settings(&mut self, settings: solana_pubkey::Pubkey) -> &mut Self {
                        self.settings = Some(settings);
                    self
    }
            #[inline(always)]
    pub fn batch(&mut self, batch: solana_pubkey::Pubkey) -> &mut Self {
                        self.batch = Some(batch);
                    self
    }
            /// The signer of the settings that is creating the batch.
#[inline(always)]
    pub fn creator(&mut self, creator: solana_pubkey::Pubkey) -> &mut Self {
                        self.creator = Some(creator);
                    self
    }
            /// The payer for the batch account rent.
#[inline(always)]
    pub fn rent_payer(&mut self, rent_payer: solana_pubkey::Pubkey) -> &mut Self {
                        self.rent_payer = Some(rent_payer);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn account_index(&mut self, account_index: u8) -> &mut Self {
        self.account_index = Some(account_index);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn memo(&mut self, memo: String) -> &mut Self {
        self.memo = Some(memo);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = CreateBatch {
                              settings: self.settings.expect("settings is not set"),
                                        batch: self.batch.expect("batch is not set"),
                                        creator: self.creator.expect("creator is not set"),
                                        rent_payer: self.rent_payer.expect("rent_payer is not set"),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                      };
          let args = CreateBatchInstructionArgs {
                                                              account_index: self.account_index.clone().expect("account_index is not set"),
                                                                  memo: self.memo.clone(),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `create_batch` CPI accounts.
  pub struct CreateBatchCpiAccounts<'a, 'b> {
          
                    
              pub settings: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub batch: &'b solana_account_info::AccountInfo<'a>,
                        /// The signer of the settings that is creating the batch.

      
                    
              pub creator: &'b solana_account_info::AccountInfo<'a>,
                        /// The payer for the batch account rent.

      
                    
              pub rent_payer: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `create_batch` CPI instruction.
pub struct CreateBatchCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub settings: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub batch: &'b solana_account_info::AccountInfo<'a>,
                /// The signer of the settings that is creating the batch.

    
              
          pub creator: &'b solana_account_info::AccountInfo<'a>,
                /// The payer for the batch account rent.

    
              
          pub rent_payer: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: CreateBatchInstructionArgs,
  }

impl<'a, 'b> CreateBatchCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: CreateBatchCpiAccounts<'a, 'b>,
              args: CreateBatchInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              settings: accounts.settings,
              batch: accounts.batch,
              creator: accounts.creator,
              rent_payer: accounts.rent_payer,
              system_program: accounts.system_program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.settings.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.batch.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.creator.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.rent_payer.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&CreateBatchInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.settings.clone());
                        account_infos.push(self.batch.clone());
                        account_infos.push(self.creator.clone());
                        account_infos.push(self.rent_payer.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `CreateBatch` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` settings
                ///   1. `[writable]` batch
                ///   2. `[signer]` creator
                      ///   3. `[writable, signer]` rent_payer
          ///   4. `[]` system_program
#[derive(Clone, Debug)]
pub struct CreateBatchCpiBuilder<'a, 'b> {
  instruction: Box<CreateBatchCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateBatchCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(CreateBatchCpiBuilderInstruction {
      __program: program,
              settings: None,
              batch: None,
              creator: None,
              rent_payer: None,
              system_program: None,
                                            account_index: None,
                                memo: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn settings(&mut self, settings: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.settings = Some(settings);
                    self
    }
      #[inline(always)]
    pub fn batch(&mut self, batch: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.batch = Some(batch);
                    self
    }
      /// The signer of the settings that is creating the batch.
#[inline(always)]
    pub fn creator(&mut self, creator: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.creator = Some(creator);
                    self
    }
      /// The payer for the batch account rent.
#[inline(always)]
    pub fn rent_payer(&mut self, rent_payer: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent_payer = Some(rent_payer);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
                    #[inline(always)]
      pub fn account_index(&mut self, account_index: u8) -> &mut Self {
        self.instruction.account_index = Some(account_index);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn memo(&mut self, memo: String) -> &mut Self {
        self.instruction.memo = Some(memo);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = CreateBatchInstructionArgs {
                                                              account_index: self.instruction.account_index.clone().expect("account_index is not set"),
                                                                  memo: self.instruction.memo.clone(),
                                    };
        let instruction = CreateBatchCpi {
        __program: self.instruction.__program,
                  
          settings: self.instruction.settings.expect("settings is not set"),
                  
          batch: self.instruction.batch.expect("batch is not set"),
                  
          creator: self.instruction.creator.expect("creator is not set"),
                  
          rent_payer: self.instruction.rent_payer.expect("rent_payer is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct CreateBatchCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            settings: Option<&'b solana_account_info::AccountInfo<'a>>,
                batch: Option<&'b solana_account_info::AccountInfo<'a>>,
                creator: Option<&'b solana_account_info::AccountInfo<'a>>,
                rent_payer: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        account_index: Option<u8>,
                memo: Option<String>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

