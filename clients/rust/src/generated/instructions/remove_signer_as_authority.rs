//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_pubkey::Pubkey;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

/// Accounts.
#[derive(Debug)]
pub struct RemoveSignerAsAuthority {
      
              
          pub settings: solana_pubkey::Pubkey,
                /// Settings `settings_authority` that must authorize the configuration change.

    
              
          pub settings_authority: solana_pubkey::Pubkey,
                /// The account that will be charged or credited in case the settings account needs to reallocate space,
/// for example when adding a new signer or a spending limit.
/// This is usually the same as `settings_authority`, but can be a different account if needed.

    
              
          pub rent_payer: Option<solana_pubkey::Pubkey>,
                /// We might need it in case reallocation is needed.

    
              
          pub system_program: Option<solana_pubkey::Pubkey>,
          
              
          pub program: solana_pubkey::Pubkey,
      }

impl RemoveSignerAsAuthority {
  pub fn instruction(&self, args: RemoveSignerAsAuthorityInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: RemoveSignerAsAuthorityInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.settings,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.settings_authority,
            true
          ));
                                                      if let Some(rent_payer) = self.rent_payer {
              accounts.push(solana_instruction::AccountMeta::new(
                rent_payer,
                true,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::ASTROLABE_SMART_ACCOUNT_ID,
                false,
              ));
            }
                                                                if let Some(system_program) = self.system_program {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                system_program,
                false,
              ));
            } else {
              accounts.push(solana_instruction::AccountMeta::new_readonly(
                crate::ASTROLABE_SMART_ACCOUNT_ID,
                false,
              ));
            }
                                                    accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&RemoveSignerAsAuthorityInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct RemoveSignerAsAuthorityInstructionData {
            discriminator: [u8; 8],
                  }

impl RemoveSignerAsAuthorityInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [58, 19, 149, 16, 181, 16, 125, 148],
                                              }
  }
}

impl Default for RemoveSignerAsAuthorityInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct RemoveSignerAsAuthorityInstructionArgs {
                  pub old_signer: Pubkey,
                pub memo: Option<String>,
      }


/// Instruction builder for `RemoveSignerAsAuthority`.
///
/// ### Accounts:
///
                ///   0. `[writable]` settings
                ///   1. `[signer]` settings_authority
                            ///   2. `[writable, signer, optional]` rent_payer
                ///   3. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   4. `[optional]` program (default to `GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD`)
#[derive(Clone, Debug, Default)]
pub struct RemoveSignerAsAuthorityBuilder {
            settings: Option<solana_pubkey::Pubkey>,
                settings_authority: Option<solana_pubkey::Pubkey>,
                rent_payer: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                program: Option<solana_pubkey::Pubkey>,
                        old_signer: Option<Pubkey>,
                memo: Option<String>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl RemoveSignerAsAuthorityBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn settings(&mut self, settings: solana_pubkey::Pubkey) -> &mut Self {
                        self.settings = Some(settings);
                    self
    }
            /// Settings `settings_authority` that must authorize the configuration change.
#[inline(always)]
    pub fn settings_authority(&mut self, settings_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.settings_authority = Some(settings_authority);
                    self
    }
            /// `[optional account]`
/// The account that will be charged or credited in case the settings account needs to reallocate space,
/// for example when adding a new signer or a spending limit.
/// This is usually the same as `settings_authority`, but can be a different account if needed.
#[inline(always)]
    pub fn rent_payer(&mut self, rent_payer: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.rent_payer = rent_payer;
                    self
    }
            /// `[optional account]`
/// We might need it in case reallocation is needed.
#[inline(always)]
    pub fn system_program(&mut self, system_program: Option<solana_pubkey::Pubkey>) -> &mut Self {
                        self.system_program = system_program;
                    self
    }
            /// `[optional account, default to 'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD']`
#[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn old_signer(&mut self, old_signer: Pubkey) -> &mut Self {
        self.old_signer = Some(old_signer);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn memo(&mut self, memo: String) -> &mut Self {
        self.memo = Some(memo);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = RemoveSignerAsAuthority {
                              settings: self.settings.expect("settings is not set"),
                                        settings_authority: self.settings_authority.expect("settings_authority is not set"),
                                        rent_payer: self.rent_payer,
                                        system_program: self.system_program,
                                        program: self.program.unwrap_or(solana_pubkey::pubkey!("GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD")),
                      };
          let args = RemoveSignerAsAuthorityInstructionArgs {
                                                              old_signer: self.old_signer.clone().expect("old_signer is not set"),
                                                                  memo: self.memo.clone(),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `remove_signer_as_authority` CPI accounts.
  pub struct RemoveSignerAsAuthorityCpiAccounts<'a, 'b> {
          
                    
              pub settings: &'b solana_account_info::AccountInfo<'a>,
                        /// Settings `settings_authority` that must authorize the configuration change.

      
                    
              pub settings_authority: &'b solana_account_info::AccountInfo<'a>,
                        /// The account that will be charged or credited in case the settings account needs to reallocate space,
/// for example when adding a new signer or a spending limit.
/// This is usually the same as `settings_authority`, but can be a different account if needed.

      
                    
              pub rent_payer: Option<&'b solana_account_info::AccountInfo<'a>>,
                        /// We might need it in case reallocation is needed.

      
                    
              pub system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                
                    
              pub program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `remove_signer_as_authority` CPI instruction.
pub struct RemoveSignerAsAuthorityCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub settings: &'b solana_account_info::AccountInfo<'a>,
                /// Settings `settings_authority` that must authorize the configuration change.

    
              
          pub settings_authority: &'b solana_account_info::AccountInfo<'a>,
                /// The account that will be charged or credited in case the settings account needs to reallocate space,
/// for example when adding a new signer or a spending limit.
/// This is usually the same as `settings_authority`, but can be a different account if needed.

    
              
          pub rent_payer: Option<&'b solana_account_info::AccountInfo<'a>>,
                /// We might need it in case reallocation is needed.

    
              
          pub system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
          
              
          pub program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: RemoveSignerAsAuthorityInstructionArgs,
  }

impl<'a, 'b> RemoveSignerAsAuthorityCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: RemoveSignerAsAuthorityCpiAccounts<'a, 'b>,
              args: RemoveSignerAsAuthorityInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              settings: accounts.settings,
              settings_authority: accounts.settings_authority,
              rent_payer: accounts.rent_payer,
              system_program: accounts.system_program,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_entrypoint::ProgramResult {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.settings.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.settings_authority.key,
            true
          ));
                                          if let Some(rent_payer) = self.rent_payer {
            accounts.push(solana_instruction::AccountMeta::new(
              *rent_payer.key,
              true,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::ASTROLABE_SMART_ACCOUNT_ID,
              false,
            ));
          }
                                          if let Some(system_program) = self.system_program {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              *system_program.key,
              false,
            ));
          } else {
            accounts.push(solana_instruction::AccountMeta::new_readonly(
              crate::ASTROLABE_SMART_ACCOUNT_ID,
              false,
            ));
          }
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&RemoveSignerAsAuthorityInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.settings.clone());
                        account_infos.push(self.settings_authority.clone());
                        if let Some(rent_payer) = self.rent_payer {
          account_infos.push(rent_payer.clone());
        }
                        if let Some(system_program) = self.system_program {
          account_infos.push(system_program.clone());
        }
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `RemoveSignerAsAuthority` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` settings
                ///   1. `[signer]` settings_authority
                            ///   2. `[writable, signer, optional]` rent_payer
                ///   3. `[optional]` system_program
          ///   4. `[]` program
#[derive(Clone, Debug)]
pub struct RemoveSignerAsAuthorityCpiBuilder<'a, 'b> {
  instruction: Box<RemoveSignerAsAuthorityCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> RemoveSignerAsAuthorityCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(RemoveSignerAsAuthorityCpiBuilderInstruction {
      __program: program,
              settings: None,
              settings_authority: None,
              rent_payer: None,
              system_program: None,
              program: None,
                                            old_signer: None,
                                memo: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn settings(&mut self, settings: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.settings = Some(settings);
                    self
    }
      /// Settings `settings_authority` that must authorize the configuration change.
#[inline(always)]
    pub fn settings_authority(&mut self, settings_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.settings_authority = Some(settings_authority);
                    self
    }
      /// `[optional account]`
/// The account that will be charged or credited in case the settings account needs to reallocate space,
/// for example when adding a new signer or a spending limit.
/// This is usually the same as `settings_authority`, but can be a different account if needed.
#[inline(always)]
    pub fn rent_payer(&mut self, rent_payer: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.rent_payer = rent_payer;
                    self
    }
      /// `[optional account]`
/// We might need it in case reallocation is needed.
#[inline(always)]
    pub fn system_program(&mut self, system_program: Option<&'b solana_account_info::AccountInfo<'a>>) -> &mut Self {
                        self.instruction.system_program = system_program;
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    #[inline(always)]
      pub fn old_signer(&mut self, old_signer: Pubkey) -> &mut Self {
        self.instruction.old_signer = Some(old_signer);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn memo(&mut self, memo: String) -> &mut Self {
        self.instruction.memo = Some(memo);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_entrypoint::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_entrypoint::ProgramResult {
          let args = RemoveSignerAsAuthorityInstructionArgs {
                                                              old_signer: self.instruction.old_signer.clone().expect("old_signer is not set"),
                                                                  memo: self.instruction.memo.clone(),
                                    };
        let instruction = RemoveSignerAsAuthorityCpi {
        __program: self.instruction.__program,
                  
          settings: self.instruction.settings.expect("settings is not set"),
                  
          settings_authority: self.instruction.settings_authority.expect("settings_authority is not set"),
                  
          rent_payer: self.instruction.rent_payer,
                  
          system_program: self.instruction.system_program,
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct RemoveSignerAsAuthorityCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            settings: Option<&'b solana_account_info::AccountInfo<'a>>,
                settings_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                rent_payer: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        old_signer: Option<Pubkey>,
                memo: Option<String>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

