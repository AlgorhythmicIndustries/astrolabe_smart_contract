/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  AddSpendingLimitArgs,
  addSpendingLimitArgsBeet,
} from '../types/AddSpendingLimitArgs'

/**
 * @category Instructions
 * @category generated
 */
export type AddSpendingLimitAsAuthorityInstructionArgs = {
  args: AddSpendingLimitArgs
}
/**
 * @category Instructions
 * @category generated
 */
export const add_spending_limit_as_authorityStruct =
  new beet.FixableBeetArgsStruct<
    AddSpendingLimitAsAuthorityInstructionArgs & {
      instructionDiscriminator: number[] /* size: 8 */
    }
  >(
    [
      ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
      ['args', addSpendingLimitArgsBeet],
    ],
    'AddSpendingLimitAsAuthorityInstructionArgs'
  )
/**
 * Accounts required by the _AddSpendingLimitAsAuthorityInstructionAccounts_ instruction
 *
 * @property [] settings
 * @property [] settingsAuthority
 * @property [] spendingLimit
 * @property [] rentPayer
 * @property [] systemProgram
 * @property [] program
 * @category Instructions
 * @category generated
 */
export type AddSpendingLimitAsAuthorityInstructionAccounts = {
  settings: web3.PublicKey
  settingsAuthority: web3.PublicKey
  spendingLimit: web3.PublicKey
  rentPayer: web3.PublicKey
  systemProgram: web3.PublicKey
  program: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}
export const addSpendingLimitAsAuthorityInstructionDiscriminator = [
  169, 189, 84, 54, 30, 244, 223, 212,
]

/**
 * Creates a _AddSpendingLimitAsAuthority_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddSpendingLimitAsAuthority
 * @category generated
 */
export function createAddSpendingLimitAsAuthorityInstruction(
  accounts: AddSpendingLimitAsAuthorityInstructionAccounts,
  args: AddSpendingLimitAsAuthorityInstructionArgs,
  programId = new web3.PublicKey('97Xsunnsy4C6EET3V3cd2bSd1ArLcdUcihD8CKEjdS4c')
) {
  const [data] = add_spending_limit_as_authorityStruct.serialize({
    instructionDiscriminator:
      addSpendingLimitAsAuthorityInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.settings,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.settingsAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.spendingLimit,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rentPayer,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.program,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
