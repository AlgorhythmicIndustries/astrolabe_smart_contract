/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  AddTransactionToBatchArgs,
  addTransactionToBatchArgsBeet,
} from '../types/AddTransactionToBatchArgs'

/**
 * @category Instructions
 * @category generated
 */
export type AddTransactionToBatchInstructionArgs = {
  args: AddTransactionToBatchArgs
}
/**
 * @category Instructions
 * @category generated
 */
export const add_transaction_to_batchStruct = new beet.FixableBeetArgsStruct<
  AddTransactionToBatchInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', addTransactionToBatchArgsBeet],
  ],
  'AddTransactionToBatchInstructionArgs'
)
/**
 * Accounts required by the _AddTransactionToBatchInstructionAccounts_ instruction
 *
 * @property [] settings
 * @property [] proposal
 * @property [] batch
 * @property [] transaction
 * @property [] signer
 * @property [] rentPayer
 * @property [] systemProgram
 * @category Instructions
 * @category generated
 */
export type AddTransactionToBatchInstructionAccounts = {
  settings: web3.PublicKey
  proposal: web3.PublicKey
  batch: web3.PublicKey
  transaction: web3.PublicKey
  signer: web3.PublicKey
  rentPayer: web3.PublicKey
  systemProgram: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}
export const addTransactionToBatchInstructionDiscriminator = [
  147, 75, 197, 227, 20, 149, 150, 113,
]

/**
 * Creates a _AddTransactionToBatch_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category AddTransactionToBatch
 * @category generated
 */
export function createAddTransactionToBatchInstruction(
  accounts: AddTransactionToBatchInstructionAccounts,
  args: AddTransactionToBatchInstructionArgs,
  programId = new web3.PublicKey('97Xsunnsy4C6EET3V3cd2bSd1ArLcdUcihD8CKEjdS4c')
) {
  const [data] = add_transaction_to_batchStruct.serialize({
    instructionDiscriminator: addTransactionToBatchInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.settings,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.batch,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.transaction,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.signer,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rentPayer,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
