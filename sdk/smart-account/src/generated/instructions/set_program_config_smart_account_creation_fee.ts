/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  ProgramConfigSetSmartAccountCreationFeeArgs,
  programConfigSetSmartAccountCreationFeeArgsBeet,
} from '../types/ProgramConfigSetSmartAccountCreationFeeArgs'

/**
 * @category Instructions
 * @category generated
 */
export type SetProgramConfigSmartAccountCreationFeeInstructionArgs = {
  args: ProgramConfigSetSmartAccountCreationFeeArgs
}
/**
 * @category Instructions
 * @category generated
 */
export const set_program_config_smart_account_creation_feeStruct =
  new beet.BeetArgsStruct<
    SetProgramConfigSmartAccountCreationFeeInstructionArgs & {
      instructionDiscriminator: number[] /* size: 8 */
    }
  >(
    [
      ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
      ['args', programConfigSetSmartAccountCreationFeeArgsBeet],
    ],
    'SetProgramConfigSmartAccountCreationFeeInstructionArgs'
  )
/**
 * Accounts required by the _SetProgramConfigSmartAccountCreationFeeInstructionAccounts_ instruction
 *
 * @property [] programConfig
 * @property [] authority
 * @category Instructions
 * @category generated
 */
export type SetProgramConfigSmartAccountCreationFeeInstructionAccounts = {
  programConfig: web3.PublicKey
  authority: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}
export const setProgramConfigSmartAccountCreationFeeInstructionDiscriminator = [
  222, 30, 134, 176, 131, 113, 195, 202,
]

/**
 * Creates a _SetProgramConfigSmartAccountCreationFee_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SetProgramConfigSmartAccountCreationFee
 * @category generated
 */
export function createSetProgramConfigSmartAccountCreationFeeInstruction(
  accounts: SetProgramConfigSmartAccountCreationFeeInstructionAccounts,
  args: SetProgramConfigSmartAccountCreationFeeInstructionArgs,
  programId = new web3.PublicKey('97Xsunnsy4C6EET3V3cd2bSd1ArLcdUcihD8CKEjdS4c')
) {
  const [data] = set_program_config_smart_account_creation_feeStruct.serialize({
    instructionDiscriminator:
      setProgramConfigSmartAccountCreationFeeInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.programConfig,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
