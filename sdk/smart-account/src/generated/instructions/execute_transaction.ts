/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category generated
 */
export const execute_transactionStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'ExecuteTransactionInstructionArgs'
)
/**
 * Accounts required by the _ExecuteTransactionInstructionAccounts_ instruction
 *
 * @property [] settings
 * @property [] proposal
 * @property [] transaction
 * @property [] signer
 * @category Instructions
 * @category generated
 */
export type ExecuteTransactionInstructionAccounts = {
  settings: web3.PublicKey
  proposal: web3.PublicKey
  transaction: web3.PublicKey
  signer: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}
export const executeTransactionInstructionDiscriminator = [
  231, 173, 49, 91, 235, 24, 68, 19,
]

/**
 * Creates a _ExecuteTransaction_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category ExecuteTransaction
 * @category generated
 */
export function createExecuteTransactionInstruction(
  accounts: ExecuteTransactionInstructionAccounts,
  programId = new web3.PublicKey('97Xsunnsy4C6EET3V3cd2bSd1ArLcdUcihD8CKEjdS4c')
) {
  const [data] = execute_transactionStruct.serialize({
    instructionDiscriminator: executeTransactionInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.settings,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.proposal,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.transaction,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.signer,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
