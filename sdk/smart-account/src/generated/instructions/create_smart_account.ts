/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  CreateSmartAccountArgs,
  createSmartAccountArgsBeet,
} from '../types/CreateSmartAccountArgs'

/**
 * @category Instructions
 * @category generated
 */
export type SmartAccountInstructionArgs = {
  args: CreateSmartAccountArgs
}
/**
 * @category Instructions
 * @category generated
 */
export const create_smart_accountStruct = new beet.FixableBeetArgsStruct<
  SmartAccountInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['args', createSmartAccountArgsBeet],
  ],
  'SmartAccountInstructionArgs'
)
/**
 * Accounts required by the _SmartAccountInstructionAccounts_ instruction
 *
 * @property [] programConfig
 * @property [] treasury
 * @property [] creator
 * @property [] systemProgram
 * @property [] program
 * @category Instructions
 * @category generated
 */
export type SmartAccountInstructionAccounts = {
  programConfig: web3.PublicKey
  treasury: web3.PublicKey
  creator: web3.PublicKey
  systemProgram: web3.PublicKey
  program: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}
export const smartAccountInstructionDiscriminator = [
  197, 102, 253, 231, 77, 84, 50, 17,
]

/**
 * Creates a _SmartAccount_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category SmartAccount
 * @category generated
 */
export function SmartAccountInstruction(
  accounts: SmartAccountInstructionAccounts,
  args: SmartAccountInstructionArgs,
  programId = new web3.PublicKey('97Xsunnsy4C6EET3V3cd2bSd1ArLcdUcihD8CKEjdS4c')
) {
  const [data] = create_smart_accountStruct.serialize({
    instructionDiscriminator: smartAccountInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.programConfig,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.treasury,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.creator,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.systemProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.program,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
