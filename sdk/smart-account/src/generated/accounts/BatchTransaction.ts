/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import {
  SmartAccountTransactionMessage,
  smartAccountTransactionMessageBeet,
} from '../types/SmartAccountTransactionMessage'

export type BatchTransactionArgs = {
  bump: number
  rentCollector: web3.PublicKey
  ephemeralSignerBumps: Uint8Array
  message: SmartAccountTransactionMessage
}

export const batchTransactionDiscriminator = [92, 20, 61, 146, 155, 62, 112, 72]
/**
 * Holds the data for the {@link BatchTransaction} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class BatchTransaction implements BatchTransactionArgs {
  private constructor(
    readonly bump: number,
    readonly rentCollector: web3.PublicKey,
    readonly ephemeralSignerBumps: Uint8Array,
    readonly message: SmartAccountTransactionMessage
  ) {}

  /**
   * Creates a {@link BatchTransaction} instance from the provided args.
   */
  static fromArgs(args: BatchTransactionArgs) {
    return new BatchTransaction(
      args.bump,
      args.rentCollector,
      args.ephemeralSignerBumps,
      args.message
    )
  }

  /**
   * Deserializes the {@link BatchTransaction} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [BatchTransaction, number] {
    return BatchTransaction.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link BatchTransaction} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<BatchTransaction> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find BatchTransaction account at ${address}`)
    }
    return BatchTransaction.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      '97Xsunnsy4C6EET3V3cd2bSd1ArLcdUcihD8CKEjdS4c'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, batchTransactionBeet)
  }

  /**
   * Deserializes the {@link BatchTransaction} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [BatchTransaction, number] {
    return batchTransactionBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link BatchTransaction} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return batchTransactionBeet.serialize({
      accountDiscriminator: batchTransactionDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link BatchTransaction} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: BatchTransactionArgs) {
    const instance = BatchTransaction.fromArgs(args)
    return batchTransactionBeet.toFixedFromValue({
      accountDiscriminator: batchTransactionDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link BatchTransaction} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: BatchTransactionArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      BatchTransaction.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link BatchTransaction} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      bump: this.bump,
      rentCollector: this.rentCollector,
      ephemeralSignerBumps: this.ephemeralSignerBumps,
      message: this.message,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const batchTransactionBeet = new beet.FixableBeetStruct<
  BatchTransaction,
  BatchTransactionArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['bump', beet.u8],
    ['rentCollector', beetSolana.publicKey],
    ['ephemeralSignerBumps', beet.bytes],
    ['message', smartAccountTransactionMessageBeet],
  ],
  BatchTransaction.fromArgs,
  'BatchTransaction'
)
