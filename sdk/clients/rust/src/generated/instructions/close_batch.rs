//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const CLOSE_BATCH_DISCRIMINATOR: [u8; 8] = [166, 174, 35, 253, 209, 211, 181, 28];

/// Accounts.
#[derive(Debug)]
pub struct CloseBatch {
      
              
          pub settings: solana_pubkey::Pubkey,
                /// the logic within `close_batch` does the rest of the checks.

    
              
          pub proposal: solana_pubkey::Pubkey,
                /// `Batch` corresponding to the `proposal`.

    
              
          pub batch: solana_pubkey::Pubkey,
                /// The rent collector for the proposal account.

    
              
          pub proposal_rent_collector: solana_pubkey::Pubkey,
                /// The rent collector.

    
              
          pub batch_rent_collector: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
      }

impl CloseBatch {
  pub fn instruction(&self) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(&[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(6+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.settings,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.proposal,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.batch,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.proposal_rent_collector,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.batch_rent_collector,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let data = borsh::to_vec(&CloseBatchInstructionData::new()).unwrap();
    
    solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CloseBatchInstructionData {
            discriminator: [u8; 8],
      }

impl CloseBatchInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [166, 174, 35, 253, 209, 211, 181, 28],
                  }
  }
}

impl Default for CloseBatchInstructionData {
  fn default() -> Self {
    Self::new()
  }
}



/// Instruction builder for `CloseBatch`.
///
/// ### Accounts:
///
          ///   0. `[]` settings
                ///   1. `[writable]` proposal
                ///   2. `[writable]` batch
                ///   3. `[writable]` proposal_rent_collector
                ///   4. `[writable]` batch_rent_collector
                ///   5. `[optional]` system_program (default to `11111111111111111111111111111111`)
#[derive(Clone, Debug, Default)]
pub struct CloseBatchBuilder {
            settings: Option<solana_pubkey::Pubkey>,
                proposal: Option<solana_pubkey::Pubkey>,
                batch: Option<solana_pubkey::Pubkey>,
                proposal_rent_collector: Option<solana_pubkey::Pubkey>,
                batch_rent_collector: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CloseBatchBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn settings(&mut self, settings: solana_pubkey::Pubkey) -> &mut Self {
                        self.settings = Some(settings);
                    self
    }
            /// the logic within `close_batch` does the rest of the checks.
#[inline(always)]
    pub fn proposal(&mut self, proposal: solana_pubkey::Pubkey) -> &mut Self {
                        self.proposal = Some(proposal);
                    self
    }
            /// `Batch` corresponding to the `proposal`.
#[inline(always)]
    pub fn batch(&mut self, batch: solana_pubkey::Pubkey) -> &mut Self {
                        self.batch = Some(batch);
                    self
    }
            /// The rent collector for the proposal account.
#[inline(always)]
    pub fn proposal_rent_collector(&mut self, proposal_rent_collector: solana_pubkey::Pubkey) -> &mut Self {
                        self.proposal_rent_collector = Some(proposal_rent_collector);
                    self
    }
            /// The rent collector.
#[inline(always)]
    pub fn batch_rent_collector(&mut self, batch_rent_collector: solana_pubkey::Pubkey) -> &mut Self {
                        self.batch_rent_collector = Some(batch_rent_collector);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = CloseBatch {
                              settings: self.settings.expect("settings is not set"),
                                        proposal: self.proposal.expect("proposal is not set"),
                                        batch: self.batch.expect("batch is not set"),
                                        proposal_rent_collector: self.proposal_rent_collector.expect("proposal_rent_collector is not set"),
                                        batch_rent_collector: self.batch_rent_collector.expect("batch_rent_collector is not set"),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                      };
    
    accounts.instruction_with_remaining_accounts(&self.__remaining_accounts)
  }
}

  /// `close_batch` CPI accounts.
  pub struct CloseBatchCpiAccounts<'a, 'b> {
          
                    
              pub settings: &'b solana_account_info::AccountInfo<'a>,
                        /// the logic within `close_batch` does the rest of the checks.

      
                    
              pub proposal: &'b solana_account_info::AccountInfo<'a>,
                        /// `Batch` corresponding to the `proposal`.

      
                    
              pub batch: &'b solana_account_info::AccountInfo<'a>,
                        /// The rent collector for the proposal account.

      
                    
              pub proposal_rent_collector: &'b solana_account_info::AccountInfo<'a>,
                        /// The rent collector.

      
                    
              pub batch_rent_collector: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `close_batch` CPI instruction.
pub struct CloseBatchCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub settings: &'b solana_account_info::AccountInfo<'a>,
                /// the logic within `close_batch` does the rest of the checks.

    
              
          pub proposal: &'b solana_account_info::AccountInfo<'a>,
                /// `Batch` corresponding to the `proposal`.

    
              
          pub batch: &'b solana_account_info::AccountInfo<'a>,
                /// The rent collector for the proposal account.

    
              
          pub proposal_rent_collector: &'b solana_account_info::AccountInfo<'a>,
                /// The rent collector.

    
              
          pub batch_rent_collector: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
        }

impl<'a, 'b> CloseBatchCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: CloseBatchCpiAccounts<'a, 'b>,
          ) -> Self {
    Self {
      __program: program,
              settings: accounts.settings,
              proposal: accounts.proposal,
              batch: accounts.batch,
              proposal_rent_collector: accounts.proposal_rent_collector,
              batch_rent_collector: accounts.batch_rent_collector,
              system_program: accounts.system_program,
                }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(6+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.settings.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.proposal.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.batch.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.proposal_rent_collector.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.batch_rent_collector.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let data = borsh::to_vec(&CloseBatchInstructionData::new()).unwrap();
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.settings.clone());
                        account_infos.push(self.proposal.clone());
                        account_infos.push(self.batch.clone());
                        account_infos.push(self.proposal_rent_collector.clone());
                        account_infos.push(self.batch_rent_collector.clone());
                        account_infos.push(self.system_program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `CloseBatch` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` settings
                ///   1. `[writable]` proposal
                ///   2. `[writable]` batch
                ///   3. `[writable]` proposal_rent_collector
                ///   4. `[writable]` batch_rent_collector
          ///   5. `[]` system_program
#[derive(Clone, Debug)]
pub struct CloseBatchCpiBuilder<'a, 'b> {
  instruction: Box<CloseBatchCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CloseBatchCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(CloseBatchCpiBuilderInstruction {
      __program: program,
              settings: None,
              proposal: None,
              batch: None,
              proposal_rent_collector: None,
              batch_rent_collector: None,
              system_program: None,
                                __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn settings(&mut self, settings: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.settings = Some(settings);
                    self
    }
      /// the logic within `close_batch` does the rest of the checks.
#[inline(always)]
    pub fn proposal(&mut self, proposal: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.proposal = Some(proposal);
                    self
    }
      /// `Batch` corresponding to the `proposal`.
#[inline(always)]
    pub fn batch(&mut self, batch: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.batch = Some(batch);
                    self
    }
      /// The rent collector for the proposal account.
#[inline(always)]
    pub fn proposal_rent_collector(&mut self, proposal_rent_collector: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.proposal_rent_collector = Some(proposal_rent_collector);
                    self
    }
      /// The rent collector.
#[inline(always)]
    pub fn batch_rent_collector(&mut self, batch_rent_collector: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.batch_rent_collector = Some(batch_rent_collector);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
            /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
        let instruction = CloseBatchCpi {
        __program: self.instruction.__program,
                  
          settings: self.instruction.settings.expect("settings is not set"),
                  
          proposal: self.instruction.proposal.expect("proposal is not set"),
                  
          batch: self.instruction.batch.expect("batch is not set"),
                  
          proposal_rent_collector: self.instruction.proposal_rent_collector.expect("proposal_rent_collector is not set"),
                  
          batch_rent_collector: self.instruction.batch_rent_collector.expect("batch_rent_collector is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                    };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct CloseBatchCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            settings: Option<&'b solana_account_info::AccountInfo<'a>>,
                proposal: Option<&'b solana_account_info::AccountInfo<'a>>,
                batch: Option<&'b solana_account_info::AccountInfo<'a>>,
                proposal_rent_collector: Option<&'b solana_account_info::AccountInfo<'a>>,
                batch_rent_collector: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

