//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use solana_pubkey::Pubkey;
use crate::generated::types::SmartAccountSigner;
use crate::generated::types::RestrictedSmartAccountSigner;
use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const CREATE_SMART_ACCOUNT_DISCRIMINATOR: [u8; 8] = [197, 102, 253, 231, 77, 84, 50, 17];

/// Accounts.
#[derive(Debug)]
pub struct CreateSmartAccount {
            /// Global program config account.

    
              
          pub program_config: solana_pubkey::Pubkey,
                /// The settings account for the smart account.

    
              
          pub settings: solana_pubkey::Pubkey,
                /// The treasury where the creation fee is transferred to.

    
              
          pub treasury: solana_pubkey::Pubkey,
                /// The creator of the smart account.

    
              
          pub creator: solana_pubkey::Pubkey,
          
              
          pub system_program: solana_pubkey::Pubkey,
          
              
          pub program: solana_pubkey::Pubkey,
      }

impl CreateSmartAccount {
  pub fn instruction(&self, args: CreateSmartAccountInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: CreateSmartAccountInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(6+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            self.program_config,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.settings,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.treasury,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.creator,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.system_program,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&CreateSmartAccountInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CreateSmartAccountInstructionData {
            discriminator: [u8; 8],
                                                }

impl CreateSmartAccountInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [197, 102, 253, 231, 77, 84, 50, 17],
                                                                                                                    }
  }
}

impl Default for CreateSmartAccountInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct CreateSmartAccountInstructionArgs {
                  pub settings_authority: Option<Pubkey>,
                pub threshold: u16,
                pub signers: Vec<SmartAccountSigner>,
                pub restricted_signers: Vec<RestrictedSmartAccountSigner>,
                pub time_lock: u32,
                pub rent_collector: Option<Pubkey>,
                pub memo: Option<String>,
      }


/// Instruction builder for `CreateSmartAccount`.
///
/// ### Accounts:
///
                ///   0. `[writable]` program_config
                ///   1. `[writable]` settings
                ///   2. `[writable]` treasury
                      ///   3. `[writable, signer]` creator
                ///   4. `[optional]` system_program (default to `11111111111111111111111111111111`)
                ///   5. `[optional]` program (default to `ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q`)
#[derive(Clone, Debug, Default)]
pub struct CreateSmartAccountBuilder {
            program_config: Option<solana_pubkey::Pubkey>,
                settings: Option<solana_pubkey::Pubkey>,
                treasury: Option<solana_pubkey::Pubkey>,
                creator: Option<solana_pubkey::Pubkey>,
                system_program: Option<solana_pubkey::Pubkey>,
                program: Option<solana_pubkey::Pubkey>,
                        settings_authority: Option<Pubkey>,
                threshold: Option<u16>,
                signers: Option<Vec<SmartAccountSigner>>,
                restricted_signers: Option<Vec<RestrictedSmartAccountSigner>>,
                time_lock: Option<u32>,
                rent_collector: Option<Pubkey>,
                memo: Option<String>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl CreateSmartAccountBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            /// Global program config account.
#[inline(always)]
    pub fn program_config(&mut self, program_config: solana_pubkey::Pubkey) -> &mut Self {
                        self.program_config = Some(program_config);
                    self
    }
            /// The settings account for the smart account.
#[inline(always)]
    pub fn settings(&mut self, settings: solana_pubkey::Pubkey) -> &mut Self {
                        self.settings = Some(settings);
                    self
    }
            /// The treasury where the creation fee is transferred to.
#[inline(always)]
    pub fn treasury(&mut self, treasury: solana_pubkey::Pubkey) -> &mut Self {
                        self.treasury = Some(treasury);
                    self
    }
            /// The creator of the smart account.
#[inline(always)]
    pub fn creator(&mut self, creator: solana_pubkey::Pubkey) -> &mut Self {
                        self.creator = Some(creator);
                    self
    }
            /// `[optional account, default to '11111111111111111111111111111111']`
#[inline(always)]
    pub fn system_program(&mut self, system_program: solana_pubkey::Pubkey) -> &mut Self {
                        self.system_program = Some(system_program);
                    self
    }
            /// `[optional account, default to 'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q']`
#[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    /// `[optional argument]`
#[inline(always)]
      pub fn settings_authority(&mut self, settings_authority: Pubkey) -> &mut Self {
        self.settings_authority = Some(settings_authority);
        self
      }
                #[inline(always)]
      pub fn threshold(&mut self, threshold: u16) -> &mut Self {
        self.threshold = Some(threshold);
        self
      }
                #[inline(always)]
      pub fn signers(&mut self, signers: Vec<SmartAccountSigner>) -> &mut Self {
        self.signers = Some(signers);
        self
      }
                #[inline(always)]
      pub fn restricted_signers(&mut self, restricted_signers: Vec<RestrictedSmartAccountSigner>) -> &mut Self {
        self.restricted_signers = Some(restricted_signers);
        self
      }
                #[inline(always)]
      pub fn time_lock(&mut self, time_lock: u32) -> &mut Self {
        self.time_lock = Some(time_lock);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn rent_collector(&mut self, rent_collector: Pubkey) -> &mut Self {
        self.rent_collector = Some(rent_collector);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn memo(&mut self, memo: String) -> &mut Self {
        self.memo = Some(memo);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = CreateSmartAccount {
                              program_config: self.program_config.expect("program_config is not set"),
                                        settings: self.settings.expect("settings is not set"),
                                        treasury: self.treasury.expect("treasury is not set"),
                                        creator: self.creator.expect("creator is not set"),
                                        system_program: self.system_program.unwrap_or(solana_pubkey::pubkey!("11111111111111111111111111111111")),
                                        program: self.program.unwrap_or(solana_pubkey::pubkey!("ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q")),
                      };
          let args = CreateSmartAccountInstructionArgs {
                                                              settings_authority: self.settings_authority.clone(),
                                                                  threshold: self.threshold.clone().expect("threshold is not set"),
                                                                  signers: self.signers.clone().expect("signers is not set"),
                                                                  restricted_signers: self.restricted_signers.clone().expect("restricted_signers is not set"),
                                                                  time_lock: self.time_lock.clone().expect("time_lock is not set"),
                                                                  rent_collector: self.rent_collector.clone(),
                                                                  memo: self.memo.clone(),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `create_smart_account` CPI accounts.
  pub struct CreateSmartAccountCpiAccounts<'a, 'b> {
                  /// Global program config account.

      
                    
              pub program_config: &'b solana_account_info::AccountInfo<'a>,
                        /// The settings account for the smart account.

      
                    
              pub settings: &'b solana_account_info::AccountInfo<'a>,
                        /// The treasury where the creation fee is transferred to.

      
                    
              pub treasury: &'b solana_account_info::AccountInfo<'a>,
                        /// The creator of the smart account.

      
                    
              pub creator: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub system_program: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `create_smart_account` CPI instruction.
pub struct CreateSmartAccountCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
            /// Global program config account.

    
              
          pub program_config: &'b solana_account_info::AccountInfo<'a>,
                /// The settings account for the smart account.

    
              
          pub settings: &'b solana_account_info::AccountInfo<'a>,
                /// The treasury where the creation fee is transferred to.

    
              
          pub treasury: &'b solana_account_info::AccountInfo<'a>,
                /// The creator of the smart account.

    
              
          pub creator: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub system_program: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: CreateSmartAccountInstructionArgs,
  }

impl<'a, 'b> CreateSmartAccountCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: CreateSmartAccountCpiAccounts<'a, 'b>,
              args: CreateSmartAccountInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              program_config: accounts.program_config,
              settings: accounts.settings,
              treasury: accounts.treasury,
              creator: accounts.creator,
              system_program: accounts.system_program,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(6+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new(
            *self.program_config.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.settings.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.treasury.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.creator.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.system_program.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&CreateSmartAccountInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(7 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.program_config.clone());
                        account_infos.push(self.settings.clone());
                        account_infos.push(self.treasury.clone());
                        account_infos.push(self.creator.clone());
                        account_infos.push(self.system_program.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `CreateSmartAccount` via CPI.
///
/// ### Accounts:
///
                ///   0. `[writable]` program_config
                ///   1. `[writable]` settings
                ///   2. `[writable]` treasury
                      ///   3. `[writable, signer]` creator
          ///   4. `[]` system_program
          ///   5. `[]` program
#[derive(Clone, Debug)]
pub struct CreateSmartAccountCpiBuilder<'a, 'b> {
  instruction: Box<CreateSmartAccountCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> CreateSmartAccountCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(CreateSmartAccountCpiBuilderInstruction {
      __program: program,
              program_config: None,
              settings: None,
              treasury: None,
              creator: None,
              system_program: None,
              program: None,
                                            settings_authority: None,
                                threshold: None,
                                signers: None,
                                restricted_signers: None,
                                time_lock: None,
                                rent_collector: None,
                                memo: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      /// Global program config account.
#[inline(always)]
    pub fn program_config(&mut self, program_config: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program_config = Some(program_config);
                    self
    }
      /// The settings account for the smart account.
#[inline(always)]
    pub fn settings(&mut self, settings: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.settings = Some(settings);
                    self
    }
      /// The treasury where the creation fee is transferred to.
#[inline(always)]
    pub fn treasury(&mut self, treasury: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.treasury = Some(treasury);
                    self
    }
      /// The creator of the smart account.
#[inline(always)]
    pub fn creator(&mut self, creator: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.creator = Some(creator);
                    self
    }
      #[inline(always)]
    pub fn system_program(&mut self, system_program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.system_program = Some(system_program);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    /// `[optional argument]`
#[inline(always)]
      pub fn settings_authority(&mut self, settings_authority: Pubkey) -> &mut Self {
        self.instruction.settings_authority = Some(settings_authority);
        self
      }
                #[inline(always)]
      pub fn threshold(&mut self, threshold: u16) -> &mut Self {
        self.instruction.threshold = Some(threshold);
        self
      }
                #[inline(always)]
      pub fn signers(&mut self, signers: Vec<SmartAccountSigner>) -> &mut Self {
        self.instruction.signers = Some(signers);
        self
      }
                #[inline(always)]
      pub fn restricted_signers(&mut self, restricted_signers: Vec<RestrictedSmartAccountSigner>) -> &mut Self {
        self.instruction.restricted_signers = Some(restricted_signers);
        self
      }
                #[inline(always)]
      pub fn time_lock(&mut self, time_lock: u32) -> &mut Self {
        self.instruction.time_lock = Some(time_lock);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn rent_collector(&mut self, rent_collector: Pubkey) -> &mut Self {
        self.instruction.rent_collector = Some(rent_collector);
        self
      }
                /// `[optional argument]`
#[inline(always)]
      pub fn memo(&mut self, memo: String) -> &mut Self {
        self.instruction.memo = Some(memo);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = CreateSmartAccountInstructionArgs {
                                                              settings_authority: self.instruction.settings_authority.clone(),
                                                                  threshold: self.instruction.threshold.clone().expect("threshold is not set"),
                                                                  signers: self.instruction.signers.clone().expect("signers is not set"),
                                                                  restricted_signers: self.instruction.restricted_signers.clone().expect("restricted_signers is not set"),
                                                                  time_lock: self.instruction.time_lock.clone().expect("time_lock is not set"),
                                                                  rent_collector: self.instruction.rent_collector.clone(),
                                                                  memo: self.instruction.memo.clone(),
                                    };
        let instruction = CreateSmartAccountCpi {
        __program: self.instruction.__program,
                  
          program_config: self.instruction.program_config.expect("program_config is not set"),
                  
          settings: self.instruction.settings.expect("settings is not set"),
                  
          treasury: self.instruction.treasury.expect("treasury is not set"),
                  
          creator: self.instruction.creator.expect("creator is not set"),
                  
          system_program: self.instruction.system_program.expect("system_program is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct CreateSmartAccountCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            program_config: Option<&'b solana_account_info::AccountInfo<'a>>,
                settings: Option<&'b solana_account_info::AccountInfo<'a>>,
                treasury: Option<&'b solana_account_info::AccountInfo<'a>>,
                creator: Option<&'b solana_account_info::AccountInfo<'a>>,
                system_program: Option<&'b solana_account_info::AccountInfo<'a>>,
                program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        settings_authority: Option<Pubkey>,
                threshold: Option<u16>,
                signers: Option<Vec<SmartAccountSigner>>,
                restricted_signers: Option<Vec<RestrictedSmartAccountSigner>>,
                time_lock: Option<u32>,
                rent_collector: Option<Pubkey>,
                memo: Option<String>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

