//! This code was AUTOGENERATED using the codama library.
//! Please DO NOT EDIT THIS FILE, instead use visitors
//! to add features, then rerun codama to update it.
//!
//! <https://github.com/codama-idl/codama>
//!

use borsh::BorshSerialize;
use borsh::BorshDeserialize;

pub const REMOVE_SPENDING_LIMIT_AS_AUTHORITY_DISCRIMINATOR: [u8; 8] = [94, 32, 68, 127, 251, 44, 145, 7];

/// Accounts.
#[derive(Debug)]
pub struct RemoveSpendingLimitAsAuthority {
      
              
          pub settings: solana_pubkey::Pubkey,
                /// Settings `settings_authority` that must authorize the configuration change.

    
              
          pub settings_authority: solana_pubkey::Pubkey,
          
              
          pub spending_limit: solana_pubkey::Pubkey,
                /// This is usually the same as `settings_authority`, but can be a different account if needed.

    
              
          pub rent_collector: solana_pubkey::Pubkey,
          
              
          pub program: solana_pubkey::Pubkey,
      }

impl RemoveSpendingLimitAsAuthority {
  pub fn instruction(&self, args: RemoveSpendingLimitAsAuthorityInstructionArgs) -> solana_instruction::Instruction {
    self.instruction_with_remaining_accounts(args, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::vec_init_then_push)]
  pub fn instruction_with_remaining_accounts(&self, args: RemoveSpendingLimitAsAuthorityInstructionArgs, remaining_accounts: &[solana_instruction::AccountMeta]) -> solana_instruction::Instruction {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.settings,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.settings_authority,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.spending_limit,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            self.rent_collector,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            self.program,
            false
          ));
                      accounts.extend_from_slice(remaining_accounts);
    let mut data = borsh::to_vec(&RemoveSpendingLimitAsAuthorityInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&args).unwrap();
      data.append(&mut args);
    
    solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    }
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct RemoveSpendingLimitAsAuthorityInstructionData {
            discriminator: [u8; 8],
            }

impl RemoveSpendingLimitAsAuthorityInstructionData {
  pub fn new() -> Self {
    Self {
                        discriminator: [94, 32, 68, 127, 251, 44, 145, 7],
                                }
  }
}

impl Default for RemoveSpendingLimitAsAuthorityInstructionData {
  fn default() -> Self {
    Self::new()
  }
}

#[derive(BorshSerialize, BorshDeserialize, Clone, Debug, Eq, PartialEq)]
#[cfg_attr(feature = "serde", derive(serde::Serialize, serde::Deserialize))]
 pub struct RemoveSpendingLimitAsAuthorityInstructionArgs {
                  pub memo: Option<String>,
      }


/// Instruction builder for `RemoveSpendingLimitAsAuthority`.
///
/// ### Accounts:
///
          ///   0. `[]` settings
                ///   1. `[signer]` settings_authority
                ///   2. `[writable]` spending_limit
                ///   3. `[writable]` rent_collector
                ///   4. `[optional]` program (default to `ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q`)
#[derive(Clone, Debug, Default)]
pub struct RemoveSpendingLimitAsAuthorityBuilder {
            settings: Option<solana_pubkey::Pubkey>,
                settings_authority: Option<solana_pubkey::Pubkey>,
                spending_limit: Option<solana_pubkey::Pubkey>,
                rent_collector: Option<solana_pubkey::Pubkey>,
                program: Option<solana_pubkey::Pubkey>,
                        memo: Option<String>,
        __remaining_accounts: Vec<solana_instruction::AccountMeta>,
}

impl RemoveSpendingLimitAsAuthorityBuilder {
  pub fn new() -> Self {
    Self::default()
  }
            #[inline(always)]
    pub fn settings(&mut self, settings: solana_pubkey::Pubkey) -> &mut Self {
                        self.settings = Some(settings);
                    self
    }
            /// Settings `settings_authority` that must authorize the configuration change.
#[inline(always)]
    pub fn settings_authority(&mut self, settings_authority: solana_pubkey::Pubkey) -> &mut Self {
                        self.settings_authority = Some(settings_authority);
                    self
    }
            #[inline(always)]
    pub fn spending_limit(&mut self, spending_limit: solana_pubkey::Pubkey) -> &mut Self {
                        self.spending_limit = Some(spending_limit);
                    self
    }
            /// This is usually the same as `settings_authority`, but can be a different account if needed.
#[inline(always)]
    pub fn rent_collector(&mut self, rent_collector: solana_pubkey::Pubkey) -> &mut Self {
                        self.rent_collector = Some(rent_collector);
                    self
    }
            /// `[optional account, default to 'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q']`
#[inline(always)]
    pub fn program(&mut self, program: solana_pubkey::Pubkey) -> &mut Self {
                        self.program = Some(program);
                    self
    }
                    /// `[optional argument]`
#[inline(always)]
      pub fn memo(&mut self, memo: String) -> &mut Self {
        self.memo = Some(memo);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: solana_instruction::AccountMeta) -> &mut Self {
    self.__remaining_accounts.push(account);
    self
  }
  /// Add additional accounts to the instruction.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[solana_instruction::AccountMeta]) -> &mut Self {
    self.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[allow(clippy::clone_on_copy)]
  pub fn instruction(&self) -> solana_instruction::Instruction {
    let accounts = RemoveSpendingLimitAsAuthority {
                              settings: self.settings.expect("settings is not set"),
                                        settings_authority: self.settings_authority.expect("settings_authority is not set"),
                                        spending_limit: self.spending_limit.expect("spending_limit is not set"),
                                        rent_collector: self.rent_collector.expect("rent_collector is not set"),
                                        program: self.program.unwrap_or(solana_pubkey::pubkey!("ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q")),
                      };
          let args = RemoveSpendingLimitAsAuthorityInstructionArgs {
                                                              memo: self.memo.clone(),
                                    };
    
    accounts.instruction_with_remaining_accounts(args, &self.__remaining_accounts)
  }
}

  /// `remove_spending_limit_as_authority` CPI accounts.
  pub struct RemoveSpendingLimitAsAuthorityCpiAccounts<'a, 'b> {
          
                    
              pub settings: &'b solana_account_info::AccountInfo<'a>,
                        /// Settings `settings_authority` that must authorize the configuration change.

      
                    
              pub settings_authority: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub spending_limit: &'b solana_account_info::AccountInfo<'a>,
                        /// This is usually the same as `settings_authority`, but can be a different account if needed.

      
                    
              pub rent_collector: &'b solana_account_info::AccountInfo<'a>,
                
                    
              pub program: &'b solana_account_info::AccountInfo<'a>,
            }

/// `remove_spending_limit_as_authority` CPI instruction.
pub struct RemoveSpendingLimitAsAuthorityCpi<'a, 'b> {
  /// The program to invoke.
  pub __program: &'b solana_account_info::AccountInfo<'a>,
      
              
          pub settings: &'b solana_account_info::AccountInfo<'a>,
                /// Settings `settings_authority` that must authorize the configuration change.

    
              
          pub settings_authority: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub spending_limit: &'b solana_account_info::AccountInfo<'a>,
                /// This is usually the same as `settings_authority`, but can be a different account if needed.

    
              
          pub rent_collector: &'b solana_account_info::AccountInfo<'a>,
          
              
          pub program: &'b solana_account_info::AccountInfo<'a>,
            /// The arguments for the instruction.
    pub __args: RemoveSpendingLimitAsAuthorityInstructionArgs,
  }

impl<'a, 'b> RemoveSpendingLimitAsAuthorityCpi<'a, 'b> {
  pub fn new(
    program: &'b solana_account_info::AccountInfo<'a>,
          accounts: RemoveSpendingLimitAsAuthorityCpiAccounts<'a, 'b>,
              args: RemoveSpendingLimitAsAuthorityInstructionArgs,
      ) -> Self {
    Self {
      __program: program,
              settings: accounts.settings,
              settings_authority: accounts.settings_authority,
              spending_limit: accounts.spending_limit,
              rent_collector: accounts.rent_collector,
              program: accounts.program,
                    __args: args,
          }
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], &[])
  }
  #[inline(always)]
  pub fn invoke_with_remaining_accounts(&self, remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(&[], remaining_accounts)
  }
  #[inline(always)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
    self.invoke_signed_with_remaining_accounts(signers_seeds, &[])
  }
  #[allow(clippy::arithmetic_side_effects)]
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed_with_remaining_accounts(
    &self,
    signers_seeds: &[&[&[u8]]],
    remaining_accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]
  ) -> solana_program_error::ProgramResult {
    let mut accounts = Vec::with_capacity(5+ remaining_accounts.len());
                            accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.settings.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.settings_authority.key,
            true
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.spending_limit.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new(
            *self.rent_collector.key,
            false
          ));
                                          accounts.push(solana_instruction::AccountMeta::new_readonly(
            *self.program.key,
            false
          ));
                      remaining_accounts.iter().for_each(|remaining_account| {
      accounts.push(solana_instruction::AccountMeta {
          pubkey: *remaining_account.0.key,
          is_signer: remaining_account.1,
          is_writable: remaining_account.2,
      })
    });
    let mut data = borsh::to_vec(&RemoveSpendingLimitAsAuthorityInstructionData::new()).unwrap();
          let mut args = borsh::to_vec(&self.__args).unwrap();
      data.append(&mut args);
    
    let instruction = solana_instruction::Instruction {
      program_id: crate::ASTROLABE_SMART_ACCOUNT_ID,
      accounts,
      data,
    };
    let mut account_infos = Vec::with_capacity(6 + remaining_accounts.len());
    account_infos.push(self.__program.clone());
                  account_infos.push(self.settings.clone());
                        account_infos.push(self.settings_authority.clone());
                        account_infos.push(self.spending_limit.clone());
                        account_infos.push(self.rent_collector.clone());
                        account_infos.push(self.program.clone());
              remaining_accounts.iter().for_each(|remaining_account| account_infos.push(remaining_account.0.clone()));

    if signers_seeds.is_empty() {
      solana_cpi::invoke(&instruction, &account_infos)
    } else {
      solana_cpi::invoke_signed(&instruction, &account_infos, signers_seeds)
    }
  }
}

/// Instruction builder for `RemoveSpendingLimitAsAuthority` via CPI.
///
/// ### Accounts:
///
          ///   0. `[]` settings
                ///   1. `[signer]` settings_authority
                ///   2. `[writable]` spending_limit
                ///   3. `[writable]` rent_collector
          ///   4. `[]` program
#[derive(Clone, Debug)]
pub struct RemoveSpendingLimitAsAuthorityCpiBuilder<'a, 'b> {
  instruction: Box<RemoveSpendingLimitAsAuthorityCpiBuilderInstruction<'a, 'b>>,
}

impl<'a, 'b> RemoveSpendingLimitAsAuthorityCpiBuilder<'a, 'b> {
  pub fn new(program: &'b solana_account_info::AccountInfo<'a>) -> Self {
    let instruction = Box::new(RemoveSpendingLimitAsAuthorityCpiBuilderInstruction {
      __program: program,
              settings: None,
              settings_authority: None,
              spending_limit: None,
              rent_collector: None,
              program: None,
                                            memo: None,
                    __remaining_accounts: Vec::new(),
    });
    Self { instruction }
  }
      #[inline(always)]
    pub fn settings(&mut self, settings: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.settings = Some(settings);
                    self
    }
      /// Settings `settings_authority` that must authorize the configuration change.
#[inline(always)]
    pub fn settings_authority(&mut self, settings_authority: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.settings_authority = Some(settings_authority);
                    self
    }
      #[inline(always)]
    pub fn spending_limit(&mut self, spending_limit: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.spending_limit = Some(spending_limit);
                    self
    }
      /// This is usually the same as `settings_authority`, but can be a different account if needed.
#[inline(always)]
    pub fn rent_collector(&mut self, rent_collector: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.rent_collector = Some(rent_collector);
                    self
    }
      #[inline(always)]
    pub fn program(&mut self, program: &'b solana_account_info::AccountInfo<'a>) -> &mut Self {
                        self.instruction.program = Some(program);
                    self
    }
                    /// `[optional argument]`
#[inline(always)]
      pub fn memo(&mut self, memo: String) -> &mut Self {
        self.instruction.memo = Some(memo);
        self
      }
        /// Add an additional account to the instruction.
  #[inline(always)]
  pub fn add_remaining_account(&mut self, account: &'b solana_account_info::AccountInfo<'a>, is_writable: bool, is_signer: bool) -> &mut Self {
    self.instruction.__remaining_accounts.push((account, is_writable, is_signer));
    self
  }
  /// Add additional accounts to the instruction.
  ///
  /// Each account is represented by a tuple of the `AccountInfo`, a `bool` indicating whether the account is writable or not,
  /// and a `bool` indicating whether the account is a signer or not.
  #[inline(always)]
  pub fn add_remaining_accounts(&mut self, accounts: &[(&'b solana_account_info::AccountInfo<'a>, bool, bool)]) -> &mut Self {
    self.instruction.__remaining_accounts.extend_from_slice(accounts);
    self
  }
  #[inline(always)]
  pub fn invoke(&self) -> solana_program_error::ProgramResult {
    self.invoke_signed(&[])
  }
  #[allow(clippy::clone_on_copy)]
  #[allow(clippy::vec_init_then_push)]
  pub fn invoke_signed(&self, signers_seeds: &[&[&[u8]]]) -> solana_program_error::ProgramResult {
          let args = RemoveSpendingLimitAsAuthorityInstructionArgs {
                                                              memo: self.instruction.memo.clone(),
                                    };
        let instruction = RemoveSpendingLimitAsAuthorityCpi {
        __program: self.instruction.__program,
                  
          settings: self.instruction.settings.expect("settings is not set"),
                  
          settings_authority: self.instruction.settings_authority.expect("settings_authority is not set"),
                  
          spending_limit: self.instruction.spending_limit.expect("spending_limit is not set"),
                  
          rent_collector: self.instruction.rent_collector.expect("rent_collector is not set"),
                  
          program: self.instruction.program.expect("program is not set"),
                          __args: args,
            };
    instruction.invoke_signed_with_remaining_accounts(signers_seeds, &self.instruction.__remaining_accounts)
  }
}

#[derive(Clone, Debug)]
struct RemoveSpendingLimitAsAuthorityCpiBuilderInstruction<'a, 'b> {
  __program: &'b solana_account_info::AccountInfo<'a>,
            settings: Option<&'b solana_account_info::AccountInfo<'a>>,
                settings_authority: Option<&'b solana_account_info::AccountInfo<'a>>,
                spending_limit: Option<&'b solana_account_info::AccountInfo<'a>>,
                rent_collector: Option<&'b solana_account_info::AccountInfo<'a>>,
                program: Option<&'b solana_account_info::AccountInfo<'a>>,
                        memo: Option<String>,
        /// Additional instruction accounts `(AccountInfo, is_writable, is_signer)`.
  __remaining_accounts: Vec<(&'b solana_account_info::AccountInfo<'a>, bool, bool)>,
}

