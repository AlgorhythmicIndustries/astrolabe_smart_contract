"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PROGRAM_CONFIG_DISCRIMINATOR = void 0;
exports.getProgramConfigDiscriminatorBytes = getProgramConfigDiscriminatorBytes;
exports.getProgramConfigEncoder = getProgramConfigEncoder;
exports.getProgramConfigDecoder = getProgramConfigDecoder;
exports.getProgramConfigCodec = getProgramConfigCodec;
exports.decodeProgramConfig = decodeProgramConfig;
exports.fetchProgramConfig = fetchProgramConfig;
exports.fetchMaybeProgramConfig = fetchMaybeProgramConfig;
exports.fetchAllProgramConfig = fetchAllProgramConfig;
exports.fetchAllMaybeProgramConfig = fetchAllMaybeProgramConfig;
exports.getProgramConfigSize = getProgramConfigSize;
const kit_1 = require("@solana/kit");
exports.PROGRAM_CONFIG_DISCRIMINATOR = new Uint8Array([
    196, 210, 90, 231, 144, 149, 140, 63,
]);
function getProgramConfigDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.PROGRAM_CONFIG_DISCRIMINATOR);
}
function getProgramConfigEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['smartAccountIndex', (0, kit_1.getU128Encoder)()],
        ['authority', (0, kit_1.getAddressEncoder)()],
        ['smartAccountCreationFee', (0, kit_1.getU64Encoder)()],
        ['treasury', (0, kit_1.getAddressEncoder)()],
        ['reserved', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 64)],
    ]), (value) => ({ ...value, discriminator: exports.PROGRAM_CONFIG_DISCRIMINATOR }));
}
function getProgramConfigDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['smartAccountIndex', (0, kit_1.getU128Decoder)()],
        ['authority', (0, kit_1.getAddressDecoder)()],
        ['smartAccountCreationFee', (0, kit_1.getU64Decoder)()],
        ['treasury', (0, kit_1.getAddressDecoder)()],
        ['reserved', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 64)],
    ]);
}
function getProgramConfigCodec() {
    return (0, kit_1.combineCodec)(getProgramConfigEncoder(), getProgramConfigDecoder());
}
function decodeProgramConfig(encodedAccount) {
    return (0, kit_1.decodeAccount)(encodedAccount, getProgramConfigDecoder());
}
async function fetchProgramConfig(rpc, address, config) {
    const maybeAccount = await fetchMaybeProgramConfig(rpc, address, config);
    (0, kit_1.assertAccountExists)(maybeAccount);
    return maybeAccount;
}
async function fetchMaybeProgramConfig(rpc, address, config) {
    const maybeAccount = await (0, kit_1.fetchEncodedAccount)(rpc, address, config);
    return decodeProgramConfig(maybeAccount);
}
async function fetchAllProgramConfig(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeProgramConfig(rpc, addresses, config);
    (0, kit_1.assertAccountsExist)(maybeAccounts);
    return maybeAccounts;
}
async function fetchAllMaybeProgramConfig(rpc, addresses, config) {
    const maybeAccounts = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeProgramConfig(maybeAccount));
}
function getProgramConfigSize() {
    return 160;
}
