/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { fetchEncodedAccount, fetchEncodedAccounts, type Account, type Address, type Codec, type Decoder, type EncodedAccount, type Encoder, type FetchAccountConfig, type FetchAccountsConfig, type MaybeAccount, type MaybeEncodedAccount, type ReadonlyUint8Array } from '@solana/kit';
export declare const PROGRAM_CONFIG_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getProgramConfigDiscriminatorBytes(): ReadonlyUint8Array;
export type ProgramConfig = {
    discriminator: ReadonlyUint8Array;
    /** Counter for the number of smart accounts created. */
    smartAccountIndex: bigint;
    /** The authority which can update the config. */
    authority: Address;
    /**
     * The lamports amount charged for creating a new smart account.
     * This fee is sent to the `treasury` account.
     */
    smartAccountCreationFee: bigint;
    /** The treasury account to send charged fees to. */
    treasury: Address;
    /** Reserved for future use. */
    reserved: ReadonlyUint8Array;
};
export type ProgramConfigArgs = {
    /** Counter for the number of smart accounts created. */
    smartAccountIndex: number | bigint;
    /** The authority which can update the config. */
    authority: Address;
    /**
     * The lamports amount charged for creating a new smart account.
     * This fee is sent to the `treasury` account.
     */
    smartAccountCreationFee: number | bigint;
    /** The treasury account to send charged fees to. */
    treasury: Address;
    /** Reserved for future use. */
    reserved: ReadonlyUint8Array;
};
export declare function getProgramConfigEncoder(): Encoder<ProgramConfigArgs>;
export declare function getProgramConfigDecoder(): Decoder<ProgramConfig>;
export declare function getProgramConfigCodec(): Codec<ProgramConfigArgs, ProgramConfig>;
export declare function decodeProgramConfig<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<ProgramConfig, TAddress>;
export declare function decodeProgramConfig<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<ProgramConfig, TAddress>;
export declare function fetchProgramConfig<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<ProgramConfig, TAddress>>;
export declare function fetchMaybeProgramConfig<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<ProgramConfig, TAddress>>;
export declare function fetchAllProgramConfig(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<ProgramConfig>[]>;
export declare function fetchAllMaybeProgramConfig(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<ProgramConfig>[]>;
export declare function getProgramConfigSize(): number;
