/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getRestrictedSmartAccountSignerDecoder,
  getRestrictedSmartAccountSignerEncoder,
  getSmartAccountSignerDecoder,
  getSmartAccountSignerEncoder,
  type RestrictedSmartAccountSigner,
  type RestrictedSmartAccountSignerArgs,
  type SmartAccountSigner,
  type SmartAccountSignerArgs,
} from '../types';

export const CREATE_SMART_ACCOUNT_DISCRIMINATOR = new Uint8Array([
  197, 102, 253, 231, 77, 84, 50, 17,
]);

export function getCreateSmartAccountDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_SMART_ACCOUNT_DISCRIMINATOR
  );
}

export type CreateSmartAccountInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountProgramConfig extends string | IAccountMeta<string> = string,
  TAccountSettings extends string | IAccountMeta<string> = string,
  TAccountTreasury extends string | IAccountMeta<string> = string,
  TAccountCreator extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountProgram extends
    | string
    | IAccountMeta<string> = 'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountProgramConfig extends string
        ? WritableAccount<TAccountProgramConfig>
        : TAccountProgramConfig,
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountTreasury extends string
        ? WritableAccount<TAccountTreasury>
        : TAccountTreasury,
      TAccountCreator extends string
        ? WritableSignerAccount<TAccountCreator> &
            IAccountSignerMeta<TAccountCreator>
        : TAccountCreator,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateSmartAccountInstructionData = {
  discriminator: ReadonlyUint8Array;
  /**
   * The authority that can configure the smart account: add/remove signers, change the threshold, etc.
   * Should be set to `None` for autonomous smart accounts.
   */
  settingsAuthority: Option<Address>;
  /** The number of signatures required to execute a transaction. */
  threshold: number;
  /** The signers on the smart account. */
  signers: Array<SmartAccountSigner>;
  /** The restricted signers on the smart account. */
  restrictedSigners: Array<RestrictedSmartAccountSigner>;
  /** How many seconds must pass between transaction voting, settlement, and execution. */
  timeLock: number;
  /**
   * The address where the rent for the accounts related to executed, rejected, or cancelled
   * transactions can be reclaimed. If set to `None`, the rent reclamation feature is turned off.
   */
  rentCollector: Option<Address>;
  /** Memo is used for indexing only. */
  memo: Option<string>;
};

export type CreateSmartAccountInstructionDataArgs = {
  /**
   * The authority that can configure the smart account: add/remove signers, change the threshold, etc.
   * Should be set to `None` for autonomous smart accounts.
   */
  settingsAuthority: OptionOrNullable<Address>;
  /** The number of signatures required to execute a transaction. */
  threshold: number;
  /** The signers on the smart account. */
  signers: Array<SmartAccountSignerArgs>;
  /** The restricted signers on the smart account. */
  restrictedSigners: Array<RestrictedSmartAccountSignerArgs>;
  /** How many seconds must pass between transaction voting, settlement, and execution. */
  timeLock: number;
  /**
   * The address where the rent for the accounts related to executed, rejected, or cancelled
   * transactions can be reclaimed. If set to `None`, the rent reclamation feature is turned off.
   */
  rentCollector: OptionOrNullable<Address>;
  /** Memo is used for indexing only. */
  memo: OptionOrNullable<string>;
};

export function getCreateSmartAccountInstructionDataEncoder(): Encoder<CreateSmartAccountInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['settingsAuthority', getOptionEncoder(getAddressEncoder())],
      ['threshold', getU16Encoder()],
      ['signers', getArrayEncoder(getSmartAccountSignerEncoder())],
      [
        'restrictedSigners',
        getArrayEncoder(getRestrictedSmartAccountSignerEncoder()),
      ],
      ['timeLock', getU32Encoder()],
      ['rentCollector', getOptionEncoder(getAddressEncoder())],
      [
        'memo',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({ ...value, discriminator: CREATE_SMART_ACCOUNT_DISCRIMINATOR })
  );
}

export function getCreateSmartAccountInstructionDataDecoder(): Decoder<CreateSmartAccountInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['settingsAuthority', getOptionDecoder(getAddressDecoder())],
    ['threshold', getU16Decoder()],
    ['signers', getArrayDecoder(getSmartAccountSignerDecoder())],
    [
      'restrictedSigners',
      getArrayDecoder(getRestrictedSmartAccountSignerDecoder()),
    ],
    ['timeLock', getU32Decoder()],
    ['rentCollector', getOptionDecoder(getAddressDecoder())],
    [
      'memo',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getCreateSmartAccountInstructionDataCodec(): Codec<
  CreateSmartAccountInstructionDataArgs,
  CreateSmartAccountInstructionData
> {
  return combineCodec(
    getCreateSmartAccountInstructionDataEncoder(),
    getCreateSmartAccountInstructionDataDecoder()
  );
}

export type CreateSmartAccountAsyncInput<
  TAccountProgramConfig extends string = string,
  TAccountSettings extends string = string,
  TAccountTreasury extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Global program config account. */
  programConfig?: Address<TAccountProgramConfig>;
  /** The settings account for the smart account. */
  settings: Address<TAccountSettings>;
  /** The treasury where the creation fee is transferred to. */
  treasury: Address<TAccountTreasury>;
  /** The creator of the smart account. */
  creator: TransactionSigner<TAccountCreator>;
  systemProgram?: Address<TAccountSystemProgram>;
  program?: Address<TAccountProgram>;
  settingsAuthority: CreateSmartAccountInstructionDataArgs['settingsAuthority'];
  threshold: CreateSmartAccountInstructionDataArgs['threshold'];
  signers: CreateSmartAccountInstructionDataArgs['signers'];
  restrictedSigners: CreateSmartAccountInstructionDataArgs['restrictedSigners'];
  timeLock: CreateSmartAccountInstructionDataArgs['timeLock'];
  rentCollector: CreateSmartAccountInstructionDataArgs['rentCollector'];
  memo: CreateSmartAccountInstructionDataArgs['memo'];
};

export async function getCreateSmartAccountInstructionAsync<
  TAccountProgramConfig extends string,
  TAccountSettings extends string,
  TAccountTreasury extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: CreateSmartAccountAsyncInput<
    TAccountProgramConfig,
    TAccountSettings,
    TAccountTreasury,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  CreateSmartAccountInstruction<
    TProgramAddress,
    TAccountProgramConfig,
    TAccountSettings,
    TAccountTreasury,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountProgram
  >
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    programConfig: { value: input.programConfig ?? null, isWritable: true },
    settings: { value: input.settings ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.programConfig.value) {
    accounts.programConfig.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([
            115, 109, 97, 114, 116, 95, 97, 99, 99, 111, 117, 110, 116,
          ])
        ),
        getBytesEncoder().encode(
          new Uint8Array([
            112, 114, 111, 103, 114, 97, 109, 95, 99, 111, 110, 102, 105, 103,
          ])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.program.value) {
    accounts.program.value =
      'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD' as Address<'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.programConfig),
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCreateSmartAccountInstructionDataEncoder().encode(
      args as CreateSmartAccountInstructionDataArgs
    ),
  } as CreateSmartAccountInstruction<
    TProgramAddress,
    TAccountProgramConfig,
    TAccountSettings,
    TAccountTreasury,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountProgram
  >;

  return instruction;
}

export type CreateSmartAccountInput<
  TAccountProgramConfig extends string = string,
  TAccountSettings extends string = string,
  TAccountTreasury extends string = string,
  TAccountCreator extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountProgram extends string = string,
> = {
  /** Global program config account. */
  programConfig: Address<TAccountProgramConfig>;
  /** The settings account for the smart account. */
  settings: Address<TAccountSettings>;
  /** The treasury where the creation fee is transferred to. */
  treasury: Address<TAccountTreasury>;
  /** The creator of the smart account. */
  creator: TransactionSigner<TAccountCreator>;
  systemProgram?: Address<TAccountSystemProgram>;
  program?: Address<TAccountProgram>;
  settingsAuthority: CreateSmartAccountInstructionDataArgs['settingsAuthority'];
  threshold: CreateSmartAccountInstructionDataArgs['threshold'];
  signers: CreateSmartAccountInstructionDataArgs['signers'];
  restrictedSigners: CreateSmartAccountInstructionDataArgs['restrictedSigners'];
  timeLock: CreateSmartAccountInstructionDataArgs['timeLock'];
  rentCollector: CreateSmartAccountInstructionDataArgs['rentCollector'];
  memo: CreateSmartAccountInstructionDataArgs['memo'];
};

export function getCreateSmartAccountInstruction<
  TAccountProgramConfig extends string,
  TAccountSettings extends string,
  TAccountTreasury extends string,
  TAccountCreator extends string,
  TAccountSystemProgram extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: CreateSmartAccountInput<
    TAccountProgramConfig,
    TAccountSettings,
    TAccountTreasury,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateSmartAccountInstruction<
  TProgramAddress,
  TAccountProgramConfig,
  TAccountSettings,
  TAccountTreasury,
  TAccountCreator,
  TAccountSystemProgram,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    programConfig: { value: input.programConfig ?? null, isWritable: true },
    settings: { value: input.settings ?? null, isWritable: true },
    treasury: { value: input.treasury ?? null, isWritable: true },
    creator: { value: input.creator ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.program.value) {
    accounts.program.value =
      'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD' as Address<'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.programConfig),
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.treasury),
      getAccountMeta(accounts.creator),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getCreateSmartAccountInstructionDataEncoder().encode(
      args as CreateSmartAccountInstructionDataArgs
    ),
  } as CreateSmartAccountInstruction<
    TProgramAddress,
    TAccountProgramConfig,
    TAccountSettings,
    TAccountTreasury,
    TAccountCreator,
    TAccountSystemProgram,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedCreateSmartAccountInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** Global program config account. */
    programConfig: TAccountMetas[0];
    /** The settings account for the smart account. */
    settings: TAccountMetas[1];
    /** The treasury where the creation fee is transferred to. */
    treasury: TAccountMetas[2];
    /** The creator of the smart account. */
    creator: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
    program: TAccountMetas[5];
  };
  data: CreateSmartAccountInstructionData;
};

export function parseCreateSmartAccountInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCreateSmartAccountInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      programConfig: getNextAccount(),
      settings: getNextAccount(),
      treasury: getNextAccount(),
      creator: getNextAccount(),
      systemProgram: getNextAccount(),
      program: getNextAccount(),
    },
    data: getCreateSmartAccountInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
