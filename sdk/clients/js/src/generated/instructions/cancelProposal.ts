/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getVoteOnProposalArgsDecoder,
  getVoteOnProposalArgsEncoder,
  type VoteOnProposalArgs,
  type VoteOnProposalArgsArgs,
} from '../types';

export const CANCEL_PROPOSAL_DISCRIMINATOR = new Uint8Array([
  106, 74, 128, 146, 19, 65, 39, 23,
]);

export function getCancelProposalDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CANCEL_PROPOSAL_DISCRIMINATOR
  );
}

export type CancelProposalInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | IAccountMeta<string> = string,
  TAccountSigner extends string | IAccountMeta<string> = string,
  TAccountProposal extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSettings extends string
        ? ReadonlyAccount<TAccountSettings>
        : TAccountSettings,
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            IAccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CancelProposalInstructionData = {
  discriminator: ReadonlyUint8Array;
  args: VoteOnProposalArgs;
};

export type CancelProposalInstructionDataArgs = {
  args: VoteOnProposalArgsArgs;
};

export function getCancelProposalInstructionDataEncoder(): Encoder<CancelProposalInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['args', getVoteOnProposalArgsEncoder()],
    ]),
    (value) => ({ ...value, discriminator: CANCEL_PROPOSAL_DISCRIMINATOR })
  );
}

export function getCancelProposalInstructionDataDecoder(): Decoder<CancelProposalInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['args', getVoteOnProposalArgsDecoder()],
  ]);
}

export function getCancelProposalInstructionDataCodec(): Codec<
  CancelProposalInstructionDataArgs,
  CancelProposalInstructionData
> {
  return combineCodec(
    getCancelProposalInstructionDataEncoder(),
    getCancelProposalInstructionDataDecoder()
  );
}

export type CancelProposalInput<
  TAccountSettings extends string = string,
  TAccountSigner extends string = string,
  TAccountProposal extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  settings: Address<TAccountSettings>;
  signer: TransactionSigner<TAccountSigner>;
  proposal: Address<TAccountProposal>;
  systemProgram?: Address<TAccountSystemProgram>;
  args: CancelProposalInstructionDataArgs['args'];
};

export function getCancelProposalInstruction<
  TAccountSettings extends string,
  TAccountSigner extends string,
  TAccountProposal extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: CancelProposalInput<
    TAccountSettings,
    TAccountSigner,
    TAccountProposal,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CancelProposalInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountSigner,
  TAccountProposal,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: false },
    signer: { value: input.signer ?? null, isWritable: true },
    proposal: { value: input.proposal ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.systemProgram),
    ],
    programAddress,
    data: getCancelProposalInstructionDataEncoder().encode(
      args as CancelProposalInstructionDataArgs
    ),
  } as CancelProposalInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountSigner,
    TAccountProposal,
    TAccountSystemProgram
  >;

  return instruction;
}

export type ParsedCancelProposalInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    signer: TAccountMetas[1];
    proposal: TAccountMetas[2];
    systemProgram?: TAccountMetas[3] | undefined;
  };
  data: CancelProposalInstructionData;
};

export function parseCancelProposalInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedCancelProposalInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      signer: getNextAccount(),
      proposal: getNextAccount(),
      systemProgram: getNextOptionalAccount(),
    },
    data: getCancelProposalInstructionDataDecoder().decode(instruction.data),
  };
}
