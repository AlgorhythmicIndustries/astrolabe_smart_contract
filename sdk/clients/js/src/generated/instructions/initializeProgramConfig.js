"use strict";
/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === "function" ? Iterator : Object).prototype);
    return g.next = verb(0), g["throw"] = verb(1), g["return"] = verb(2), typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.INITIALIZE_PROGRAM_CONFIG_DISCRIMINATOR = void 0;
exports.getInitializeProgramConfigDiscriminatorBytes = getInitializeProgramConfigDiscriminatorBytes;
exports.getInitializeProgramConfigInstructionDataEncoder = getInitializeProgramConfigInstructionDataEncoder;
exports.getInitializeProgramConfigInstructionDataDecoder = getInitializeProgramConfigInstructionDataDecoder;
exports.getInitializeProgramConfigInstructionDataCodec = getInitializeProgramConfigInstructionDataCodec;
exports.getInitializeProgramConfigInstructionAsync = getInitializeProgramConfigInstructionAsync;
exports.getInitializeProgramConfigInstruction = getInitializeProgramConfigInstruction;
exports.parseInitializeProgramConfigInstruction = parseInitializeProgramConfigInstruction;
var kit_1 = require("@solana/kit");
var programs_1 = require("../programs");
var shared_1 = require("../shared");
exports.INITIALIZE_PROGRAM_CONFIG_DISCRIMINATOR = new Uint8Array([
    6, 131, 61, 237, 40, 110, 83, 124,
]);
function getInitializeProgramConfigDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.INITIALIZE_PROGRAM_CONFIG_DISCRIMINATOR);
}
function getInitializeProgramConfigInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['authority', (0, kit_1.getAddressEncoder)()],
        ['smartAccountCreationFee', (0, kit_1.getU64Encoder)()],
        ['treasury', (0, kit_1.getAddressEncoder)()],
    ]), function (value) { return (__assign(__assign({}, value), { discriminator: exports.INITIALIZE_PROGRAM_CONFIG_DISCRIMINATOR })); });
}
function getInitializeProgramConfigInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['authority', (0, kit_1.getAddressDecoder)()],
        ['smartAccountCreationFee', (0, kit_1.getU64Decoder)()],
        ['treasury', (0, kit_1.getAddressDecoder)()],
    ]);
}
function getInitializeProgramConfigInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getInitializeProgramConfigInstructionDataEncoder(), getInitializeProgramConfigInstructionDataDecoder());
}
function getInitializeProgramConfigInstructionAsync(input, config) {
    return __awaiter(this, void 0, void 0, function () {
        var programAddress, originalAccounts, accounts, args, _a, getAccountMeta;
        var _b, _c, _d, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    programAddress = (_b = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _b !== void 0 ? _b : programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;
                    originalAccounts = {
                        programConfig: { value: (_c = input.programConfig) !== null && _c !== void 0 ? _c : null, isWritable: true },
                        initializer: { value: (_d = input.initializer) !== null && _d !== void 0 ? _d : null, isWritable: true },
                        systemProgram: { value: (_e = input.systemProgram) !== null && _e !== void 0 ? _e : null, isWritable: false },
                    };
                    accounts = originalAccounts;
                    args = __assign({}, input);
                    if (!!accounts.programConfig.value) return [3 /*break*/, 2];
                    _a = accounts.programConfig;
                    return [4 /*yield*/, (0, kit_1.getProgramDerivedAddress)({
                            programAddress: programAddress,
                            seeds: [
                                (0, kit_1.getBytesEncoder)().encode(new Uint8Array([
                                    115, 109, 97, 114, 116, 95, 97, 99, 99, 111, 117, 110, 116,
                                ])),
                                (0, kit_1.getBytesEncoder)().encode(new Uint8Array([
                                    112, 114, 111, 103, 114, 97, 109, 95, 99, 111, 110, 102, 105, 103,
                                ])),
                            ],
                        })];
                case 1:
                    _a.value = _f.sent();
                    _f.label = 2;
                case 2:
                    if (!accounts.initializer.value) {
                        accounts.initializer.value =
                            'BrQAbGdWQ9YUHmWWgKFdFe4miTURH71jkYFPXfaosqDv';
                    }
                    if (!accounts.systemProgram.value) {
                        accounts.systemProgram.value =
                            '11111111111111111111111111111111';
                    }
                    getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
                    return [2 /*return*/, Object.freeze({
                            accounts: [
                                getAccountMeta(accounts.programConfig),
                                getAccountMeta(accounts.initializer),
                                getAccountMeta(accounts.systemProgram),
                            ],
                            data: getInitializeProgramConfigInstructionDataEncoder().encode(args),
                            programAddress: programAddress,
                        })];
            }
        });
    });
}
function getInitializeProgramConfigInstruction(input, config) {
    var _a, _b, _c, _d;
    // Program address.
    var programAddress = (_a = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _a !== void 0 ? _a : programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;
    // Original accounts.
    var originalAccounts = {
        programConfig: { value: (_b = input.programConfig) !== null && _b !== void 0 ? _b : null, isWritable: true },
        initializer: { value: (_c = input.initializer) !== null && _c !== void 0 ? _c : null, isWritable: true },
        systemProgram: { value: (_d = input.systemProgram) !== null && _d !== void 0 ? _d : null, isWritable: false },
    };
    var accounts = originalAccounts;
    // Original args.
    var args = __assign({}, input);
    // Resolve default values.
    if (!accounts.initializer.value) {
        accounts.initializer.value =
            'BrQAbGdWQ9YUHmWWgKFdFe4miTURH71jkYFPXfaosqDv';
    }
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111';
    }
    var getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    return Object.freeze({
        accounts: [
            getAccountMeta(accounts.programConfig),
            getAccountMeta(accounts.initializer),
            getAccountMeta(accounts.systemProgram),
        ],
        data: getInitializeProgramConfigInstructionDataEncoder().encode(args),
        programAddress: programAddress,
    });
}
function parseInitializeProgramConfigInstruction(instruction) {
    if (instruction.accounts.length < 3) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    var accountIndex = 0;
    var getNextAccount = function () {
        var accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            programConfig: getNextAccount(),
            initializer: getNextAccount(),
            systemProgram: getNextAccount(),
        },
        data: getInitializeProgramConfigInstructionDataDecoder().decode(instruction.data),
    };
}
