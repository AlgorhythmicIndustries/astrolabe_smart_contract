/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const REMOVE_SPENDING_LIMIT_AS_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  94, 32, 68, 127, 251, 44, 145, 7,
]);

export function getRemoveSpendingLimitAsAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    REMOVE_SPENDING_LIMIT_AS_AUTHORITY_DISCRIMINATOR
  );
}

export type RemoveSpendingLimitAsAuthorityInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountSettingsAuthority extends string | AccountMeta<string> = string,
  TAccountSpendingLimit extends string | AccountMeta<string> = string,
  TAccountRentCollector extends string | AccountMeta<string> = string,
  TAccountProgram extends
    | string
    | AccountMeta<string> = 'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? ReadonlyAccount<TAccountSettings>
        : TAccountSettings,
      TAccountSettingsAuthority extends string
        ? ReadonlySignerAccount<TAccountSettingsAuthority> &
            AccountSignerMeta<TAccountSettingsAuthority>
        : TAccountSettingsAuthority,
      TAccountSpendingLimit extends string
        ? WritableAccount<TAccountSpendingLimit>
        : TAccountSpendingLimit,
      TAccountRentCollector extends string
        ? WritableAccount<TAccountRentCollector>
        : TAccountRentCollector,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type RemoveSpendingLimitAsAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** Memo is used for indexing only. */
  memo: Option<string>;
};

export type RemoveSpendingLimitAsAuthorityInstructionDataArgs = {
  /** Memo is used for indexing only. */
  memo: OptionOrNullable<string>;
};

export function getRemoveSpendingLimitAsAuthorityInstructionDataEncoder(): Encoder<RemoveSpendingLimitAsAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      [
        'memo',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: REMOVE_SPENDING_LIMIT_AS_AUTHORITY_DISCRIMINATOR,
    })
  );
}

export function getRemoveSpendingLimitAsAuthorityInstructionDataDecoder(): Decoder<RemoveSpendingLimitAsAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    [
      'memo',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getRemoveSpendingLimitAsAuthorityInstructionDataCodec(): Codec<
  RemoveSpendingLimitAsAuthorityInstructionDataArgs,
  RemoveSpendingLimitAsAuthorityInstructionData
> {
  return combineCodec(
    getRemoveSpendingLimitAsAuthorityInstructionDataEncoder(),
    getRemoveSpendingLimitAsAuthorityInstructionDataDecoder()
  );
}

export type RemoveSpendingLimitAsAuthorityInput<
  TAccountSettings extends string = string,
  TAccountSettingsAuthority extends string = string,
  TAccountSpendingLimit extends string = string,
  TAccountRentCollector extends string = string,
  TAccountProgram extends string = string,
> = {
  settings: Address<TAccountSettings>;
  /** Settings `settings_authority` that must authorize the configuration change. */
  settingsAuthority: TransactionSigner<TAccountSettingsAuthority>;
  spendingLimit: Address<TAccountSpendingLimit>;
  /** This is usually the same as `settings_authority`, but can be a different account if needed. */
  rentCollector: Address<TAccountRentCollector>;
  program?: Address<TAccountProgram>;
  memo: RemoveSpendingLimitAsAuthorityInstructionDataArgs['memo'];
};

export function getRemoveSpendingLimitAsAuthorityInstruction<
  TAccountSettings extends string,
  TAccountSettingsAuthority extends string,
  TAccountSpendingLimit extends string,
  TAccountRentCollector extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: RemoveSpendingLimitAsAuthorityInput<
    TAccountSettings,
    TAccountSettingsAuthority,
    TAccountSpendingLimit,
    TAccountRentCollector,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): RemoveSpendingLimitAsAuthorityInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountSettingsAuthority,
  TAccountSpendingLimit,
  TAccountRentCollector,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: false },
    settingsAuthority: {
      value: input.settingsAuthority ?? null,
      isWritable: false,
    },
    spendingLimit: { value: input.spendingLimit ?? null, isWritable: true },
    rentCollector: { value: input.rentCollector ?? null, isWritable: true },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.program.value) {
    accounts.program.value =
      'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q' as Address<'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.settingsAuthority),
      getAccountMeta(accounts.spendingLimit),
      getAccountMeta(accounts.rentCollector),
      getAccountMeta(accounts.program),
    ],
    data: getRemoveSpendingLimitAsAuthorityInstructionDataEncoder().encode(
      args as RemoveSpendingLimitAsAuthorityInstructionDataArgs
    ),
    programAddress,
  } as RemoveSpendingLimitAsAuthorityInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountSettingsAuthority,
    TAccountSpendingLimit,
    TAccountRentCollector,
    TAccountProgram
  >);
}

export type ParsedRemoveSpendingLimitAsAuthorityInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    /** Settings `settings_authority` that must authorize the configuration change. */
    settingsAuthority: TAccountMetas[1];
    spendingLimit: TAccountMetas[2];
    /** This is usually the same as `settings_authority`, but can be a different account if needed. */
    rentCollector: TAccountMetas[3];
    program: TAccountMetas[4];
  };
  data: RemoveSpendingLimitAsAuthorityInstructionData;
};

export function parseRemoveSpendingLimitAsAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedRemoveSpendingLimitAsAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      settingsAuthority: getNextAccount(),
      spendingLimit: getNextAccount(),
      rentCollector: getNextAccount(),
      program: getNextAccount(),
    },
    data: getRemoveSpendingLimitAsAuthorityInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
