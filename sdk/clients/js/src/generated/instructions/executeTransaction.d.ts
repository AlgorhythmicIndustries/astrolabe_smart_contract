/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
export declare const EXECUTE_TRANSACTION_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getExecuteTransactionDiscriminatorBytes(): ReadonlyUint8Array;
export type ExecuteTransactionInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | IAccountMeta<string> = string, TAccountProposal extends string | IAccountMeta<string> = string, TAccountTransaction extends string | IAccountMeta<string> = string, TAccountSigner extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountSettings extends string ? ReadonlyAccount<TAccountSettings> : TAccountSettings,
    TAccountProposal extends string ? WritableAccount<TAccountProposal> : TAccountProposal,
    TAccountTransaction extends string ? ReadonlyAccount<TAccountTransaction> : TAccountTransaction,
    TAccountSigner extends string ? ReadonlySignerAccount<TAccountSigner> & IAccountSignerMeta<TAccountSigner> : TAccountSigner,
    ...TRemainingAccounts
]>;
export type ExecuteTransactionInstructionData = {
    discriminator: ReadonlyUint8Array;
};
export type ExecuteTransactionInstructionDataArgs = {};
export declare function getExecuteTransactionInstructionDataEncoder(): Encoder<ExecuteTransactionInstructionDataArgs>;
export declare function getExecuteTransactionInstructionDataDecoder(): Decoder<ExecuteTransactionInstructionData>;
export declare function getExecuteTransactionInstructionDataCodec(): Codec<ExecuteTransactionInstructionDataArgs, ExecuteTransactionInstructionData>;
export type ExecuteTransactionInput<TAccountSettings extends string = string, TAccountProposal extends string = string, TAccountTransaction extends string = string, TAccountSigner extends string = string> = {
    settings: Address<TAccountSettings>;
    /** The proposal account associated with the transaction. */
    proposal: Address<TAccountProposal>;
    /** The transaction to execute. */
    transaction: Address<TAccountTransaction>;
    signer: TransactionSigner<TAccountSigner>;
};
export declare function getExecuteTransactionInstruction<TAccountSettings extends string, TAccountProposal extends string, TAccountTransaction extends string, TAccountSigner extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: ExecuteTransactionInput<TAccountSettings, TAccountProposal, TAccountTransaction, TAccountSigner>, config?: {
    programAddress?: TProgramAddress;
}): ExecuteTransactionInstruction<TProgramAddress, TAccountSettings, TAccountProposal, TAccountTransaction, TAccountSigner>;
export type ParsedExecuteTransactionInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        settings: TAccountMetas[0];
        /** The proposal account associated with the transaction. */
        proposal: TAccountMetas[1];
        /** The transaction to execute. */
        transaction: TAccountMetas[2];
        signer: TAccountMetas[3];
    };
    data: ExecuteTransactionInstructionData;
};
export declare function parseExecuteTransactionInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedExecuteTransactionInstruction<TProgram, TAccountMetas>;
