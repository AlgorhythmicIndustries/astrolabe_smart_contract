/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const ACTIVATE_PROPOSAL_DISCRIMINATOR = new Uint8Array([
  90, 186, 203, 234, 70, 185, 191, 21,
]);

export function getActivateProposalDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    ACTIVATE_PROPOSAL_DISCRIMINATOR
  );
}

export type ActivateProposalInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountProposal extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? ReadonlyAccount<TAccountSettings>
        : TAccountSettings,
      TAccountSigner extends string
        ? WritableSignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      ...TRemainingAccounts,
    ]
  >;

export type ActivateProposalInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ActivateProposalInstructionDataArgs = {};

export function getActivateProposalInstructionDataEncoder(): FixedSizeEncoder<ActivateProposalInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: ACTIVATE_PROPOSAL_DISCRIMINATOR })
  );
}

export function getActivateProposalInstructionDataDecoder(): FixedSizeDecoder<ActivateProposalInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getActivateProposalInstructionDataCodec(): FixedSizeCodec<
  ActivateProposalInstructionDataArgs,
  ActivateProposalInstructionData
> {
  return combineCodec(
    getActivateProposalInstructionDataEncoder(),
    getActivateProposalInstructionDataDecoder()
  );
}

export type ActivateProposalInput<
  TAccountSettings extends string = string,
  TAccountSigner extends string = string,
  TAccountProposal extends string = string,
> = {
  settings: Address<TAccountSettings>;
  signer: TransactionSigner<TAccountSigner>;
  proposal: Address<TAccountProposal>;
};

export function getActivateProposalInstruction<
  TAccountSettings extends string,
  TAccountSigner extends string,
  TAccountProposal extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: ActivateProposalInput<
    TAccountSettings,
    TAccountSigner,
    TAccountProposal
  >,
  config?: { programAddress?: TProgramAddress }
): ActivateProposalInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountSigner,
  TAccountProposal
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: false },
    signer: { value: input.signer ?? null, isWritable: true },
    proposal: { value: input.proposal ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.proposal),
    ],
    data: getActivateProposalInstructionDataEncoder().encode({}),
    programAddress,
  } as ActivateProposalInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountSigner,
    TAccountProposal
  >);
}

export type ParsedActivateProposalInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    signer: TAccountMetas[1];
    proposal: TAccountMetas[2];
  };
  data: ActivateProposalInstructionData;
};

export function parseActivateProposalInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedActivateProposalInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      signer: getNextAccount(),
      proposal: getNextAccount(),
    },
    data: getActivateProposalInstructionDataDecoder().decode(instruction.data),
  };
}
