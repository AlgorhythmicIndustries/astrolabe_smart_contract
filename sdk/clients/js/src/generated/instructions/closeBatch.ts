/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type WritableAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CLOSE_BATCH_DISCRIMINATOR = new Uint8Array([
  166, 174, 35, 253, 209, 211, 181, 28,
]);

export function getCloseBatchDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(CLOSE_BATCH_DISCRIMINATOR);
}

export type CloseBatchInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountProposal extends string | AccountMeta<string> = string,
  TAccountBatch extends string | AccountMeta<string> = string,
  TAccountProposalRentCollector extends string | AccountMeta<string> = string,
  TAccountBatchRentCollector extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? ReadonlyAccount<TAccountSettings>
        : TAccountSettings,
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountBatch extends string
        ? WritableAccount<TAccountBatch>
        : TAccountBatch,
      TAccountProposalRentCollector extends string
        ? WritableAccount<TAccountProposalRentCollector>
        : TAccountProposalRentCollector,
      TAccountBatchRentCollector extends string
        ? WritableAccount<TAccountBatchRentCollector>
        : TAccountBatchRentCollector,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CloseBatchInstructionData = { discriminator: ReadonlyUint8Array };

export type CloseBatchInstructionDataArgs = {};

export function getCloseBatchInstructionDataEncoder(): FixedSizeEncoder<CloseBatchInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: CLOSE_BATCH_DISCRIMINATOR })
  );
}

export function getCloseBatchInstructionDataDecoder(): FixedSizeDecoder<CloseBatchInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getCloseBatchInstructionDataCodec(): FixedSizeCodec<
  CloseBatchInstructionDataArgs,
  CloseBatchInstructionData
> {
  return combineCodec(
    getCloseBatchInstructionDataEncoder(),
    getCloseBatchInstructionDataDecoder()
  );
}

export type CloseBatchInput<
  TAccountSettings extends string = string,
  TAccountProposal extends string = string,
  TAccountBatch extends string = string,
  TAccountProposalRentCollector extends string = string,
  TAccountBatchRentCollector extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  settings: Address<TAccountSettings>;
  /** the logic within `close_batch` does the rest of the checks. */
  proposal: Address<TAccountProposal>;
  /** `Batch` corresponding to the `proposal`. */
  batch: Address<TAccountBatch>;
  /** The rent collector for the proposal account. */
  proposalRentCollector: Address<TAccountProposalRentCollector>;
  /** The rent collector. */
  batchRentCollector: Address<TAccountBatchRentCollector>;
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getCloseBatchInstruction<
  TAccountSettings extends string,
  TAccountProposal extends string,
  TAccountBatch extends string,
  TAccountProposalRentCollector extends string,
  TAccountBatchRentCollector extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: CloseBatchInput<
    TAccountSettings,
    TAccountProposal,
    TAccountBatch,
    TAccountProposalRentCollector,
    TAccountBatchRentCollector,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CloseBatchInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountProposal,
  TAccountBatch,
  TAccountProposalRentCollector,
  TAccountBatchRentCollector,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: false },
    proposal: { value: input.proposal ?? null, isWritable: true },
    batch: { value: input.batch ?? null, isWritable: true },
    proposalRentCollector: {
      value: input.proposalRentCollector ?? null,
      isWritable: true,
    },
    batchRentCollector: {
      value: input.batchRentCollector ?? null,
      isWritable: true,
    },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.batch),
      getAccountMeta(accounts.proposalRentCollector),
      getAccountMeta(accounts.batchRentCollector),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCloseBatchInstructionDataEncoder().encode({}),
    programAddress,
  } as CloseBatchInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountProposal,
    TAccountBatch,
    TAccountProposalRentCollector,
    TAccountBatchRentCollector,
    TAccountSystemProgram
  >);
}

export type ParsedCloseBatchInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    /** the logic within `close_batch` does the rest of the checks. */
    proposal: TAccountMetas[1];
    /** `Batch` corresponding to the `proposal`. */
    batch: TAccountMetas[2];
    /** The rent collector for the proposal account. */
    proposalRentCollector: TAccountMetas[3];
    /** The rent collector. */
    batchRentCollector: TAccountMetas[4];
    systemProgram: TAccountMetas[5];
  };
  data: CloseBatchInstructionData;
};

export function parseCloseBatchInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCloseBatchInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      proposal: getNextAccount(),
      batch: getNextAccount(),
      proposalRentCollector: getNextAccount(),
      batchRentCollector: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCloseBatchInstructionDataDecoder().decode(instruction.data),
  };
}
