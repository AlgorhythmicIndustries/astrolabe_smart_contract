/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const EXECUTE_SETTINGS_TRANSACTION_DISCRIMINATOR = new Uint8Array([
  131, 210, 27, 88, 27, 204, 143, 189,
]);

export function getExecuteSettingsTransactionDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EXECUTE_SETTINGS_TRANSACTION_DISCRIMINATOR
  );
}

export type ExecuteSettingsTransactionInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountSigner extends string | AccountMeta<string> = string,
  TAccountProposal extends string | AccountMeta<string> = string,
  TAccountTransaction extends string | AccountMeta<string> = string,
  TAccountRentPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountSigner extends string
        ? ReadonlySignerAccount<TAccountSigner> &
            AccountSignerMeta<TAccountSigner>
        : TAccountSigner,
      TAccountProposal extends string
        ? WritableAccount<TAccountProposal>
        : TAccountProposal,
      TAccountTransaction extends string
        ? ReadonlyAccount<TAccountTransaction>
        : TAccountTransaction,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            AccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ExecuteSettingsTransactionInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type ExecuteSettingsTransactionInstructionDataArgs = {};

export function getExecuteSettingsTransactionInstructionDataEncoder(): FixedSizeEncoder<ExecuteSettingsTransactionInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({
      ...value,
      discriminator: EXECUTE_SETTINGS_TRANSACTION_DISCRIMINATOR,
    })
  );
}

export function getExecuteSettingsTransactionInstructionDataDecoder(): FixedSizeDecoder<ExecuteSettingsTransactionInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getExecuteSettingsTransactionInstructionDataCodec(): FixedSizeCodec<
  ExecuteSettingsTransactionInstructionDataArgs,
  ExecuteSettingsTransactionInstructionData
> {
  return combineCodec(
    getExecuteSettingsTransactionInstructionDataEncoder(),
    getExecuteSettingsTransactionInstructionDataDecoder()
  );
}

export type ExecuteSettingsTransactionInput<
  TAccountSettings extends string = string,
  TAccountSigner extends string = string,
  TAccountProposal extends string = string,
  TAccountTransaction extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /** The settings account of the smart account that owns the transaction. */
  settings: Address<TAccountSettings>;
  /** The signer on the smart account that is executing the transaction. */
  signer: TransactionSigner<TAccountSigner>;
  /** The proposal account associated with the transaction. */
  proposal: Address<TAccountProposal>;
  /** The transaction to execute. */
  transaction: Address<TAccountTransaction>;
  /**
   * The account that will be charged/credited in case the settings transaction causes space reallocation,
   * for example when adding a new signer, adding or removing a spending limit.
   * This is usually the same as `signer`, but can be a different account if needed.
   */
  rentPayer?: TransactionSigner<TAccountRentPayer>;
  /** We might need it in case reallocation is needed. */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getExecuteSettingsTransactionInstruction<
  TAccountSettings extends string,
  TAccountSigner extends string,
  TAccountProposal extends string,
  TAccountTransaction extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: ExecuteSettingsTransactionInput<
    TAccountSettings,
    TAccountSigner,
    TAccountProposal,
    TAccountTransaction,
    TAccountRentPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ExecuteSettingsTransactionInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountSigner,
  TAccountProposal,
  TAccountTransaction,
  TAccountRentPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    signer: { value: input.signer ?? null, isWritable: false },
    proposal: { value: input.proposal ?? null, isWritable: true },
    transaction: { value: input.transaction ?? null, isWritable: false },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.signer),
      getAccountMeta(accounts.proposal),
      getAccountMeta(accounts.transaction),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getExecuteSettingsTransactionInstructionDataEncoder().encode({}),
    programAddress,
  } as ExecuteSettingsTransactionInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountSigner,
    TAccountProposal,
    TAccountTransaction,
    TAccountRentPayer,
    TAccountSystemProgram
  >);
}

export type ParsedExecuteSettingsTransactionInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The settings account of the smart account that owns the transaction. */
    settings: TAccountMetas[0];
    /** The signer on the smart account that is executing the transaction. */
    signer: TAccountMetas[1];
    /** The proposal account associated with the transaction. */
    proposal: TAccountMetas[2];
    /** The transaction to execute. */
    transaction: TAccountMetas[3];
    /**
     * The account that will be charged/credited in case the settings transaction causes space reallocation,
     * for example when adding a new signer, adding or removing a spending limit.
     * This is usually the same as `signer`, but can be a different account if needed.
     */
    rentPayer?: TAccountMetas[4] | undefined;
    /** We might need it in case reallocation is needed. */
    systemProgram?: TAccountMetas[5] | undefined;
  };
  data: ExecuteSettingsTransactionInstructionData;
};

export function parseExecuteSettingsTransactionInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedExecuteSettingsTransactionInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 6) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      signer: getNextAccount(),
      proposal: getNextAccount(),
      transaction: getNextAccount(),
      rentPayer: getNextOptionalAccount(),
      systemProgram: getNextOptionalAccount(),
    },
    data: getExecuteSettingsTransactionInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
