/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
export declare const LOG_EVENT_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getLogEventDiscriminatorBytes(): ReadonlyUint8Array;
export type LogEventInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountLogAuthority extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountLogAuthority extends string ? ReadonlySignerAccount<TAccountLogAuthority> & IAccountSignerMeta<TAccountLogAuthority> : TAccountLogAuthority,
    ...TRemainingAccounts
]>;
export type LogEventInstructionData = {
    discriminator: ReadonlyUint8Array;
    accountSeeds: Array<ReadonlyUint8Array>;
    bump: number;
    event: ReadonlyUint8Array;
};
export type LogEventInstructionDataArgs = {
    accountSeeds: Array<ReadonlyUint8Array>;
    bump: number;
    event: ReadonlyUint8Array;
};
export declare function getLogEventInstructionDataEncoder(): Encoder<LogEventInstructionDataArgs>;
export declare function getLogEventInstructionDataDecoder(): Decoder<LogEventInstructionData>;
export declare function getLogEventInstructionDataCodec(): Codec<LogEventInstructionDataArgs, LogEventInstructionData>;
export type LogEventInput<TAccountLogAuthority extends string = string> = {
    logAuthority: TransactionSigner<TAccountLogAuthority>;
    accountSeeds: LogEventInstructionDataArgs['accountSeeds'];
    bump: LogEventInstructionDataArgs['bump'];
    event: LogEventInstructionDataArgs['event'];
};
export declare function getLogEventInstruction<TAccountLogAuthority extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: LogEventInput<TAccountLogAuthority>, config?: {
    programAddress?: TProgramAddress;
}): LogEventInstruction<TProgramAddress, TAccountLogAuthority>;
export type ParsedLogEventInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        logAuthority: TAccountMetas[0];
    };
    data: LogEventInstructionData;
};
export declare function parseLogEventInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedLogEventInstruction<TProgram, TAccountMetas>;
