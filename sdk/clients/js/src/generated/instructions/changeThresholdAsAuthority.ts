/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getOptionDecoder,
  getOptionEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type Option,
  type OptionOrNullable,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CHANGE_THRESHOLD_AS_AUTHORITY_DISCRIMINATOR = new Uint8Array([
  51, 141, 78, 133, 70, 47, 95, 124,
]);

export function getChangeThresholdAsAuthorityDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CHANGE_THRESHOLD_AS_AUTHORITY_DISCRIMINATOR
  );
}

export type ChangeThresholdAsAuthorityInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | IAccountMeta<string> = string,
  TAccountSettingsAuthority extends string | IAccountMeta<string> = string,
  TAccountRentPayer extends string | IAccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | IAccountMeta<string> = '11111111111111111111111111111111',
  TAccountProgram extends
    | string
    | IAccountMeta<string> = 'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD',
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountSettings extends string
        ? WritableAccount<TAccountSettings>
        : TAccountSettings,
      TAccountSettingsAuthority extends string
        ? ReadonlySignerAccount<TAccountSettingsAuthority> &
            IAccountSignerMeta<TAccountSettingsAuthority>
        : TAccountSettingsAuthority,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            IAccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ChangeThresholdAsAuthorityInstructionData = {
  discriminator: ReadonlyUint8Array;
  newThreshold: number;
  /** Memo is used for indexing only. */
  memo: Option<string>;
};

export type ChangeThresholdAsAuthorityInstructionDataArgs = {
  newThreshold: number;
  /** Memo is used for indexing only. */
  memo: OptionOrNullable<string>;
};

export function getChangeThresholdAsAuthorityInstructionDataEncoder(): Encoder<ChangeThresholdAsAuthorityInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newThreshold', getU16Encoder()],
      [
        'memo',
        getOptionEncoder(
          addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())
        ),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: CHANGE_THRESHOLD_AS_AUTHORITY_DISCRIMINATOR,
    })
  );
}

export function getChangeThresholdAsAuthorityInstructionDataDecoder(): Decoder<ChangeThresholdAsAuthorityInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newThreshold', getU16Decoder()],
    [
      'memo',
      getOptionDecoder(addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())),
    ],
  ]);
}

export function getChangeThresholdAsAuthorityInstructionDataCodec(): Codec<
  ChangeThresholdAsAuthorityInstructionDataArgs,
  ChangeThresholdAsAuthorityInstructionData
> {
  return combineCodec(
    getChangeThresholdAsAuthorityInstructionDataEncoder(),
    getChangeThresholdAsAuthorityInstructionDataDecoder()
  );
}

export type ChangeThresholdAsAuthorityInput<
  TAccountSettings extends string = string,
  TAccountSettingsAuthority extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
  TAccountProgram extends string = string,
> = {
  settings: Address<TAccountSettings>;
  /** Settings `settings_authority` that must authorize the configuration change. */
  settingsAuthority: TransactionSigner<TAccountSettingsAuthority>;
  /**
   * The account that will be charged or credited in case the settings account needs to reallocate space,
   * for example when adding a new signer or a spending limit.
   * This is usually the same as `settings_authority`, but can be a different account if needed.
   */
  rentPayer?: TransactionSigner<TAccountRentPayer>;
  /** We might need it in case reallocation is needed. */
  systemProgram?: Address<TAccountSystemProgram>;
  program?: Address<TAccountProgram>;
  newThreshold: ChangeThresholdAsAuthorityInstructionDataArgs['newThreshold'];
  memo: ChangeThresholdAsAuthorityInstructionDataArgs['memo'];
};

export function getChangeThresholdAsAuthorityInstruction<
  TAccountSettings extends string,
  TAccountSettingsAuthority extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: ChangeThresholdAsAuthorityInput<
    TAccountSettings,
    TAccountSettingsAuthority,
    TAccountRentPayer,
    TAccountSystemProgram,
    TAccountProgram
  >,
  config?: { programAddress?: TProgramAddress }
): ChangeThresholdAsAuthorityInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountSettingsAuthority,
  TAccountRentPayer,
  TAccountSystemProgram,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: true },
    settingsAuthority: {
      value: input.settingsAuthority ?? null,
      isWritable: false,
    },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }
  if (!accounts.program.value) {
    accounts.program.value =
      'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD' as Address<'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.settingsAuthority),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
      getAccountMeta(accounts.program),
    ],
    programAddress,
    data: getChangeThresholdAsAuthorityInstructionDataEncoder().encode(
      args as ChangeThresholdAsAuthorityInstructionDataArgs
    ),
  } as ChangeThresholdAsAuthorityInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountSettingsAuthority,
    TAccountRentPayer,
    TAccountSystemProgram,
    TAccountProgram
  >;

  return instruction;
}

export type ParsedChangeThresholdAsAuthorityInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    /** Settings `settings_authority` that must authorize the configuration change. */
    settingsAuthority: TAccountMetas[1];
    /**
     * The account that will be charged or credited in case the settings account needs to reallocate space,
     * for example when adding a new signer or a spending limit.
     * This is usually the same as `settings_authority`, but can be a different account if needed.
     */

    rentPayer?: TAccountMetas[2] | undefined;
    /** We might need it in case reallocation is needed. */
    systemProgram?: TAccountMetas[3] | undefined;
    program: TAccountMetas[4];
  };
  data: ChangeThresholdAsAuthorityInstructionData;
};

export function parseChangeThresholdAsAuthorityInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedChangeThresholdAsAuthorityInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  const getNextOptionalAccount = () => {
    const accountMeta = getNextAccount();
    return accountMeta.address === ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS
      ? undefined
      : accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      settingsAuthority: getNextAccount(),
      rentPayer: getNextOptionalAccount(),
      systemProgram: getNextOptionalAccount(),
      program: getNextAccount(),
    },
    data: getChangeThresholdAsAuthorityInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
