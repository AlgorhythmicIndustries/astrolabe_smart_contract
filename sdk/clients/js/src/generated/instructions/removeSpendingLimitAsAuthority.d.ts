/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
export declare const REMOVE_SPENDING_LIMIT_AS_AUTHORITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getRemoveSpendingLimitAsAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
export type RemoveSpendingLimitAsAuthorityInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | IAccountMeta<string> = string, TAccountSettingsAuthority extends string | IAccountMeta<string> = string, TAccountSpendingLimit extends string | IAccountMeta<string> = string, TAccountRentCollector extends string | IAccountMeta<string> = string, TAccountProgram extends string | IAccountMeta<string> = 'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountSettings extends string ? ReadonlyAccount<TAccountSettings> : TAccountSettings,
    TAccountSettingsAuthority extends string ? ReadonlySignerAccount<TAccountSettingsAuthority> & IAccountSignerMeta<TAccountSettingsAuthority> : TAccountSettingsAuthority,
    TAccountSpendingLimit extends string ? WritableAccount<TAccountSpendingLimit> : TAccountSpendingLimit,
    TAccountRentCollector extends string ? WritableAccount<TAccountRentCollector> : TAccountRentCollector,
    TAccountProgram extends string ? ReadonlyAccount<TAccountProgram> : TAccountProgram,
    ...TRemainingAccounts
]>;
export type RemoveSpendingLimitAsAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
    /** Memo is used for indexing only. */
    memo: Option<string>;
};
export type RemoveSpendingLimitAsAuthorityInstructionDataArgs = {
    /** Memo is used for indexing only. */
    memo: OptionOrNullable<string>;
};
export declare function getRemoveSpendingLimitAsAuthorityInstructionDataEncoder(): Encoder<RemoveSpendingLimitAsAuthorityInstructionDataArgs>;
export declare function getRemoveSpendingLimitAsAuthorityInstructionDataDecoder(): Decoder<RemoveSpendingLimitAsAuthorityInstructionData>;
export declare function getRemoveSpendingLimitAsAuthorityInstructionDataCodec(): Codec<RemoveSpendingLimitAsAuthorityInstructionDataArgs, RemoveSpendingLimitAsAuthorityInstructionData>;
export type RemoveSpendingLimitAsAuthorityInput<TAccountSettings extends string = string, TAccountSettingsAuthority extends string = string, TAccountSpendingLimit extends string = string, TAccountRentCollector extends string = string, TAccountProgram extends string = string> = {
    settings: Address<TAccountSettings>;
    /** Settings `settings_authority` that must authorize the configuration change. */
    settingsAuthority: TransactionSigner<TAccountSettingsAuthority>;
    spendingLimit: Address<TAccountSpendingLimit>;
    /** This is usually the same as `settings_authority`, but can be a different account if needed. */
    rentCollector: Address<TAccountRentCollector>;
    program?: Address<TAccountProgram>;
    memo: RemoveSpendingLimitAsAuthorityInstructionDataArgs['memo'];
};
export declare function getRemoveSpendingLimitAsAuthorityInstruction<TAccountSettings extends string, TAccountSettingsAuthority extends string, TAccountSpendingLimit extends string, TAccountRentCollector extends string, TAccountProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: RemoveSpendingLimitAsAuthorityInput<TAccountSettings, TAccountSettingsAuthority, TAccountSpendingLimit, TAccountRentCollector, TAccountProgram>, config?: {
    programAddress?: TProgramAddress;
}): RemoveSpendingLimitAsAuthorityInstruction<TProgramAddress, TAccountSettings, TAccountSettingsAuthority, TAccountSpendingLimit, TAccountRentCollector, TAccountProgram>;
export type ParsedRemoveSpendingLimitAsAuthorityInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        settings: TAccountMetas[0];
        /** Settings `settings_authority` that must authorize the configuration change. */
        settingsAuthority: TAccountMetas[1];
        spendingLimit: TAccountMetas[2];
        /** This is usually the same as `settings_authority`, but can be a different account if needed. */
        rentCollector: TAccountMetas[3];
        program: TAccountMetas[4];
    };
    data: RemoveSpendingLimitAsAuthorityInstructionData;
};
export declare function parseRemoveSpendingLimitAsAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedRemoveSpendingLimitAsAuthorityInstruction<TProgram, TAccountMetas>;
