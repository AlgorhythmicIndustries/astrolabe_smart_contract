"use strict";
/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EXECUTE_BATCH_TRANSACTION_DISCRIMINATOR = void 0;
exports.getExecuteBatchTransactionDiscriminatorBytes = getExecuteBatchTransactionDiscriminatorBytes;
exports.getExecuteBatchTransactionInstructionDataEncoder = getExecuteBatchTransactionInstructionDataEncoder;
exports.getExecuteBatchTransactionInstructionDataDecoder = getExecuteBatchTransactionInstructionDataDecoder;
exports.getExecuteBatchTransactionInstructionDataCodec = getExecuteBatchTransactionInstructionDataCodec;
exports.getExecuteBatchTransactionInstruction = getExecuteBatchTransactionInstruction;
exports.parseExecuteBatchTransactionInstruction = parseExecuteBatchTransactionInstruction;
var kit_1 = require("@solana/kit");
var programs_1 = require("../programs");
var shared_1 = require("../shared");
exports.EXECUTE_BATCH_TRANSACTION_DISCRIMINATOR = new Uint8Array([
    237, 67, 201, 173, 33, 130, 88, 134,
]);
function getExecuteBatchTransactionDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.EXECUTE_BATCH_TRANSACTION_DISCRIMINATOR);
}
function getExecuteBatchTransactionInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)]]), function (value) { return (__assign(__assign({}, value), { discriminator: exports.EXECUTE_BATCH_TRANSACTION_DISCRIMINATOR })); });
}
function getExecuteBatchTransactionInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
    ]);
}
function getExecuteBatchTransactionInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getExecuteBatchTransactionInstructionDataEncoder(), getExecuteBatchTransactionInstructionDataDecoder());
}
function getExecuteBatchTransactionInstruction(input, config) {
    var _a, _b, _c, _d, _e, _f;
    // Program address.
    var programAddress = (_a = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _a !== void 0 ? _a : programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;
    // Original accounts.
    var originalAccounts = {
        settings: { value: (_b = input.settings) !== null && _b !== void 0 ? _b : null, isWritable: false },
        signer: { value: (_c = input.signer) !== null && _c !== void 0 ? _c : null, isWritable: false },
        proposal: { value: (_d = input.proposal) !== null && _d !== void 0 ? _d : null, isWritable: true },
        batch: { value: (_e = input.batch) !== null && _e !== void 0 ? _e : null, isWritable: true },
        transaction: { value: (_f = input.transaction) !== null && _f !== void 0 ? _f : null, isWritable: false },
    };
    var accounts = originalAccounts;
    var getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    return Object.freeze({
        accounts: [
            getAccountMeta(accounts.settings),
            getAccountMeta(accounts.signer),
            getAccountMeta(accounts.proposal),
            getAccountMeta(accounts.batch),
            getAccountMeta(accounts.transaction),
        ],
        data: getExecuteBatchTransactionInstructionDataEncoder().encode({}),
        programAddress: programAddress,
    });
}
function parseExecuteBatchTransactionInstruction(instruction) {
    if (instruction.accounts.length < 5) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    var accountIndex = 0;
    var getNextAccount = function () {
        var accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            settings: getNextAccount(),
            signer: getNextAccount(),
            proposal: getNextAccount(),
            batch: getNextAccount(),
            transaction: getNextAccount(),
        },
        data: getExecuteBatchTransactionInstructionDataDecoder().decode(instruction.data),
    };
}
