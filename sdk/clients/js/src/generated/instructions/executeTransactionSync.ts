/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const EXECUTE_TRANSACTION_SYNC_DISCRIMINATOR = new Uint8Array([
  43, 102, 248, 89, 231, 97, 104, 134,
]);

export function getExecuteTransactionSyncDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    EXECUTE_TRANSACTION_SYNC_DISCRIMINATOR
  );
}

export type ExecuteTransactionSyncInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountProgram extends
    | string
    | AccountMeta<string> = 'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? ReadonlyAccount<TAccountSettings>
        : TAccountSettings,
      TAccountProgram extends string
        ? ReadonlyAccount<TAccountProgram>
        : TAccountProgram,
      ...TRemainingAccounts,
    ]
  >;

export type ExecuteTransactionSyncInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** The index of the smart account this transaction is for */
  accountIndex: number;
  /** The number of signers to reach threshold and adequate permissions */
  numSigners: number;
  /** Expected to be serialized as a Vec<u8, CompiledInstruction> */
  instructions: ReadonlyUint8Array;
};

export type ExecuteTransactionSyncInstructionDataArgs = {
  /** The index of the smart account this transaction is for */
  accountIndex: number;
  /** The number of signers to reach threshold and adequate permissions */
  numSigners: number;
  /** Expected to be serialized as a Vec<u8, CompiledInstruction> */
  instructions: ReadonlyUint8Array;
};

export function getExecuteTransactionSyncInstructionDataEncoder(): Encoder<ExecuteTransactionSyncInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['accountIndex', getU8Encoder()],
      ['numSigners', getU8Encoder()],
      [
        'instructions',
        addEncoderSizePrefix(getBytesEncoder(), getU32Encoder()),
      ],
    ]),
    (value) => ({
      ...value,
      discriminator: EXECUTE_TRANSACTION_SYNC_DISCRIMINATOR,
    })
  );
}

export function getExecuteTransactionSyncInstructionDataDecoder(): Decoder<ExecuteTransactionSyncInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['accountIndex', getU8Decoder()],
    ['numSigners', getU8Decoder()],
    ['instructions', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getExecuteTransactionSyncInstructionDataCodec(): Codec<
  ExecuteTransactionSyncInstructionDataArgs,
  ExecuteTransactionSyncInstructionData
> {
  return combineCodec(
    getExecuteTransactionSyncInstructionDataEncoder(),
    getExecuteTransactionSyncInstructionDataDecoder()
  );
}

export type ExecuteTransactionSyncInput<
  TAccountSettings extends string = string,
  TAccountProgram extends string = string,
> = {
  settings: Address<TAccountSettings>;
  program?: Address<TAccountProgram>;
  accountIndex: ExecuteTransactionSyncInstructionDataArgs['accountIndex'];
  numSigners: ExecuteTransactionSyncInstructionDataArgs['numSigners'];
  instructions: ExecuteTransactionSyncInstructionDataArgs['instructions'];
};

export function getExecuteTransactionSyncInstruction<
  TAccountSettings extends string,
  TAccountProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: ExecuteTransactionSyncInput<TAccountSettings, TAccountProgram>,
  config?: { programAddress?: TProgramAddress }
): ExecuteTransactionSyncInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: false },
    program: { value: input.program ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.program.value) {
    accounts.program.value =
      'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q' as Address<'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.program),
    ],
    data: getExecuteTransactionSyncInstructionDataEncoder().encode(
      args as ExecuteTransactionSyncInstructionDataArgs
    ),
    programAddress,
  } as ExecuteTransactionSyncInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountProgram
  >);
}

export type ParsedExecuteTransactionSyncInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    program: TAccountMetas[1];
  };
  data: ExecuteTransactionSyncInstructionData;
};

export function parseExecuteTransactionSyncInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedExecuteTransactionSyncInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { settings: getNextAccount(), program: getNextAccount() },
    data: getExecuteTransactionSyncInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
