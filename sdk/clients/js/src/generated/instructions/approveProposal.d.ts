/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { type VoteOnProposalArgs, type VoteOnProposalArgsArgs } from '../types';
export declare const APPROVE_PROPOSAL_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getApproveProposalDiscriminatorBytes(): ReadonlyUint8Array;
export type ApproveProposalInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | IAccountMeta<string> = string, TAccountSigner extends string | IAccountMeta<string> = string, TAccountProposal extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountSettings extends string ? ReadonlyAccount<TAccountSettings> : TAccountSettings,
    TAccountSigner extends string ? WritableSignerAccount<TAccountSigner> & IAccountSignerMeta<TAccountSigner> : TAccountSigner,
    TAccountProposal extends string ? WritableAccount<TAccountProposal> : TAccountProposal,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
export type ApproveProposalInstructionData = {
    discriminator: ReadonlyUint8Array;
    args: VoteOnProposalArgs;
};
export type ApproveProposalInstructionDataArgs = {
    args: VoteOnProposalArgsArgs;
};
export declare function getApproveProposalInstructionDataEncoder(): Encoder<ApproveProposalInstructionDataArgs>;
export declare function getApproveProposalInstructionDataDecoder(): Decoder<ApproveProposalInstructionData>;
export declare function getApproveProposalInstructionDataCodec(): Codec<ApproveProposalInstructionDataArgs, ApproveProposalInstructionData>;
export type ApproveProposalInput<TAccountSettings extends string = string, TAccountSigner extends string = string, TAccountProposal extends string = string, TAccountSystemProgram extends string = string> = {
    settings: Address<TAccountSettings>;
    signer: TransactionSigner<TAccountSigner>;
    proposal: Address<TAccountProposal>;
    systemProgram?: Address<TAccountSystemProgram>;
    args: ApproveProposalInstructionDataArgs['args'];
};
export declare function getApproveProposalInstruction<TAccountSettings extends string, TAccountSigner extends string, TAccountProposal extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: ApproveProposalInput<TAccountSettings, TAccountSigner, TAccountProposal, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): ApproveProposalInstruction<TProgramAddress, TAccountSettings, TAccountSigner, TAccountProposal, TAccountSystemProgram>;
export type ParsedApproveProposalInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        settings: TAccountMetas[0];
        signer: TAccountMetas[1];
        proposal: TAccountMetas[2];
        systemProgram?: TAccountMetas[3] | undefined;
    };
    data: ApproveProposalInstructionData;
};
export declare function parseApproveProposalInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedApproveProposalInstruction<TProgram, TAccountMetas>;
