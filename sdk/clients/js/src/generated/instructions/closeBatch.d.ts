/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type WritableAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
export declare const CLOSE_BATCH_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getCloseBatchDiscriminatorBytes(): ReadonlyUint8Array;
export type CloseBatchInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | IAccountMeta<string> = string, TAccountProposal extends string | IAccountMeta<string> = string, TAccountBatch extends string | IAccountMeta<string> = string, TAccountProposalRentCollector extends string | IAccountMeta<string> = string, TAccountBatchRentCollector extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountSettings extends string ? ReadonlyAccount<TAccountSettings> : TAccountSettings,
    TAccountProposal extends string ? WritableAccount<TAccountProposal> : TAccountProposal,
    TAccountBatch extends string ? WritableAccount<TAccountBatch> : TAccountBatch,
    TAccountProposalRentCollector extends string ? WritableAccount<TAccountProposalRentCollector> : TAccountProposalRentCollector,
    TAccountBatchRentCollector extends string ? WritableAccount<TAccountBatchRentCollector> : TAccountBatchRentCollector,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
export type CloseBatchInstructionData = {
    discriminator: ReadonlyUint8Array;
};
export type CloseBatchInstructionDataArgs = {};
export declare function getCloseBatchInstructionDataEncoder(): Encoder<CloseBatchInstructionDataArgs>;
export declare function getCloseBatchInstructionDataDecoder(): Decoder<CloseBatchInstructionData>;
export declare function getCloseBatchInstructionDataCodec(): Codec<CloseBatchInstructionDataArgs, CloseBatchInstructionData>;
export type CloseBatchInput<TAccountSettings extends string = string, TAccountProposal extends string = string, TAccountBatch extends string = string, TAccountProposalRentCollector extends string = string, TAccountBatchRentCollector extends string = string, TAccountSystemProgram extends string = string> = {
    settings: Address<TAccountSettings>;
    /** the logic within `close_batch` does the rest of the checks. */
    proposal: Address<TAccountProposal>;
    /** `Batch` corresponding to the `proposal`. */
    batch: Address<TAccountBatch>;
    /** The rent collector for the proposal account. */
    proposalRentCollector: Address<TAccountProposalRentCollector>;
    /** The rent collector. */
    batchRentCollector: Address<TAccountBatchRentCollector>;
    systemProgram?: Address<TAccountSystemProgram>;
};
export declare function getCloseBatchInstruction<TAccountSettings extends string, TAccountProposal extends string, TAccountBatch extends string, TAccountProposalRentCollector extends string, TAccountBatchRentCollector extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: CloseBatchInput<TAccountSettings, TAccountProposal, TAccountBatch, TAccountProposalRentCollector, TAccountBatchRentCollector, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): CloseBatchInstruction<TProgramAddress, TAccountSettings, TAccountProposal, TAccountBatch, TAccountProposalRentCollector, TAccountBatchRentCollector, TAccountSystemProgram>;
export type ParsedCloseBatchInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        settings: TAccountMetas[0];
        /** the logic within `close_batch` does the rest of the checks. */
        proposal: TAccountMetas[1];
        /** `Batch` corresponding to the `proposal`. */
        batch: TAccountMetas[2];
        /** The rent collector for the proposal account. */
        proposalRentCollector: TAccountMetas[3];
        /** The rent collector. */
        batchRentCollector: TAccountMetas[4];
        systemProgram: TAccountMetas[5];
    };
    data: CloseBatchInstructionData;
};
export declare function parseCloseBatchInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedCloseBatchInstruction<TProgram, TAccountMetas>;
