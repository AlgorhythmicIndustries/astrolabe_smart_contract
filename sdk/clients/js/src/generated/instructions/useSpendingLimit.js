"use strict";
/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.USE_SPENDING_LIMIT_DISCRIMINATOR = void 0;
exports.getUseSpendingLimitDiscriminatorBytes = getUseSpendingLimitDiscriminatorBytes;
exports.getUseSpendingLimitInstructionDataEncoder = getUseSpendingLimitInstructionDataEncoder;
exports.getUseSpendingLimitInstructionDataDecoder = getUseSpendingLimitInstructionDataDecoder;
exports.getUseSpendingLimitInstructionDataCodec = getUseSpendingLimitInstructionDataCodec;
exports.getUseSpendingLimitInstruction = getUseSpendingLimitInstruction;
exports.parseUseSpendingLimitInstruction = parseUseSpendingLimitInstruction;
var kit_1 = require("@solana/kit");
var programs_1 = require("../programs");
var shared_1 = require("../shared");
exports.USE_SPENDING_LIMIT_DISCRIMINATOR = new Uint8Array([
    41, 179, 70, 5, 194, 147, 239, 158,
]);
function getUseSpendingLimitDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.USE_SPENDING_LIMIT_DISCRIMINATOR);
}
function getUseSpendingLimitInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['amount', (0, kit_1.getU64Encoder)()],
        ['decimals', (0, kit_1.getU8Encoder)()],
        [
            'memo',
            (0, kit_1.getOptionEncoder)((0, kit_1.addEncoderSizePrefix)((0, kit_1.getUtf8Encoder)(), (0, kit_1.getU32Encoder)())),
        ],
    ]), function (value) { return (__assign(__assign({}, value), { discriminator: exports.USE_SPENDING_LIMIT_DISCRIMINATOR })); });
}
function getUseSpendingLimitInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['amount', (0, kit_1.getU64Decoder)()],
        ['decimals', (0, kit_1.getU8Decoder)()],
        [
            'memo',
            (0, kit_1.getOptionDecoder)((0, kit_1.addDecoderSizePrefix)((0, kit_1.getUtf8Decoder)(), (0, kit_1.getU32Decoder)())),
        ],
    ]);
}
function getUseSpendingLimitInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getUseSpendingLimitInstructionDataEncoder(), getUseSpendingLimitInstructionDataDecoder());
}
function getUseSpendingLimitInstruction(input, config) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
    // Program address.
    var programAddress = (_a = config === null || config === void 0 ? void 0 : config.programAddress) !== null && _a !== void 0 ? _a : programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;
    // Original accounts.
    var originalAccounts = {
        settings: { value: (_b = input.settings) !== null && _b !== void 0 ? _b : null, isWritable: false },
        signer: { value: (_c = input.signer) !== null && _c !== void 0 ? _c : null, isWritable: false },
        spendingLimit: { value: (_d = input.spendingLimit) !== null && _d !== void 0 ? _d : null, isWritable: true },
        smartAccount: { value: (_e = input.smartAccount) !== null && _e !== void 0 ? _e : null, isWritable: true },
        destination: { value: (_f = input.destination) !== null && _f !== void 0 ? _f : null, isWritable: true },
        systemProgram: { value: (_g = input.systemProgram) !== null && _g !== void 0 ? _g : null, isWritable: false },
        mint: { value: (_h = input.mint) !== null && _h !== void 0 ? _h : null, isWritable: false },
        smartAccountTokenAccount: {
            value: (_j = input.smartAccountTokenAccount) !== null && _j !== void 0 ? _j : null,
            isWritable: true,
        },
        destinationTokenAccount: {
            value: (_k = input.destinationTokenAccount) !== null && _k !== void 0 ? _k : null,
            isWritable: true,
        },
        tokenProgram: { value: (_l = input.tokenProgram) !== null && _l !== void 0 ? _l : null, isWritable: false },
        program: { value: (_m = input.program) !== null && _m !== void 0 ? _m : null, isWritable: false },
    };
    var accounts = originalAccounts;
    // Original args.
    var args = __assign({}, input);
    // Resolve default values.
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111';
    }
    if (!accounts.program.value) {
        accounts.program.value =
            'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q';
    }
    var getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    return Object.freeze({
        accounts: [
            getAccountMeta(accounts.settings),
            getAccountMeta(accounts.signer),
            getAccountMeta(accounts.spendingLimit),
            getAccountMeta(accounts.smartAccount),
            getAccountMeta(accounts.destination),
            getAccountMeta(accounts.systemProgram),
            getAccountMeta(accounts.mint),
            getAccountMeta(accounts.smartAccountTokenAccount),
            getAccountMeta(accounts.destinationTokenAccount),
            getAccountMeta(accounts.tokenProgram),
            getAccountMeta(accounts.program),
        ],
        data: getUseSpendingLimitInstructionDataEncoder().encode(args),
        programAddress: programAddress,
    });
}
function parseUseSpendingLimitInstruction(instruction) {
    if (instruction.accounts.length < 11) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    var accountIndex = 0;
    var getNextAccount = function () {
        var accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    var getNextOptionalAccount = function () {
        var accountMeta = getNextAccount();
        return accountMeta.address === programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS
            ? undefined
            : accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            settings: getNextAccount(),
            signer: getNextAccount(),
            spendingLimit: getNextAccount(),
            smartAccount: getNextAccount(),
            destination: getNextAccount(),
            systemProgram: getNextOptionalAccount(),
            mint: getNextOptionalAccount(),
            smartAccountTokenAccount: getNextOptionalAccount(),
            destinationTokenAccount: getNextOptionalAccount(),
            tokenProgram: getNextOptionalAccount(),
            program: getNextAccount(),
        },
        data: getUseSpendingLimitInstructionDataDecoder().decode(instruction.data),
    };
}
