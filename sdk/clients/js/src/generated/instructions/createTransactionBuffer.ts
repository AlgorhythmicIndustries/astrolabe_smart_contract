/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU16Decoder,
  getU16Encoder,
  getU32Decoder,
  getU32Encoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const CREATE_TRANSACTION_BUFFER_DISCRIMINATOR = new Uint8Array([
  57, 97, 250, 156, 59, 211, 32, 208,
]);

export function getCreateTransactionBufferDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    CREATE_TRANSACTION_BUFFER_DISCRIMINATOR
  );
}

export type CreateTransactionBufferInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountSettings extends string | AccountMeta<string> = string,
  TAccountTransactionBuffer extends string | AccountMeta<string> = string,
  TAccountBufferCreator extends string | AccountMeta<string> = string,
  TAccountRentPayer extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountSettings extends string
        ? ReadonlyAccount<TAccountSettings>
        : TAccountSettings,
      TAccountTransactionBuffer extends string
        ? WritableAccount<TAccountTransactionBuffer>
        : TAccountTransactionBuffer,
      TAccountBufferCreator extends string
        ? ReadonlySignerAccount<TAccountBufferCreator> &
            AccountSignerMeta<TAccountBufferCreator>
        : TAccountBufferCreator,
      TAccountRentPayer extends string
        ? WritableSignerAccount<TAccountRentPayer> &
            AccountSignerMeta<TAccountRentPayer>
        : TAccountRentPayer,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type CreateTransactionBufferInstructionData = {
  discriminator: ReadonlyUint8Array;
  /** Index of the buffer account to seed the account derivation */
  bufferIndex: number;
  /** Index of the smart account this transaction belongs to. */
  accountIndex: number;
  /** Hash of the final assembled transaction message. */
  finalBufferHash: ReadonlyUint8Array;
  /** Final size of the buffer. */
  finalBufferSize: number;
  /** Initial slice of the buffer. */
  buffer: ReadonlyUint8Array;
};

export type CreateTransactionBufferInstructionDataArgs = {
  /** Index of the buffer account to seed the account derivation */
  bufferIndex: number;
  /** Index of the smart account this transaction belongs to. */
  accountIndex: number;
  /** Hash of the final assembled transaction message. */
  finalBufferHash: ReadonlyUint8Array;
  /** Final size of the buffer. */
  finalBufferSize: number;
  /** Initial slice of the buffer. */
  buffer: ReadonlyUint8Array;
};

export function getCreateTransactionBufferInstructionDataEncoder(): Encoder<CreateTransactionBufferInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['bufferIndex', getU8Encoder()],
      ['accountIndex', getU8Encoder()],
      ['finalBufferHash', fixEncoderSize(getBytesEncoder(), 32)],
      ['finalBufferSize', getU16Encoder()],
      ['buffer', addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())],
    ]),
    (value) => ({
      ...value,
      discriminator: CREATE_TRANSACTION_BUFFER_DISCRIMINATOR,
    })
  );
}

export function getCreateTransactionBufferInstructionDataDecoder(): Decoder<CreateTransactionBufferInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['bufferIndex', getU8Decoder()],
    ['accountIndex', getU8Decoder()],
    ['finalBufferHash', fixDecoderSize(getBytesDecoder(), 32)],
    ['finalBufferSize', getU16Decoder()],
    ['buffer', addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())],
  ]);
}

export function getCreateTransactionBufferInstructionDataCodec(): Codec<
  CreateTransactionBufferInstructionDataArgs,
  CreateTransactionBufferInstructionData
> {
  return combineCodec(
    getCreateTransactionBufferInstructionDataEncoder(),
    getCreateTransactionBufferInstructionDataDecoder()
  );
}

export type CreateTransactionBufferInput<
  TAccountSettings extends string = string,
  TAccountTransactionBuffer extends string = string,
  TAccountBufferCreator extends string = string,
  TAccountRentPayer extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  settings: Address<TAccountSettings>;
  transactionBuffer: Address<TAccountTransactionBuffer>;
  /** The signer on the smart account that is creating the transaction. */
  bufferCreator: TransactionSigner<TAccountBufferCreator>;
  /** The payer for the transaction account rent. */
  rentPayer: TransactionSigner<TAccountRentPayer>;
  systemProgram?: Address<TAccountSystemProgram>;
  bufferIndex: CreateTransactionBufferInstructionDataArgs['bufferIndex'];
  accountIndex: CreateTransactionBufferInstructionDataArgs['accountIndex'];
  finalBufferHash: CreateTransactionBufferInstructionDataArgs['finalBufferHash'];
  finalBufferSize: CreateTransactionBufferInstructionDataArgs['finalBufferSize'];
  buffer: CreateTransactionBufferInstructionDataArgs['buffer'];
};

export function getCreateTransactionBufferInstruction<
  TAccountSettings extends string,
  TAccountTransactionBuffer extends string,
  TAccountBufferCreator extends string,
  TAccountRentPayer extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends
    Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
>(
  input: CreateTransactionBufferInput<
    TAccountSettings,
    TAccountTransactionBuffer,
    TAccountBufferCreator,
    TAccountRentPayer,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): CreateTransactionBufferInstruction<
  TProgramAddress,
  TAccountSettings,
  TAccountTransactionBuffer,
  TAccountBufferCreator,
  TAccountRentPayer,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress =
    config?.programAddress ?? ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    settings: { value: input.settings ?? null, isWritable: false },
    transactionBuffer: {
      value: input.transactionBuffer ?? null,
      isWritable: true,
    },
    bufferCreator: { value: input.bufferCreator ?? null, isWritable: false },
    rentPayer: { value: input.rentPayer ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.settings),
      getAccountMeta(accounts.transactionBuffer),
      getAccountMeta(accounts.bufferCreator),
      getAccountMeta(accounts.rentPayer),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getCreateTransactionBufferInstructionDataEncoder().encode(
      args as CreateTransactionBufferInstructionDataArgs
    ),
    programAddress,
  } as CreateTransactionBufferInstruction<
    TProgramAddress,
    TAccountSettings,
    TAccountTransactionBuffer,
    TAccountBufferCreator,
    TAccountRentPayer,
    TAccountSystemProgram
  >);
}

export type ParsedCreateTransactionBufferInstruction<
  TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    settings: TAccountMetas[0];
    transactionBuffer: TAccountMetas[1];
    /** The signer on the smart account that is creating the transaction. */
    bufferCreator: TAccountMetas[2];
    /** The payer for the transaction account rent. */
    rentPayer: TAccountMetas[3];
    systemProgram: TAccountMetas[4];
  };
  data: CreateTransactionBufferInstructionData;
};

export function parseCreateTransactionBufferInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedCreateTransactionBufferInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 5) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      settings: getNextAccount(),
      transactionBuffer: getNextAccount(),
      bufferCreator: getNextAccount(),
      rentPayer: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getCreateTransactionBufferInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
