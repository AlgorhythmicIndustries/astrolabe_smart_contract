/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
export declare const EXTEND_TRANSACTION_BUFFER_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getExtendTransactionBufferDiscriminatorBytes(): ReadonlyUint8Array;
export type ExtendTransactionBufferInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | IAccountMeta<string> = string, TAccountTransactionBuffer extends string | IAccountMeta<string> = string, TAccountCreator extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountSettings extends string ? ReadonlyAccount<TAccountSettings> : TAccountSettings,
    TAccountTransactionBuffer extends string ? WritableAccount<TAccountTransactionBuffer> : TAccountTransactionBuffer,
    TAccountCreator extends string ? ReadonlySignerAccount<TAccountCreator> & IAccountSignerMeta<TAccountCreator> : TAccountCreator,
    ...TRemainingAccounts
]>;
export type ExtendTransactionBufferInstructionData = {
    discriminator: ReadonlyUint8Array;
    buffer: ReadonlyUint8Array;
};
export type ExtendTransactionBufferInstructionDataArgs = {
    buffer: ReadonlyUint8Array;
};
export declare function getExtendTransactionBufferInstructionDataEncoder(): Encoder<ExtendTransactionBufferInstructionDataArgs>;
export declare function getExtendTransactionBufferInstructionDataDecoder(): Decoder<ExtendTransactionBufferInstructionData>;
export declare function getExtendTransactionBufferInstructionDataCodec(): Codec<ExtendTransactionBufferInstructionDataArgs, ExtendTransactionBufferInstructionData>;
export type ExtendTransactionBufferInput<TAccountSettings extends string = string, TAccountTransactionBuffer extends string = string, TAccountCreator extends string = string> = {
    settings: Address<TAccountSettings>;
    transactionBuffer: Address<TAccountTransactionBuffer>;
    /** The signer on the smart account that created the TransactionBuffer. */
    creator: TransactionSigner<TAccountCreator>;
    buffer: ExtendTransactionBufferInstructionDataArgs['buffer'];
};
export declare function getExtendTransactionBufferInstruction<TAccountSettings extends string, TAccountTransactionBuffer extends string, TAccountCreator extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: ExtendTransactionBufferInput<TAccountSettings, TAccountTransactionBuffer, TAccountCreator>, config?: {
    programAddress?: TProgramAddress;
}): ExtendTransactionBufferInstruction<TProgramAddress, TAccountSettings, TAccountTransactionBuffer, TAccountCreator>;
export type ParsedExtendTransactionBufferInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        settings: TAccountMetas[0];
        transactionBuffer: TAccountMetas[1];
        /** The signer on the smart account that created the TransactionBuffer. */
        creator: TAccountMetas[2];
    };
    data: ExtendTransactionBufferInstructionData;
};
export declare function parseExtendTransactionBufferInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedExtendTransactionBufferInstruction<TProgram, TAccountMetas>;
