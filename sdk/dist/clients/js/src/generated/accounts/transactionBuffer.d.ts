/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { fetchEncodedAccount, fetchEncodedAccounts, type Account, type Address, type Codec, type Decoder, type EncodedAccount, type Encoder, type FetchAccountConfig, type FetchAccountsConfig, type MaybeAccount, type MaybeEncodedAccount, type ReadonlyUint8Array } from '@solana/kit';
export declare const TRANSACTION_BUFFER_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getTransactionBufferDiscriminatorBytes(): ReadonlyUint8Array;
export type TransactionBuffer = {
    discriminator: ReadonlyUint8Array;
    /** The settings this belongs to. */
    settings: Address;
    /** Signer of the smart account who created the TransactionBuffer. */
    creator: Address;
    /** Index to seed address derivation */
    bufferIndex: number;
    /** Smart account index of the transaction this buffer belongs to. */
    accountIndex: number;
    /** Hash of the final assembled transaction message. */
    finalBufferHash: ReadonlyUint8Array;
    /** The size of the final assembled transaction message. */
    finalBufferSize: number;
    /** The buffer of the transaction message. */
    buffer: ReadonlyUint8Array;
};
export type TransactionBufferArgs = {
    /** The settings this belongs to. */
    settings: Address;
    /** Signer of the smart account who created the TransactionBuffer. */
    creator: Address;
    /** Index to seed address derivation */
    bufferIndex: number;
    /** Smart account index of the transaction this buffer belongs to. */
    accountIndex: number;
    /** Hash of the final assembled transaction message. */
    finalBufferHash: ReadonlyUint8Array;
    /** The size of the final assembled transaction message. */
    finalBufferSize: number;
    /** The buffer of the transaction message. */
    buffer: ReadonlyUint8Array;
};
export declare function getTransactionBufferEncoder(): Encoder<TransactionBufferArgs>;
export declare function getTransactionBufferDecoder(): Decoder<TransactionBuffer>;
export declare function getTransactionBufferCodec(): Codec<TransactionBufferArgs, TransactionBuffer>;
export declare function decodeTransactionBuffer<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<TransactionBuffer, TAddress>;
export declare function decodeTransactionBuffer<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<TransactionBuffer, TAddress>;
export declare function fetchTransactionBuffer<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<TransactionBuffer, TAddress>>;
export declare function fetchMaybeTransactionBuffer<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<TransactionBuffer, TAddress>>;
export declare function fetchAllTransactionBuffer(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<TransactionBuffer>[]>;
export declare function fetchAllMaybeTransactionBuffer(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<TransactionBuffer>[]>;
