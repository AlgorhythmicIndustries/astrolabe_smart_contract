"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PROPOSAL_DISCRIMINATOR = void 0;
exports.getProposalDiscriminatorBytes = getProposalDiscriminatorBytes;
exports.getProposalEncoder = getProposalEncoder;
exports.getProposalDecoder = getProposalDecoder;
exports.getProposalCodec = getProposalCodec;
exports.decodeProposal = decodeProposal;
exports.fetchProposal = fetchProposal;
exports.fetchMaybeProposal = fetchMaybeProposal;
exports.fetchAllProposal = fetchAllProposal;
exports.fetchAllMaybeProposal = fetchAllMaybeProposal;
const kit_1 = require("@solana/kit");
const types_1 = require("../types");
exports.PROPOSAL_DISCRIMINATOR = new Uint8Array([
    26, 94, 189, 187, 116, 136, 53, 33,
]);
function getProposalDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.PROPOSAL_DISCRIMINATOR);
}
function getProposalEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['settings', (0, kit_1.getAddressEncoder)()],
        ['transactionIndex', (0, kit_1.getU64Encoder)()],
        ['rentCollector', (0, kit_1.getAddressEncoder)()],
        ['status', (0, types_1.getProposalStatusEncoder)()],
        ['bump', (0, kit_1.getU8Encoder)()],
        ['approved', (0, kit_1.getArrayEncoder)((0, kit_1.getAddressEncoder)())],
        ['rejected', (0, kit_1.getArrayEncoder)((0, kit_1.getAddressEncoder)())],
        ['cancelled', (0, kit_1.getArrayEncoder)((0, kit_1.getAddressEncoder)())],
    ]), (value) => ({ ...value, discriminator: exports.PROPOSAL_DISCRIMINATOR }));
}
function getProposalDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['settings', (0, kit_1.getAddressDecoder)()],
        ['transactionIndex', (0, kit_1.getU64Decoder)()],
        ['rentCollector', (0, kit_1.getAddressDecoder)()],
        ['status', (0, types_1.getProposalStatusDecoder)()],
        ['bump', (0, kit_1.getU8Decoder)()],
        ['approved', (0, kit_1.getArrayDecoder)((0, kit_1.getAddressDecoder)())],
        ['rejected', (0, kit_1.getArrayDecoder)((0, kit_1.getAddressDecoder)())],
        ['cancelled', (0, kit_1.getArrayDecoder)((0, kit_1.getAddressDecoder)())],
    ]);
}
function getProposalCodec() {
    return (0, kit_1.combineCodec)(getProposalEncoder(), getProposalDecoder());
}
function decodeProposal(encodedAccount) {
    return (0, kit_1.decodeAccount)(encodedAccount, getProposalDecoder());
}
async function fetchProposal(rpc, address, config) {
    const maybeAccount = await fetchMaybeProposal(rpc, address, config);
    (0, kit_1.assertAccountExists)(maybeAccount);
    return maybeAccount;
}
async function fetchMaybeProposal(rpc, address, config) {
    const maybeAccount = await (0, kit_1.fetchEncodedAccount)(rpc, address, config);
    return decodeProposal(maybeAccount);
}
async function fetchAllProposal(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeProposal(rpc, addresses, config);
    (0, kit_1.assertAccountsExist)(maybeAccounts);
    return maybeAccounts;
}
async function fetchAllMaybeProposal(rpc, addresses, config) {
    const maybeAccounts = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeProposal(maybeAccount));
}
