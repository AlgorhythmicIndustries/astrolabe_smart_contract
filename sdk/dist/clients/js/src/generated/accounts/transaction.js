"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TRANSACTION_DISCRIMINATOR = void 0;
exports.getTransactionDiscriminatorBytes = getTransactionDiscriminatorBytes;
exports.getTransactionEncoder = getTransactionEncoder;
exports.getTransactionDecoder = getTransactionDecoder;
exports.getTransactionCodec = getTransactionCodec;
exports.decodeTransaction = decodeTransaction;
exports.fetchTransaction = fetchTransaction;
exports.fetchMaybeTransaction = fetchMaybeTransaction;
exports.fetchAllTransaction = fetchAllTransaction;
exports.fetchAllMaybeTransaction = fetchAllMaybeTransaction;
const kit_1 = require("@solana/kit");
const types_1 = require("../types");
exports.TRANSACTION_DISCRIMINATOR = new Uint8Array([
    11, 24, 174, 129, 203, 117, 242, 23,
]);
function getTransactionDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.TRANSACTION_DISCRIMINATOR);
}
function getTransactionEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['settings', (0, kit_1.getAddressEncoder)()],
        ['creator', (0, kit_1.getAddressEncoder)()],
        ['rentCollector', (0, kit_1.getAddressEncoder)()],
        ['index', (0, kit_1.getU64Encoder)()],
        ['bump', (0, kit_1.getU8Encoder)()],
        ['accountIndex', (0, kit_1.getU8Encoder)()],
        ['accountBump', (0, kit_1.getU8Encoder)()],
        [
            'ephemeralSignerBumps',
            (0, kit_1.addEncoderSizePrefix)((0, kit_1.getBytesEncoder)(), (0, kit_1.getU32Encoder)()),
        ],
        ['message', (0, types_1.getSmartAccountTransactionMessageEncoder)()],
    ]), (value) => ({ ...value, discriminator: exports.TRANSACTION_DISCRIMINATOR }));
}
function getTransactionDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['settings', (0, kit_1.getAddressDecoder)()],
        ['creator', (0, kit_1.getAddressDecoder)()],
        ['rentCollector', (0, kit_1.getAddressDecoder)()],
        ['index', (0, kit_1.getU64Decoder)()],
        ['bump', (0, kit_1.getU8Decoder)()],
        ['accountIndex', (0, kit_1.getU8Decoder)()],
        ['accountBump', (0, kit_1.getU8Decoder)()],
        [
            'ephemeralSignerBumps',
            (0, kit_1.addDecoderSizePrefix)((0, kit_1.getBytesDecoder)(), (0, kit_1.getU32Decoder)()),
        ],
        ['message', (0, types_1.getSmartAccountTransactionMessageDecoder)()],
    ]);
}
function getTransactionCodec() {
    return (0, kit_1.combineCodec)(getTransactionEncoder(), getTransactionDecoder());
}
function decodeTransaction(encodedAccount) {
    return (0, kit_1.decodeAccount)(encodedAccount, getTransactionDecoder());
}
async function fetchTransaction(rpc, address, config) {
    const maybeAccount = await fetchMaybeTransaction(rpc, address, config);
    (0, kit_1.assertAccountExists)(maybeAccount);
    return maybeAccount;
}
async function fetchMaybeTransaction(rpc, address, config) {
    const maybeAccount = await (0, kit_1.fetchEncodedAccount)(rpc, address, config);
    return decodeTransaction(maybeAccount);
}
async function fetchAllTransaction(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeTransaction(rpc, addresses, config);
    (0, kit_1.assertAccountsExist)(maybeAccounts);
    return maybeAccounts;
}
async function fetchAllMaybeTransaction(rpc, addresses, config) {
    const maybeAccounts = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeTransaction(maybeAccount));
}
