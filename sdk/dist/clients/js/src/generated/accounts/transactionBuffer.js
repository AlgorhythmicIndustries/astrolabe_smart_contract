"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TRANSACTION_BUFFER_DISCRIMINATOR = void 0;
exports.getTransactionBufferDiscriminatorBytes = getTransactionBufferDiscriminatorBytes;
exports.getTransactionBufferEncoder = getTransactionBufferEncoder;
exports.getTransactionBufferDecoder = getTransactionBufferDecoder;
exports.getTransactionBufferCodec = getTransactionBufferCodec;
exports.decodeTransactionBuffer = decodeTransactionBuffer;
exports.fetchTransactionBuffer = fetchTransactionBuffer;
exports.fetchMaybeTransactionBuffer = fetchMaybeTransactionBuffer;
exports.fetchAllTransactionBuffer = fetchAllTransactionBuffer;
exports.fetchAllMaybeTransactionBuffer = fetchAllMaybeTransactionBuffer;
const kit_1 = require("@solana/kit");
exports.TRANSACTION_BUFFER_DISCRIMINATOR = new Uint8Array([
    90, 36, 35, 219, 93, 225, 110, 96,
]);
function getTransactionBufferDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.TRANSACTION_BUFFER_DISCRIMINATOR);
}
function getTransactionBufferEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['settings', (0, kit_1.getAddressEncoder)()],
        ['creator', (0, kit_1.getAddressEncoder)()],
        ['bufferIndex', (0, kit_1.getU8Encoder)()],
        ['accountIndex', (0, kit_1.getU8Encoder)()],
        ['finalBufferHash', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 32)],
        ['finalBufferSize', (0, kit_1.getU16Encoder)()],
        ['buffer', (0, kit_1.addEncoderSizePrefix)((0, kit_1.getBytesEncoder)(), (0, kit_1.getU32Encoder)())],
    ]), (value) => ({ ...value, discriminator: exports.TRANSACTION_BUFFER_DISCRIMINATOR }));
}
function getTransactionBufferDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['settings', (0, kit_1.getAddressDecoder)()],
        ['creator', (0, kit_1.getAddressDecoder)()],
        ['bufferIndex', (0, kit_1.getU8Decoder)()],
        ['accountIndex', (0, kit_1.getU8Decoder)()],
        ['finalBufferHash', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 32)],
        ['finalBufferSize', (0, kit_1.getU16Decoder)()],
        ['buffer', (0, kit_1.addDecoderSizePrefix)((0, kit_1.getBytesDecoder)(), (0, kit_1.getU32Decoder)())],
    ]);
}
function getTransactionBufferCodec() {
    return (0, kit_1.combineCodec)(getTransactionBufferEncoder(), getTransactionBufferDecoder());
}
function decodeTransactionBuffer(encodedAccount) {
    return (0, kit_1.decodeAccount)(encodedAccount, getTransactionBufferDecoder());
}
async function fetchTransactionBuffer(rpc, address, config) {
    const maybeAccount = await fetchMaybeTransactionBuffer(rpc, address, config);
    (0, kit_1.assertAccountExists)(maybeAccount);
    return maybeAccount;
}
async function fetchMaybeTransactionBuffer(rpc, address, config) {
    const maybeAccount = await (0, kit_1.fetchEncodedAccount)(rpc, address, config);
    return decodeTransactionBuffer(maybeAccount);
}
async function fetchAllTransactionBuffer(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeTransactionBuffer(rpc, addresses, config);
    (0, kit_1.assertAccountsExist)(maybeAccounts);
    return maybeAccounts;
}
async function fetchAllMaybeTransactionBuffer(rpc, addresses, config) {
    const maybeAccounts = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeTransactionBuffer(maybeAccount));
}
