/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { fetchEncodedAccount, fetchEncodedAccounts, type Account, type Address, type Codec, type Decoder, type EncodedAccount, type Encoder, type FetchAccountConfig, type FetchAccountsConfig, type MaybeAccount, type MaybeEncodedAccount, type ReadonlyUint8Array } from '@solana/kit';
import { type SettingsAction, type SettingsActionArgs } from '../types';
export declare const SETTINGS_TRANSACTION_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getSettingsTransactionDiscriminatorBytes(): ReadonlyUint8Array;
export type SettingsTransaction = {
    discriminator: ReadonlyUint8Array;
    /** The settings this belongs to. */
    settings: Address;
    /** Signer on the settings who submitted the transaction. */
    creator: Address;
    /** The rent collector for the settings transaction account. */
    rentCollector: Address;
    /** Index of this transaction within the settings. */
    index: bigint;
    /** bump for the transaction seeds. */
    bump: number;
    /** Action to be performed on the settings. */
    actions: Array<SettingsAction>;
};
export type SettingsTransactionArgs = {
    /** The settings this belongs to. */
    settings: Address;
    /** Signer on the settings who submitted the transaction. */
    creator: Address;
    /** The rent collector for the settings transaction account. */
    rentCollector: Address;
    /** Index of this transaction within the settings. */
    index: number | bigint;
    /** bump for the transaction seeds. */
    bump: number;
    /** Action to be performed on the settings. */
    actions: Array<SettingsActionArgs>;
};
export declare function getSettingsTransactionEncoder(): Encoder<SettingsTransactionArgs>;
export declare function getSettingsTransactionDecoder(): Decoder<SettingsTransaction>;
export declare function getSettingsTransactionCodec(): Codec<SettingsTransactionArgs, SettingsTransaction>;
export declare function decodeSettingsTransaction<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<SettingsTransaction, TAddress>;
export declare function decodeSettingsTransaction<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<SettingsTransaction, TAddress>;
export declare function fetchSettingsTransaction<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<SettingsTransaction, TAddress>>;
export declare function fetchMaybeSettingsTransaction<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<SettingsTransaction, TAddress>>;
export declare function fetchAllSettingsTransaction(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<SettingsTransaction>[]>;
export declare function fetchAllMaybeSettingsTransaction(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<SettingsTransaction>[]>;
