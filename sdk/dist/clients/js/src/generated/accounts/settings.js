"use strict";
/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SETTINGS_DISCRIMINATOR = void 0;
exports.getSettingsDiscriminatorBytes = getSettingsDiscriminatorBytes;
exports.getSettingsEncoder = getSettingsEncoder;
exports.getSettingsDecoder = getSettingsDecoder;
exports.getSettingsCodec = getSettingsCodec;
exports.decodeSettings = decodeSettings;
exports.fetchSettings = fetchSettings;
exports.fetchMaybeSettings = fetchMaybeSettings;
exports.fetchAllSettings = fetchAllSettings;
exports.fetchAllMaybeSettings = fetchAllMaybeSettings;
const kit_1 = require("@solana/kit");
const types_1 = require("../types");
exports.SETTINGS_DISCRIMINATOR = new Uint8Array([
    223, 179, 163, 190, 177, 224, 67, 173,
]);
function getSettingsDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.SETTINGS_DISCRIMINATOR);
}
function getSettingsEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['seed', (0, kit_1.getU128Encoder)()],
        ['settingsAuthority', (0, kit_1.getAddressEncoder)()],
        ['threshold', (0, kit_1.getU16Encoder)()],
        ['timeLock', (0, kit_1.getU32Encoder)()],
        ['transactionIndex', (0, kit_1.getU64Encoder)()],
        ['staleTransactionIndex', (0, kit_1.getU64Encoder)()],
        ['archivalAuthority', (0, kit_1.getOptionEncoder)((0, kit_1.getAddressEncoder)())],
        ['archivableAfter', (0, kit_1.getU64Encoder)()],
        ['bump', (0, kit_1.getU8Encoder)()],
        ['signers', (0, kit_1.getArrayEncoder)((0, types_1.getSmartAccountSignerEncoder)())],
        [
            'restrictedSigners',
            (0, kit_1.getArrayEncoder)((0, types_1.getRestrictedSmartAccountSignerEncoder)()),
        ],
        ['accountUtilization', (0, kit_1.getU8Encoder)()],
        ['reserved1', (0, kit_1.getU8Encoder)()],
        ['reserved2', (0, kit_1.getU8Encoder)()],
    ]), (value) => ({ ...value, discriminator: exports.SETTINGS_DISCRIMINATOR }));
}
function getSettingsDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['seed', (0, kit_1.getU128Decoder)()],
        ['settingsAuthority', (0, kit_1.getAddressDecoder)()],
        ['threshold', (0, kit_1.getU16Decoder)()],
        ['timeLock', (0, kit_1.getU32Decoder)()],
        ['transactionIndex', (0, kit_1.getU64Decoder)()],
        ['staleTransactionIndex', (0, kit_1.getU64Decoder)()],
        ['archivalAuthority', (0, kit_1.getOptionDecoder)((0, kit_1.getAddressDecoder)())],
        ['archivableAfter', (0, kit_1.getU64Decoder)()],
        ['bump', (0, kit_1.getU8Decoder)()],
        ['signers', (0, kit_1.getArrayDecoder)((0, types_1.getSmartAccountSignerDecoder)())],
        [
            'restrictedSigners',
            (0, kit_1.getArrayDecoder)((0, types_1.getRestrictedSmartAccountSignerDecoder)()),
        ],
        ['accountUtilization', (0, kit_1.getU8Decoder)()],
        ['reserved1', (0, kit_1.getU8Decoder)()],
        ['reserved2', (0, kit_1.getU8Decoder)()],
    ]);
}
function getSettingsCodec() {
    return (0, kit_1.combineCodec)(getSettingsEncoder(), getSettingsDecoder());
}
function decodeSettings(encodedAccount) {
    return (0, kit_1.decodeAccount)(encodedAccount, getSettingsDecoder());
}
async function fetchSettings(rpc, address, config) {
    const maybeAccount = await fetchMaybeSettings(rpc, address, config);
    (0, kit_1.assertAccountExists)(maybeAccount);
    return maybeAccount;
}
async function fetchMaybeSettings(rpc, address, config) {
    const maybeAccount = await (0, kit_1.fetchEncodedAccount)(rpc, address, config);
    return decodeSettings(maybeAccount);
}
async function fetchAllSettings(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeSettings(rpc, addresses, config);
    (0, kit_1.assertAccountsExist)(maybeAccounts);
    return maybeAccounts;
}
async function fetchAllMaybeSettings(rpc, addresses, config) {
    const maybeAccounts = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeSettings(maybeAccount));
}
