"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BATCH_TRANSACTION_DISCRIMINATOR = void 0;
exports.getBatchTransactionDiscriminatorBytes = getBatchTransactionDiscriminatorBytes;
exports.getBatchTransactionEncoder = getBatchTransactionEncoder;
exports.getBatchTransactionDecoder = getBatchTransactionDecoder;
exports.getBatchTransactionCodec = getBatchTransactionCodec;
exports.decodeBatchTransaction = decodeBatchTransaction;
exports.fetchBatchTransaction = fetchBatchTransaction;
exports.fetchMaybeBatchTransaction = fetchMaybeBatchTransaction;
exports.fetchAllBatchTransaction = fetchAllBatchTransaction;
exports.fetchAllMaybeBatchTransaction = fetchAllMaybeBatchTransaction;
const kit_1 = require("@solana/kit");
const types_1 = require("../types");
exports.BATCH_TRANSACTION_DISCRIMINATOR = new Uint8Array([
    92, 20, 61, 146, 155, 62, 112, 72,
]);
function getBatchTransactionDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.BATCH_TRANSACTION_DISCRIMINATOR);
}
function getBatchTransactionEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['bump', (0, kit_1.getU8Encoder)()],
        ['rentCollector', (0, kit_1.getAddressEncoder)()],
        [
            'ephemeralSignerBumps',
            (0, kit_1.addEncoderSizePrefix)((0, kit_1.getBytesEncoder)(), (0, kit_1.getU32Encoder)()),
        ],
        ['message', (0, types_1.getSmartAccountTransactionMessageEncoder)()],
    ]), (value) => ({ ...value, discriminator: exports.BATCH_TRANSACTION_DISCRIMINATOR }));
}
function getBatchTransactionDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['bump', (0, kit_1.getU8Decoder)()],
        ['rentCollector', (0, kit_1.getAddressDecoder)()],
        [
            'ephemeralSignerBumps',
            (0, kit_1.addDecoderSizePrefix)((0, kit_1.getBytesDecoder)(), (0, kit_1.getU32Decoder)()),
        ],
        ['message', (0, types_1.getSmartAccountTransactionMessageDecoder)()],
    ]);
}
function getBatchTransactionCodec() {
    return (0, kit_1.combineCodec)(getBatchTransactionEncoder(), getBatchTransactionDecoder());
}
function decodeBatchTransaction(encodedAccount) {
    return (0, kit_1.decodeAccount)(encodedAccount, getBatchTransactionDecoder());
}
async function fetchBatchTransaction(rpc, address, config) {
    const maybeAccount = await fetchMaybeBatchTransaction(rpc, address, config);
    (0, kit_1.assertAccountExists)(maybeAccount);
    return maybeAccount;
}
async function fetchMaybeBatchTransaction(rpc, address, config) {
    const maybeAccount = await (0, kit_1.fetchEncodedAccount)(rpc, address, config);
    return decodeBatchTransaction(maybeAccount);
}
async function fetchAllBatchTransaction(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeBatchTransaction(rpc, addresses, config);
    (0, kit_1.assertAccountsExist)(maybeAccounts);
    return maybeAccounts;
}
async function fetchAllMaybeBatchTransaction(rpc, addresses, config) {
    const maybeAccounts = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeBatchTransaction(maybeAccount));
}
