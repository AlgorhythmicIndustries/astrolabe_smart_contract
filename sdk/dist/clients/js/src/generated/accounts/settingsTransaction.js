"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SETTINGS_TRANSACTION_DISCRIMINATOR = void 0;
exports.getSettingsTransactionDiscriminatorBytes = getSettingsTransactionDiscriminatorBytes;
exports.getSettingsTransactionEncoder = getSettingsTransactionEncoder;
exports.getSettingsTransactionDecoder = getSettingsTransactionDecoder;
exports.getSettingsTransactionCodec = getSettingsTransactionCodec;
exports.decodeSettingsTransaction = decodeSettingsTransaction;
exports.fetchSettingsTransaction = fetchSettingsTransaction;
exports.fetchMaybeSettingsTransaction = fetchMaybeSettingsTransaction;
exports.fetchAllSettingsTransaction = fetchAllSettingsTransaction;
exports.fetchAllMaybeSettingsTransaction = fetchAllMaybeSettingsTransaction;
const kit_1 = require("@solana/kit");
const types_1 = require("../types");
exports.SETTINGS_TRANSACTION_DISCRIMINATOR = new Uint8Array([
    199, 151, 72, 87, 77, 124, 16, 0,
]);
function getSettingsTransactionDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.SETTINGS_TRANSACTION_DISCRIMINATOR);
}
function getSettingsTransactionEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['settings', (0, kit_1.getAddressEncoder)()],
        ['creator', (0, kit_1.getAddressEncoder)()],
        ['rentCollector', (0, kit_1.getAddressEncoder)()],
        ['index', (0, kit_1.getU64Encoder)()],
        ['bump', (0, kit_1.getU8Encoder)()],
        ['actions', (0, kit_1.getArrayEncoder)((0, types_1.getSettingsActionEncoder)())],
    ]), (value) => ({ ...value, discriminator: exports.SETTINGS_TRANSACTION_DISCRIMINATOR }));
}
function getSettingsTransactionDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['settings', (0, kit_1.getAddressDecoder)()],
        ['creator', (0, kit_1.getAddressDecoder)()],
        ['rentCollector', (0, kit_1.getAddressDecoder)()],
        ['index', (0, kit_1.getU64Decoder)()],
        ['bump', (0, kit_1.getU8Decoder)()],
        ['actions', (0, kit_1.getArrayDecoder)((0, types_1.getSettingsActionDecoder)())],
    ]);
}
function getSettingsTransactionCodec() {
    return (0, kit_1.combineCodec)(getSettingsTransactionEncoder(), getSettingsTransactionDecoder());
}
function decodeSettingsTransaction(encodedAccount) {
    return (0, kit_1.decodeAccount)(encodedAccount, getSettingsTransactionDecoder());
}
async function fetchSettingsTransaction(rpc, address, config) {
    const maybeAccount = await fetchMaybeSettingsTransaction(rpc, address, config);
    (0, kit_1.assertAccountExists)(maybeAccount);
    return maybeAccount;
}
async function fetchMaybeSettingsTransaction(rpc, address, config) {
    const maybeAccount = await (0, kit_1.fetchEncodedAccount)(rpc, address, config);
    return decodeSettingsTransaction(maybeAccount);
}
async function fetchAllSettingsTransaction(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeSettingsTransaction(rpc, addresses, config);
    (0, kit_1.assertAccountsExist)(maybeAccounts);
    return maybeAccounts;
}
async function fetchAllMaybeSettingsTransaction(rpc, addresses, config) {
    const maybeAccounts = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeSettingsTransaction(maybeAccount));
}
