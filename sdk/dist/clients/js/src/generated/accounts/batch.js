"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BATCH_DISCRIMINATOR = void 0;
exports.getBatchDiscriminatorBytes = getBatchDiscriminatorBytes;
exports.getBatchEncoder = getBatchEncoder;
exports.getBatchDecoder = getBatchDecoder;
exports.getBatchCodec = getBatchCodec;
exports.decodeBatch = decodeBatch;
exports.fetchBatch = fetchBatch;
exports.fetchMaybeBatch = fetchMaybeBatch;
exports.fetchAllBatch = fetchAllBatch;
exports.fetchAllMaybeBatch = fetchAllMaybeBatch;
exports.getBatchSize = getBatchSize;
const kit_1 = require("@solana/kit");
exports.BATCH_DISCRIMINATOR = new Uint8Array([
    156, 194, 70, 44, 22, 88, 137, 44,
]);
function getBatchDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.BATCH_DISCRIMINATOR);
}
function getBatchEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['settings', (0, kit_1.getAddressEncoder)()],
        ['creator', (0, kit_1.getAddressEncoder)()],
        ['rentCollector', (0, kit_1.getAddressEncoder)()],
        ['index', (0, kit_1.getU64Encoder)()],
        ['bump', (0, kit_1.getU8Encoder)()],
        ['accountIndex', (0, kit_1.getU8Encoder)()],
        ['accountBump', (0, kit_1.getU8Encoder)()],
        ['size', (0, kit_1.getU32Encoder)()],
        ['executedTransactionIndex', (0, kit_1.getU32Encoder)()],
    ]), (value) => ({ ...value, discriminator: exports.BATCH_DISCRIMINATOR }));
}
function getBatchDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['settings', (0, kit_1.getAddressDecoder)()],
        ['creator', (0, kit_1.getAddressDecoder)()],
        ['rentCollector', (0, kit_1.getAddressDecoder)()],
        ['index', (0, kit_1.getU64Decoder)()],
        ['bump', (0, kit_1.getU8Decoder)()],
        ['accountIndex', (0, kit_1.getU8Decoder)()],
        ['accountBump', (0, kit_1.getU8Decoder)()],
        ['size', (0, kit_1.getU32Decoder)()],
        ['executedTransactionIndex', (0, kit_1.getU32Decoder)()],
    ]);
}
function getBatchCodec() {
    return (0, kit_1.combineCodec)(getBatchEncoder(), getBatchDecoder());
}
function decodeBatch(encodedAccount) {
    return (0, kit_1.decodeAccount)(encodedAccount, getBatchDecoder());
}
async function fetchBatch(rpc, address, config) {
    const maybeAccount = await fetchMaybeBatch(rpc, address, config);
    (0, kit_1.assertAccountExists)(maybeAccount);
    return maybeAccount;
}
async function fetchMaybeBatch(rpc, address, config) {
    const maybeAccount = await (0, kit_1.fetchEncodedAccount)(rpc, address, config);
    return decodeBatch(maybeAccount);
}
async function fetchAllBatch(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeBatch(rpc, addresses, config);
    (0, kit_1.assertAccountsExist)(maybeAccounts);
    return maybeAccounts;
}
async function fetchAllMaybeBatch(rpc, addresses, config) {
    const maybeAccounts = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeBatch(maybeAccount));
}
function getBatchSize() {
    return 123;
}
