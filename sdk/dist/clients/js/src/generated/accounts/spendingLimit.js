"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPENDING_LIMIT_DISCRIMINATOR = void 0;
exports.getSpendingLimitDiscriminatorBytes = getSpendingLimitDiscriminatorBytes;
exports.getSpendingLimitEncoder = getSpendingLimitEncoder;
exports.getSpendingLimitDecoder = getSpendingLimitDecoder;
exports.getSpendingLimitCodec = getSpendingLimitCodec;
exports.decodeSpendingLimit = decodeSpendingLimit;
exports.fetchSpendingLimit = fetchSpendingLimit;
exports.fetchMaybeSpendingLimit = fetchMaybeSpendingLimit;
exports.fetchAllSpendingLimit = fetchAllSpendingLimit;
exports.fetchAllMaybeSpendingLimit = fetchAllMaybeSpendingLimit;
const kit_1 = require("@solana/kit");
const types_1 = require("../types");
exports.SPENDING_LIMIT_DISCRIMINATOR = new Uint8Array([
    10, 201, 27, 160, 218, 195, 222, 152,
]);
function getSpendingLimitDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.SPENDING_LIMIT_DISCRIMINATOR);
}
function getSpendingLimitEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['settings', (0, kit_1.getAddressEncoder)()],
        ['seed', (0, kit_1.getAddressEncoder)()],
        ['accountIndex', (0, kit_1.getU8Encoder)()],
        ['mint', (0, kit_1.getAddressEncoder)()],
        ['amount', (0, kit_1.getU64Encoder)()],
        ['period', (0, types_1.getPeriodEncoder)()],
        ['remainingAmount', (0, kit_1.getU64Encoder)()],
        ['lastReset', (0, kit_1.getI64Encoder)()],
        ['bump', (0, kit_1.getU8Encoder)()],
        ['signers', (0, kit_1.getArrayEncoder)((0, kit_1.getAddressEncoder)())],
        ['destinations', (0, kit_1.getArrayEncoder)((0, kit_1.getAddressEncoder)())],
        ['expiration', (0, kit_1.getI64Encoder)()],
    ]), (value) => ({ ...value, discriminator: exports.SPENDING_LIMIT_DISCRIMINATOR }));
}
function getSpendingLimitDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['settings', (0, kit_1.getAddressDecoder)()],
        ['seed', (0, kit_1.getAddressDecoder)()],
        ['accountIndex', (0, kit_1.getU8Decoder)()],
        ['mint', (0, kit_1.getAddressDecoder)()],
        ['amount', (0, kit_1.getU64Decoder)()],
        ['period', (0, types_1.getPeriodDecoder)()],
        ['remainingAmount', (0, kit_1.getU64Decoder)()],
        ['lastReset', (0, kit_1.getI64Decoder)()],
        ['bump', (0, kit_1.getU8Decoder)()],
        ['signers', (0, kit_1.getArrayDecoder)((0, kit_1.getAddressDecoder)())],
        ['destinations', (0, kit_1.getArrayDecoder)((0, kit_1.getAddressDecoder)())],
        ['expiration', (0, kit_1.getI64Decoder)()],
    ]);
}
function getSpendingLimitCodec() {
    return (0, kit_1.combineCodec)(getSpendingLimitEncoder(), getSpendingLimitDecoder());
}
function decodeSpendingLimit(encodedAccount) {
    return (0, kit_1.decodeAccount)(encodedAccount, getSpendingLimitDecoder());
}
async function fetchSpendingLimit(rpc, address, config) {
    const maybeAccount = await fetchMaybeSpendingLimit(rpc, address, config);
    (0, kit_1.assertAccountExists)(maybeAccount);
    return maybeAccount;
}
async function fetchMaybeSpendingLimit(rpc, address, config) {
    const maybeAccount = await (0, kit_1.fetchEncodedAccount)(rpc, address, config);
    return decodeSpendingLimit(maybeAccount);
}
async function fetchAllSpendingLimit(rpc, addresses, config) {
    const maybeAccounts = await fetchAllMaybeSpendingLimit(rpc, addresses, config);
    (0, kit_1.assertAccountsExist)(maybeAccounts);
    return maybeAccounts;
}
async function fetchAllMaybeSpendingLimit(rpc, addresses, config) {
    const maybeAccounts = await (0, kit_1.fetchEncodedAccounts)(rpc, addresses, config);
    return maybeAccounts.map((maybeAccount) => decodeSpendingLimit(maybeAccount));
}
