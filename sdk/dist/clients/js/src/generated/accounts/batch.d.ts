/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { fetchEncodedAccount, fetchEncodedAccounts, type Account, type Address, type EncodedAccount, type FetchAccountConfig, type FetchAccountsConfig, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type MaybeAccount, type MaybeEncodedAccount, type ReadonlyUint8Array } from '@solana/kit';
export declare const BATCH_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getBatchDiscriminatorBytes(): ReadonlyUint8Array;
export type Batch = {
    discriminator: ReadonlyUint8Array;
    /** The settings this belongs to. */
    settings: Address;
    /** Signer of the smart account who submitted the batch. */
    creator: Address;
    /** The rent collector for the batch account. */
    rentCollector: Address;
    /** Index of this batch within the smart account transactions. */
    index: bigint;
    /** PDA bump. */
    bump: number;
    /** Index of the smart account this batch belongs to. */
    accountIndex: number;
    /** Derivation bump of the smart account PDA this batch belongs to. */
    accountBump: number;
    /** Number of transactions in the batch. */
    size: number;
    /**
     * Index of the last executed transaction within the batch.
     * 0 means that no transactions have been executed yet.
     */
    executedTransactionIndex: number;
};
export type BatchArgs = {
    /** The settings this belongs to. */
    settings: Address;
    /** Signer of the smart account who submitted the batch. */
    creator: Address;
    /** The rent collector for the batch account. */
    rentCollector: Address;
    /** Index of this batch within the smart account transactions. */
    index: number | bigint;
    /** PDA bump. */
    bump: number;
    /** Index of the smart account this batch belongs to. */
    accountIndex: number;
    /** Derivation bump of the smart account PDA this batch belongs to. */
    accountBump: number;
    /** Number of transactions in the batch. */
    size: number;
    /**
     * Index of the last executed transaction within the batch.
     * 0 means that no transactions have been executed yet.
     */
    executedTransactionIndex: number;
};
export declare function getBatchEncoder(): FixedSizeEncoder<BatchArgs>;
export declare function getBatchDecoder(): FixedSizeDecoder<Batch>;
export declare function getBatchCodec(): FixedSizeCodec<BatchArgs, Batch>;
export declare function decodeBatch<TAddress extends string = string>(encodedAccount: EncodedAccount<TAddress>): Account<Batch, TAddress>;
export declare function decodeBatch<TAddress extends string = string>(encodedAccount: MaybeEncodedAccount<TAddress>): MaybeAccount<Batch, TAddress>;
export declare function fetchBatch<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<Account<Batch, TAddress>>;
export declare function fetchMaybeBatch<TAddress extends string = string>(rpc: Parameters<typeof fetchEncodedAccount>[0], address: Address<TAddress>, config?: FetchAccountConfig): Promise<MaybeAccount<Batch, TAddress>>;
export declare function fetchAllBatch(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<Account<Batch>[]>;
export declare function fetchAllMaybeBatch(rpc: Parameters<typeof fetchEncodedAccounts>[0], addresses: Array<Address>, config?: FetchAccountsConfig): Promise<MaybeAccount<Batch>[]>;
export declare function getBatchSize(): number;
