"use strict";
/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AstrolabeSmartAccountInstruction = exports.AstrolabeSmartAccountAccount = exports.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS = void 0;
exports.identifyAstrolabeSmartAccountAccount = identifyAstrolabeSmartAccountAccount;
exports.identifyAstrolabeSmartAccountInstruction = identifyAstrolabeSmartAccountInstruction;
const kit_1 = require("@solana/kit");
exports.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS = 'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q';
var AstrolabeSmartAccountAccount;
(function (AstrolabeSmartAccountAccount) {
    AstrolabeSmartAccountAccount[AstrolabeSmartAccountAccount["Batch"] = 0] = "Batch";
    AstrolabeSmartAccountAccount[AstrolabeSmartAccountAccount["BatchTransaction"] = 1] = "BatchTransaction";
    AstrolabeSmartAccountAccount[AstrolabeSmartAccountAccount["ProgramConfig"] = 2] = "ProgramConfig";
    AstrolabeSmartAccountAccount[AstrolabeSmartAccountAccount["Proposal"] = 3] = "Proposal";
    AstrolabeSmartAccountAccount[AstrolabeSmartAccountAccount["Settings"] = 4] = "Settings";
    AstrolabeSmartAccountAccount[AstrolabeSmartAccountAccount["SettingsTransaction"] = 5] = "SettingsTransaction";
    AstrolabeSmartAccountAccount[AstrolabeSmartAccountAccount["SpendingLimit"] = 6] = "SpendingLimit";
    AstrolabeSmartAccountAccount[AstrolabeSmartAccountAccount["Transaction"] = 7] = "Transaction";
    AstrolabeSmartAccountAccount[AstrolabeSmartAccountAccount["TransactionBuffer"] = 8] = "TransactionBuffer";
})(AstrolabeSmartAccountAccount || (exports.AstrolabeSmartAccountAccount = AstrolabeSmartAccountAccount = {}));
function identifyAstrolabeSmartAccountAccount(account) {
    const data = 'data' in account ? account.data : account;
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([156, 194, 70, 44, 22, 88, 137, 44])), 0)) {
        return AstrolabeSmartAccountAccount.Batch;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([92, 20, 61, 146, 155, 62, 112, 72])), 0)) {
        return AstrolabeSmartAccountAccount.BatchTransaction;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([196, 210, 90, 231, 144, 149, 140, 63])), 0)) {
        return AstrolabeSmartAccountAccount.ProgramConfig;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([26, 94, 189, 187, 116, 136, 53, 33])), 0)) {
        return AstrolabeSmartAccountAccount.Proposal;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([223, 179, 163, 190, 177, 224, 67, 173])), 0)) {
        return AstrolabeSmartAccountAccount.Settings;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([199, 151, 72, 87, 77, 124, 16, 0])), 0)) {
        return AstrolabeSmartAccountAccount.SettingsTransaction;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([10, 201, 27, 160, 218, 195, 222, 152])), 0)) {
        return AstrolabeSmartAccountAccount.SpendingLimit;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([11, 24, 174, 129, 203, 117, 242, 23])), 0)) {
        return AstrolabeSmartAccountAccount.Transaction;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([90, 36, 35, 219, 93, 225, 110, 96])), 0)) {
        return AstrolabeSmartAccountAccount.TransactionBuffer;
    }
    throw new Error('The provided account could not be identified as a astrolabeSmartAccount account.');
}
var AstrolabeSmartAccountInstruction;
(function (AstrolabeSmartAccountInstruction) {
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["ActivateProposal"] = 0] = "ActivateProposal";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["AddSignerAsAuthority"] = 1] = "AddSignerAsAuthority";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["AddSpendingLimitAsAuthority"] = 2] = "AddSpendingLimitAsAuthority";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["AddTransactionToBatch"] = 3] = "AddTransactionToBatch";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["ApproveProposal"] = 4] = "ApproveProposal";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["CancelProposal"] = 5] = "CancelProposal";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["ChangeThresholdAsAuthority"] = 6] = "ChangeThresholdAsAuthority";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["CloseBatch"] = 7] = "CloseBatch";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["CloseBatchTransaction"] = 8] = "CloseBatchTransaction";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["CloseSettingsTransaction"] = 9] = "CloseSettingsTransaction";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["CloseTransaction"] = 10] = "CloseTransaction";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["CloseTransactionBuffer"] = 11] = "CloseTransactionBuffer";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["CreateBatch"] = 12] = "CreateBatch";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["CreateProposal"] = 13] = "CreateProposal";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["CreateSettingsTransaction"] = 14] = "CreateSettingsTransaction";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["CreateSmartAccount"] = 15] = "CreateSmartAccount";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["CreateTransaction"] = 16] = "CreateTransaction";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["CreateTransactionBuffer"] = 17] = "CreateTransactionBuffer";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["CreateTransactionFromBuffer"] = 18] = "CreateTransactionFromBuffer";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["ExecuteBatchTransaction"] = 19] = "ExecuteBatchTransaction";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["ExecuteSettingsTransaction"] = 20] = "ExecuteSettingsTransaction";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["ExecuteSettingsTransactionSync"] = 21] = "ExecuteSettingsTransactionSync";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["ExecuteTransaction"] = 22] = "ExecuteTransaction";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["ExecuteTransactionSync"] = 23] = "ExecuteTransactionSync";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["ExtendTransactionBuffer"] = 24] = "ExtendTransactionBuffer";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["InitializeProgramConfig"] = 25] = "InitializeProgramConfig";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["LogEvent"] = 26] = "LogEvent";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["RejectProposal"] = 27] = "RejectProposal";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["RemoveSignerAsAuthority"] = 28] = "RemoveSignerAsAuthority";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["RemoveSpendingLimitAsAuthority"] = 29] = "RemoveSpendingLimitAsAuthority";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["SetArchivalAuthorityAsAuthority"] = 30] = "SetArchivalAuthorityAsAuthority";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["SetNewSettingsAuthorityAsAuthority"] = 31] = "SetNewSettingsAuthorityAsAuthority";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["SetProgramConfigAuthority"] = 32] = "SetProgramConfigAuthority";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["SetProgramConfigSmartAccountCreationFee"] = 33] = "SetProgramConfigSmartAccountCreationFee";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["SetProgramConfigTreasury"] = 34] = "SetProgramConfigTreasury";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["SetTimeLockAsAuthority"] = 35] = "SetTimeLockAsAuthority";
    AstrolabeSmartAccountInstruction[AstrolabeSmartAccountInstruction["UseSpendingLimit"] = 36] = "UseSpendingLimit";
})(AstrolabeSmartAccountInstruction || (exports.AstrolabeSmartAccountInstruction = AstrolabeSmartAccountInstruction = {}));
function identifyAstrolabeSmartAccountInstruction(instruction) {
    const data = 'data' in instruction ? instruction.data : instruction;
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([90, 186, 203, 234, 70, 185, 191, 21])), 0)) {
        return AstrolabeSmartAccountInstruction.ActivateProposal;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([80, 198, 228, 154, 7, 234, 99, 56])), 0)) {
        return AstrolabeSmartAccountInstruction.AddSignerAsAuthority;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([169, 189, 84, 54, 30, 244, 223, 212])), 0)) {
        return AstrolabeSmartAccountInstruction.AddSpendingLimitAsAuthority;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([147, 75, 197, 227, 20, 149, 150, 113])), 0)) {
        return AstrolabeSmartAccountInstruction.AddTransactionToBatch;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([136, 108, 102, 85, 98, 114, 7, 147])), 0)) {
        return AstrolabeSmartAccountInstruction.ApproveProposal;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([106, 74, 128, 146, 19, 65, 39, 23])), 0)) {
        return AstrolabeSmartAccountInstruction.CancelProposal;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([51, 141, 78, 133, 70, 47, 95, 124])), 0)) {
        return AstrolabeSmartAccountInstruction.ChangeThresholdAsAuthority;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([166, 174, 35, 253, 209, 211, 181, 28])), 0)) {
        return AstrolabeSmartAccountInstruction.CloseBatch;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([86, 144, 133, 225, 45, 209, 62, 251])), 0)) {
        return AstrolabeSmartAccountInstruction.CloseBatchTransaction;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([251, 112, 34, 108, 214, 13, 41, 116])), 0)) {
        return AstrolabeSmartAccountInstruction.CloseSettingsTransaction;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([97, 46, 152, 170, 42, 215, 192, 218])), 0)) {
        return AstrolabeSmartAccountInstruction.CloseTransaction;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([224, 221, 123, 213, 0, 204, 5, 191])), 0)) {
        return AstrolabeSmartAccountInstruction.CloseTransactionBuffer;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([159, 198, 248, 43, 248, 31, 235, 86])), 0)) {
        return AstrolabeSmartAccountInstruction.CreateBatch;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([132, 116, 68, 174, 216, 160, 198, 22])), 0)) {
        return AstrolabeSmartAccountInstruction.CreateProposal;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([101, 168, 254, 203, 222, 102, 95, 192])), 0)) {
        return AstrolabeSmartAccountInstruction.CreateSettingsTransaction;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([197, 102, 253, 231, 77, 84, 50, 17])), 0)) {
        return AstrolabeSmartAccountInstruction.CreateSmartAccount;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([227, 193, 53, 239, 55, 126, 112, 105])), 0)) {
        return AstrolabeSmartAccountInstruction.CreateTransaction;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([57, 97, 250, 156, 59, 211, 32, 208])), 0)) {
        return AstrolabeSmartAccountInstruction.CreateTransactionBuffer;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([53, 192, 39, 239, 124, 84, 43, 249])), 0)) {
        return AstrolabeSmartAccountInstruction.CreateTransactionFromBuffer;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([237, 67, 201, 173, 33, 130, 88, 134])), 0)) {
        return AstrolabeSmartAccountInstruction.ExecuteBatchTransaction;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([131, 210, 27, 88, 27, 204, 143, 189])), 0)) {
        return AstrolabeSmartAccountInstruction.ExecuteSettingsTransaction;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([138, 209, 64, 163, 79, 67, 233, 76])), 0)) {
        return AstrolabeSmartAccountInstruction.ExecuteSettingsTransactionSync;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([231, 173, 49, 91, 235, 24, 68, 19])), 0)) {
        return AstrolabeSmartAccountInstruction.ExecuteTransaction;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([43, 102, 248, 89, 231, 97, 104, 134])), 0)) {
        return AstrolabeSmartAccountInstruction.ExecuteTransactionSync;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([190, 86, 246, 95, 231, 154, 229, 91])), 0)) {
        return AstrolabeSmartAccountInstruction.ExtendTransactionBuffer;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([6, 131, 61, 237, 40, 110, 83, 124])), 0)) {
        return AstrolabeSmartAccountInstruction.InitializeProgramConfig;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([5, 9, 90, 141, 223, 134, 57, 217])), 0)) {
        return AstrolabeSmartAccountInstruction.LogEvent;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([114, 162, 164, 82, 191, 11, 102, 25])), 0)) {
        return AstrolabeSmartAccountInstruction.RejectProposal;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([58, 19, 149, 16, 181, 16, 125, 148])), 0)) {
        return AstrolabeSmartAccountInstruction.RemoveSignerAsAuthority;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([94, 32, 68, 127, 251, 44, 145, 7])), 0)) {
        return AstrolabeSmartAccountInstruction.RemoveSpendingLimitAsAuthority;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([178, 199, 4, 13, 237, 234, 152, 202])), 0)) {
        return AstrolabeSmartAccountInstruction.SetArchivalAuthorityAsAuthority;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([221, 112, 133, 229, 146, 58, 90, 56])), 0)) {
        return AstrolabeSmartAccountInstruction.SetNewSettingsAuthorityAsAuthority;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([130, 40, 234, 111, 237, 155, 246, 203])), 0)) {
        return AstrolabeSmartAccountInstruction.SetProgramConfigAuthority;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([222, 30, 134, 176, 131, 113, 195, 202])), 0)) {
        return AstrolabeSmartAccountInstruction.SetProgramConfigSmartAccountCreationFee;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([244, 119, 192, 190, 182, 101, 227, 189])), 0)) {
        return AstrolabeSmartAccountInstruction.SetProgramConfigTreasury;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([2, 234, 93, 93, 40, 92, 31, 234])), 0)) {
        return AstrolabeSmartAccountInstruction.SetTimeLockAsAuthority;
    }
    if ((0, kit_1.containsBytes)(data, (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(new Uint8Array([41, 179, 70, 5, 194, 147, 239, 158])), 0)) {
        return AstrolabeSmartAccountInstruction.UseSpendingLimit;
    }
    throw new Error('The provided instruction could not be identified as a astrolabeSmartAccount instruction.');
}
