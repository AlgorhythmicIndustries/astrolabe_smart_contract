"use strict";
/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.USE_SPENDING_LIMIT_DISCRIMINATOR = void 0;
exports.getUseSpendingLimitDiscriminatorBytes = getUseSpendingLimitDiscriminatorBytes;
exports.getUseSpendingLimitInstructionDataEncoder = getUseSpendingLimitInstructionDataEncoder;
exports.getUseSpendingLimitInstructionDataDecoder = getUseSpendingLimitInstructionDataDecoder;
exports.getUseSpendingLimitInstructionDataCodec = getUseSpendingLimitInstructionDataCodec;
exports.getUseSpendingLimitInstruction = getUseSpendingLimitInstruction;
exports.parseUseSpendingLimitInstruction = parseUseSpendingLimitInstruction;
const kit_1 = require("@solana/kit");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
exports.USE_SPENDING_LIMIT_DISCRIMINATOR = new Uint8Array([
    41, 179, 70, 5, 194, 147, 239, 158,
]);
function getUseSpendingLimitDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.USE_SPENDING_LIMIT_DISCRIMINATOR);
}
function getUseSpendingLimitInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['amount', (0, kit_1.getU64Encoder)()],
        ['decimals', (0, kit_1.getU8Encoder)()],
        [
            'memo',
            (0, kit_1.getOptionEncoder)((0, kit_1.addEncoderSizePrefix)((0, kit_1.getUtf8Encoder)(), (0, kit_1.getU32Encoder)())),
        ],
    ]), (value) => ({ ...value, discriminator: exports.USE_SPENDING_LIMIT_DISCRIMINATOR }));
}
function getUseSpendingLimitInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['amount', (0, kit_1.getU64Decoder)()],
        ['decimals', (0, kit_1.getU8Decoder)()],
        [
            'memo',
            (0, kit_1.getOptionDecoder)((0, kit_1.addDecoderSizePrefix)((0, kit_1.getUtf8Decoder)(), (0, kit_1.getU32Decoder)())),
        ],
    ]);
}
function getUseSpendingLimitInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getUseSpendingLimitInstructionDataEncoder(), getUseSpendingLimitInstructionDataDecoder());
}
function getUseSpendingLimitInstruction(input, config) {
    // Program address.
    const programAddress = config?.programAddress ?? programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        settings: { value: input.settings ?? null, isWritable: false },
        signer: { value: input.signer ?? null, isWritable: false },
        spendingLimit: { value: input.spendingLimit ?? null, isWritable: true },
        smartAccount: { value: input.smartAccount ?? null, isWritable: true },
        destination: { value: input.destination ?? null, isWritable: true },
        systemProgram: { value: input.systemProgram ?? null, isWritable: false },
        mint: { value: input.mint ?? null, isWritable: false },
        smartAccountTokenAccount: {
            value: input.smartAccountTokenAccount ?? null,
            isWritable: true,
        },
        destinationTokenAccount: {
            value: input.destinationTokenAccount ?? null,
            isWritable: true,
        },
        tokenProgram: { value: input.tokenProgram ?? null, isWritable: false },
        program: { value: input.program ?? null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = { ...input };
    // Resolve default values.
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111';
    }
    if (!accounts.program.value) {
        accounts.program.value =
            'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q';
    }
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    return Object.freeze({
        accounts: [
            getAccountMeta(accounts.settings),
            getAccountMeta(accounts.signer),
            getAccountMeta(accounts.spendingLimit),
            getAccountMeta(accounts.smartAccount),
            getAccountMeta(accounts.destination),
            getAccountMeta(accounts.systemProgram),
            getAccountMeta(accounts.mint),
            getAccountMeta(accounts.smartAccountTokenAccount),
            getAccountMeta(accounts.destinationTokenAccount),
            getAccountMeta(accounts.tokenProgram),
            getAccountMeta(accounts.program),
        ],
        data: getUseSpendingLimitInstructionDataEncoder().encode(args),
        programAddress,
    });
}
function parseUseSpendingLimitInstruction(instruction) {
    if (instruction.accounts.length < 11) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    const getNextOptionalAccount = () => {
        const accountMeta = getNextAccount();
        return accountMeta.address === programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS
            ? undefined
            : accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            settings: getNextAccount(),
            signer: getNextAccount(),
            spendingLimit: getNextAccount(),
            smartAccount: getNextAccount(),
            destination: getNextAccount(),
            systemProgram: getNextOptionalAccount(),
            mint: getNextOptionalAccount(),
            smartAccountTokenAccount: getNextOptionalAccount(),
            destinationTokenAccount: getNextOptionalAccount(),
            tokenProgram: getNextOptionalAccount(),
            program: getNextAccount(),
        },
        data: getUseSpendingLimitInstructionDataDecoder().decode(instruction.data),
    };
}
