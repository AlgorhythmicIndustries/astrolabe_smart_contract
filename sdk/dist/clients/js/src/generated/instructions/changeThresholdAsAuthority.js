"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseChangeThresholdAsAuthorityInstruction = exports.getChangeThresholdAsAuthorityInstruction = exports.getChangeThresholdAsAuthorityInstructionDataCodec = exports.getChangeThresholdAsAuthorityInstructionDataDecoder = exports.getChangeThresholdAsAuthorityInstructionDataEncoder = exports.getChangeThresholdAsAuthorityDiscriminatorBytes = exports.CHANGE_THRESHOLD_AS_AUTHORITY_DISCRIMINATOR = void 0;
const kit_1 = require("@solana/kit");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
exports.CHANGE_THRESHOLD_AS_AUTHORITY_DISCRIMINATOR = new Uint8Array([
    51, 141, 78, 133, 70, 47, 95, 124,
]);
function getChangeThresholdAsAuthorityDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.CHANGE_THRESHOLD_AS_AUTHORITY_DISCRIMINATOR);
}
exports.getChangeThresholdAsAuthorityDiscriminatorBytes = getChangeThresholdAsAuthorityDiscriminatorBytes;
function getChangeThresholdAsAuthorityInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['newThreshold', (0, kit_1.getU16Encoder)()],
        [
            'memo',
            (0, kit_1.getOptionEncoder)((0, kit_1.addEncoderSizePrefix)((0, kit_1.getUtf8Encoder)(), (0, kit_1.getU32Encoder)())),
        ],
    ]), (value) => ({
        ...value,
        discriminator: exports.CHANGE_THRESHOLD_AS_AUTHORITY_DISCRIMINATOR,
    }));
}
exports.getChangeThresholdAsAuthorityInstructionDataEncoder = getChangeThresholdAsAuthorityInstructionDataEncoder;
function getChangeThresholdAsAuthorityInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['newThreshold', (0, kit_1.getU16Decoder)()],
        [
            'memo',
            (0, kit_1.getOptionDecoder)((0, kit_1.addDecoderSizePrefix)((0, kit_1.getUtf8Decoder)(), (0, kit_1.getU32Decoder)())),
        ],
    ]);
}
exports.getChangeThresholdAsAuthorityInstructionDataDecoder = getChangeThresholdAsAuthorityInstructionDataDecoder;
function getChangeThresholdAsAuthorityInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getChangeThresholdAsAuthorityInstructionDataEncoder(), getChangeThresholdAsAuthorityInstructionDataDecoder());
}
exports.getChangeThresholdAsAuthorityInstructionDataCodec = getChangeThresholdAsAuthorityInstructionDataCodec;
function getChangeThresholdAsAuthorityInstruction(input, config) {
    // Program address.
    const programAddress = config?.programAddress ?? programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        settings: { value: input.settings ?? null, isWritable: true },
        settingsAuthority: {
            value: input.settingsAuthority ?? null,
            isWritable: false,
        },
        rentPayer: { value: input.rentPayer ?? null, isWritable: true },
        systemProgram: { value: input.systemProgram ?? null, isWritable: false },
        program: { value: input.program ?? null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = { ...input };
    // Resolve default values.
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111';
    }
    if (!accounts.program.value) {
        accounts.program.value =
            'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD';
    }
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.settings),
            getAccountMeta(accounts.settingsAuthority),
            getAccountMeta(accounts.rentPayer),
            getAccountMeta(accounts.systemProgram),
            getAccountMeta(accounts.program),
        ],
        programAddress,
        data: getChangeThresholdAsAuthorityInstructionDataEncoder().encode(args),
    };
    return instruction;
}
exports.getChangeThresholdAsAuthorityInstruction = getChangeThresholdAsAuthorityInstruction;
function parseChangeThresholdAsAuthorityInstruction(instruction) {
    if (instruction.accounts.length < 5) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    const getNextOptionalAccount = () => {
        const accountMeta = getNextAccount();
        return accountMeta.address === programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS
            ? undefined
            : accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            settings: getNextAccount(),
            settingsAuthority: getNextAccount(),
            rentPayer: getNextOptionalAccount(),
            systemProgram: getNextOptionalAccount(),
            program: getNextAccount(),
        },
        data: getChangeThresholdAsAuthorityInstructionDataDecoder().decode(instruction.data),
    };
}
exports.parseChangeThresholdAsAuthorityInstruction = parseChangeThresholdAsAuthorityInstruction;
