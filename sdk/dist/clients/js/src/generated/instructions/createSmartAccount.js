"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCreateSmartAccountInstruction = exports.getCreateSmartAccountInstruction = exports.getCreateSmartAccountInstructionAsync = exports.getCreateSmartAccountInstructionDataCodec = exports.getCreateSmartAccountInstructionDataDecoder = exports.getCreateSmartAccountInstructionDataEncoder = exports.getCreateSmartAccountDiscriminatorBytes = exports.CREATE_SMART_ACCOUNT_DISCRIMINATOR = void 0;
const kit_1 = require("@solana/kit");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
const types_1 = require("../types");
exports.CREATE_SMART_ACCOUNT_DISCRIMINATOR = new Uint8Array([
    197, 102, 253, 231, 77, 84, 50, 17,
]);
function getCreateSmartAccountDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.CREATE_SMART_ACCOUNT_DISCRIMINATOR);
}
exports.getCreateSmartAccountDiscriminatorBytes = getCreateSmartAccountDiscriminatorBytes;
function getCreateSmartAccountInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['settingsAuthority', (0, kit_1.getOptionEncoder)((0, kit_1.getAddressEncoder)())],
        ['threshold', (0, kit_1.getU16Encoder)()],
        ['signers', (0, kit_1.getArrayEncoder)((0, types_1.getSmartAccountSignerEncoder)())],
        [
            'restrictedSigners',
            (0, kit_1.getArrayEncoder)((0, types_1.getRestrictedSmartAccountSignerEncoder)()),
        ],
        ['timeLock', (0, kit_1.getU32Encoder)()],
        ['rentCollector', (0, kit_1.getOptionEncoder)((0, kit_1.getAddressEncoder)())],
        [
            'memo',
            (0, kit_1.getOptionEncoder)((0, kit_1.addEncoderSizePrefix)((0, kit_1.getUtf8Encoder)(), (0, kit_1.getU32Encoder)())),
        ],
    ]), (value) => ({ ...value, discriminator: exports.CREATE_SMART_ACCOUNT_DISCRIMINATOR }));
}
exports.getCreateSmartAccountInstructionDataEncoder = getCreateSmartAccountInstructionDataEncoder;
function getCreateSmartAccountInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['settingsAuthority', (0, kit_1.getOptionDecoder)((0, kit_1.getAddressDecoder)())],
        ['threshold', (0, kit_1.getU16Decoder)()],
        ['signers', (0, kit_1.getArrayDecoder)((0, types_1.getSmartAccountSignerDecoder)())],
        [
            'restrictedSigners',
            (0, kit_1.getArrayDecoder)((0, types_1.getRestrictedSmartAccountSignerDecoder)()),
        ],
        ['timeLock', (0, kit_1.getU32Decoder)()],
        ['rentCollector', (0, kit_1.getOptionDecoder)((0, kit_1.getAddressDecoder)())],
        [
            'memo',
            (0, kit_1.getOptionDecoder)((0, kit_1.addDecoderSizePrefix)((0, kit_1.getUtf8Decoder)(), (0, kit_1.getU32Decoder)())),
        ],
    ]);
}
exports.getCreateSmartAccountInstructionDataDecoder = getCreateSmartAccountInstructionDataDecoder;
function getCreateSmartAccountInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getCreateSmartAccountInstructionDataEncoder(), getCreateSmartAccountInstructionDataDecoder());
}
exports.getCreateSmartAccountInstructionDataCodec = getCreateSmartAccountInstructionDataCodec;
async function getCreateSmartAccountInstructionAsync(input, config) {
    // Program address.
    const programAddress = config?.programAddress ?? programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        programConfig: { value: input.programConfig ?? null, isWritable: true },
        settings: { value: input.settings ?? null, isWritable: true },
        treasury: { value: input.treasury ?? null, isWritable: true },
        creator: { value: input.creator ?? null, isWritable: true },
        systemProgram: { value: input.systemProgram ?? null, isWritable: false },
        program: { value: input.program ?? null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = { ...input };
    // Resolve default values.
    if (!accounts.programConfig.value) {
        accounts.programConfig.value = await (0, kit_1.getProgramDerivedAddress)({
            programAddress,
            seeds: [
                (0, kit_1.getBytesEncoder)().encode(new Uint8Array([
                    115, 109, 97, 114, 116, 95, 97, 99, 99, 111, 117, 110, 116,
                ])),
                (0, kit_1.getBytesEncoder)().encode(new Uint8Array([
                    112, 114, 111, 103, 114, 97, 109, 95, 99, 111, 110, 102, 105, 103,
                ])),
            ],
        });
    }
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111';
    }
    if (!accounts.program.value) {
        accounts.program.value =
            'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD';
    }
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.programConfig),
            getAccountMeta(accounts.settings),
            getAccountMeta(accounts.treasury),
            getAccountMeta(accounts.creator),
            getAccountMeta(accounts.systemProgram),
            getAccountMeta(accounts.program),
        ],
        programAddress,
        data: getCreateSmartAccountInstructionDataEncoder().encode(args),
    };
    return instruction;
}
exports.getCreateSmartAccountInstructionAsync = getCreateSmartAccountInstructionAsync;
function getCreateSmartAccountInstruction(input, config) {
    // Program address.
    const programAddress = config?.programAddress ?? programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        programConfig: { value: input.programConfig ?? null, isWritable: true },
        settings: { value: input.settings ?? null, isWritable: true },
        treasury: { value: input.treasury ?? null, isWritable: true },
        creator: { value: input.creator ?? null, isWritable: true },
        systemProgram: { value: input.systemProgram ?? null, isWritable: false },
        program: { value: input.program ?? null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = { ...input };
    // Resolve default values.
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111';
    }
    if (!accounts.program.value) {
        accounts.program.value =
            'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD';
    }
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.programConfig),
            getAccountMeta(accounts.settings),
            getAccountMeta(accounts.treasury),
            getAccountMeta(accounts.creator),
            getAccountMeta(accounts.systemProgram),
            getAccountMeta(accounts.program),
        ],
        programAddress,
        data: getCreateSmartAccountInstructionDataEncoder().encode(args),
    };
    return instruction;
}
exports.getCreateSmartAccountInstruction = getCreateSmartAccountInstruction;
function parseCreateSmartAccountInstruction(instruction) {
    if (instruction.accounts.length < 6) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            programConfig: getNextAccount(),
            settings: getNextAccount(),
            treasury: getNextAccount(),
            creator: getNextAccount(),
            systemProgram: getNextAccount(),
            program: getNextAccount(),
        },
        data: getCreateSmartAccountInstructionDataDecoder().decode(instruction.data),
    };
}
exports.parseCreateSmartAccountInstruction = parseCreateSmartAccountInstruction;
