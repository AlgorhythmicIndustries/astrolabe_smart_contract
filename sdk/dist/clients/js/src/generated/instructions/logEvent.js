"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseLogEventInstruction = exports.getLogEventInstruction = exports.getLogEventInstructionDataCodec = exports.getLogEventInstructionDataDecoder = exports.getLogEventInstructionDataEncoder = exports.getLogEventDiscriminatorBytes = exports.LOG_EVENT_DISCRIMINATOR = void 0;
const kit_1 = require("@solana/kit");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
exports.LOG_EVENT_DISCRIMINATOR = new Uint8Array([
    5, 9, 90, 141, 223, 134, 57, 217,
]);
function getLogEventDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.LOG_EVENT_DISCRIMINATOR);
}
exports.getLogEventDiscriminatorBytes = getLogEventDiscriminatorBytes;
function getLogEventInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        [
            'accountSeeds',
            (0, kit_1.getArrayEncoder)((0, kit_1.addEncoderSizePrefix)((0, kit_1.getBytesEncoder)(), (0, kit_1.getU32Encoder)())),
        ],
        ['bump', (0, kit_1.getU8Encoder)()],
        ['event', (0, kit_1.addEncoderSizePrefix)((0, kit_1.getBytesEncoder)(), (0, kit_1.getU32Encoder)())],
    ]), (value) => ({ ...value, discriminator: exports.LOG_EVENT_DISCRIMINATOR }));
}
exports.getLogEventInstructionDataEncoder = getLogEventInstructionDataEncoder;
function getLogEventInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        [
            'accountSeeds',
            (0, kit_1.getArrayDecoder)((0, kit_1.addDecoderSizePrefix)((0, kit_1.getBytesDecoder)(), (0, kit_1.getU32Decoder)())),
        ],
        ['bump', (0, kit_1.getU8Decoder)()],
        ['event', (0, kit_1.addDecoderSizePrefix)((0, kit_1.getBytesDecoder)(), (0, kit_1.getU32Decoder)())],
    ]);
}
exports.getLogEventInstructionDataDecoder = getLogEventInstructionDataDecoder;
function getLogEventInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getLogEventInstructionDataEncoder(), getLogEventInstructionDataDecoder());
}
exports.getLogEventInstructionDataCodec = getLogEventInstructionDataCodec;
function getLogEventInstruction(input, config) {
    // Program address.
    const programAddress = config?.programAddress ?? programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        logAuthority: { value: input.logAuthority ?? null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = { ...input };
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    const instruction = {
        accounts: [getAccountMeta(accounts.logAuthority)],
        programAddress,
        data: getLogEventInstructionDataEncoder().encode(args),
    };
    return instruction;
}
exports.getLogEventInstruction = getLogEventInstruction;
function parseLogEventInstruction(instruction) {
    if (instruction.accounts.length < 1) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            logAuthority: getNextAccount(),
        },
        data: getLogEventInstructionDataDecoder().decode(instruction.data),
    };
}
exports.parseLogEventInstruction = parseLogEventInstruction;
