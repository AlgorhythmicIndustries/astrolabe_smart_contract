/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { type RestrictedSmartAccountSigner, type RestrictedSmartAccountSignerArgs, type SmartAccountSigner, type SmartAccountSignerArgs } from '../types';
export declare const CREATE_SMART_ACCOUNT_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getCreateSmartAccountDiscriminatorBytes(): ReadonlyUint8Array;
export type CreateSmartAccountInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountProgramConfig extends string | IAccountMeta<string> = string, TAccountSettings extends string | IAccountMeta<string> = string, TAccountTreasury extends string | IAccountMeta<string> = string, TAccountCreator extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountProgram extends string | IAccountMeta<string> = 'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountProgramConfig extends string ? WritableAccount<TAccountProgramConfig> : TAccountProgramConfig,
    TAccountSettings extends string ? WritableAccount<TAccountSettings> : TAccountSettings,
    TAccountTreasury extends string ? WritableAccount<TAccountTreasury> : TAccountTreasury,
    TAccountCreator extends string ? WritableSignerAccount<TAccountCreator> & IAccountSignerMeta<TAccountCreator> : TAccountCreator,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountProgram extends string ? ReadonlyAccount<TAccountProgram> : TAccountProgram,
    ...TRemainingAccounts
]>;
export type CreateSmartAccountInstructionData = {
    discriminator: ReadonlyUint8Array;
    /**
     * The authority that can configure the smart account: add/remove signers, change the threshold, etc.
     * Should be set to `None` for autonomous smart accounts.
     */
    settingsAuthority: Option<Address>;
    /** The number of signatures required to execute a transaction. */
    threshold: number;
    /** The signers on the smart account. */
    signers: Array<SmartAccountSigner>;
    /** The restricted signers on the smart account. */
    restrictedSigners: Array<RestrictedSmartAccountSigner>;
    /** How many seconds must pass between transaction voting, settlement, and execution. */
    timeLock: number;
    /**
     * The address where the rent for the accounts related to executed, rejected, or cancelled
     * transactions can be reclaimed. If set to `None`, the rent reclamation feature is turned off.
     */
    rentCollector: Option<Address>;
    /** Memo is used for indexing only. */
    memo: Option<string>;
};
export type CreateSmartAccountInstructionDataArgs = {
    /**
     * The authority that can configure the smart account: add/remove signers, change the threshold, etc.
     * Should be set to `None` for autonomous smart accounts.
     */
    settingsAuthority: OptionOrNullable<Address>;
    /** The number of signatures required to execute a transaction. */
    threshold: number;
    /** The signers on the smart account. */
    signers: Array<SmartAccountSignerArgs>;
    /** The restricted signers on the smart account. */
    restrictedSigners: Array<RestrictedSmartAccountSignerArgs>;
    /** How many seconds must pass between transaction voting, settlement, and execution. */
    timeLock: number;
    /**
     * The address where the rent for the accounts related to executed, rejected, or cancelled
     * transactions can be reclaimed. If set to `None`, the rent reclamation feature is turned off.
     */
    rentCollector: OptionOrNullable<Address>;
    /** Memo is used for indexing only. */
    memo: OptionOrNullable<string>;
};
export declare function getCreateSmartAccountInstructionDataEncoder(): Encoder<CreateSmartAccountInstructionDataArgs>;
export declare function getCreateSmartAccountInstructionDataDecoder(): Decoder<CreateSmartAccountInstructionData>;
export declare function getCreateSmartAccountInstructionDataCodec(): Codec<CreateSmartAccountInstructionDataArgs, CreateSmartAccountInstructionData>;
export type CreateSmartAccountAsyncInput<TAccountProgramConfig extends string = string, TAccountSettings extends string = string, TAccountTreasury extends string = string, TAccountCreator extends string = string, TAccountSystemProgram extends string = string, TAccountProgram extends string = string> = {
    /** Global program config account. */
    programConfig?: Address<TAccountProgramConfig>;
    /** The settings account for the smart account. */
    settings: Address<TAccountSettings>;
    /** The treasury where the creation fee is transferred to. */
    treasury: Address<TAccountTreasury>;
    /** The creator of the smart account. */
    creator: TransactionSigner<TAccountCreator>;
    systemProgram?: Address<TAccountSystemProgram>;
    program?: Address<TAccountProgram>;
    settingsAuthority: CreateSmartAccountInstructionDataArgs['settingsAuthority'];
    threshold: CreateSmartAccountInstructionDataArgs['threshold'];
    signers: CreateSmartAccountInstructionDataArgs['signers'];
    restrictedSigners: CreateSmartAccountInstructionDataArgs['restrictedSigners'];
    timeLock: CreateSmartAccountInstructionDataArgs['timeLock'];
    rentCollector: CreateSmartAccountInstructionDataArgs['rentCollector'];
    memo: CreateSmartAccountInstructionDataArgs['memo'];
};
export declare function getCreateSmartAccountInstructionAsync<TAccountProgramConfig extends string, TAccountSettings extends string, TAccountTreasury extends string, TAccountCreator extends string, TAccountSystemProgram extends string, TAccountProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: CreateSmartAccountAsyncInput<TAccountProgramConfig, TAccountSettings, TAccountTreasury, TAccountCreator, TAccountSystemProgram, TAccountProgram>, config?: {
    programAddress?: TProgramAddress;
}): Promise<CreateSmartAccountInstruction<TProgramAddress, TAccountProgramConfig, TAccountSettings, TAccountTreasury, TAccountCreator, TAccountSystemProgram, TAccountProgram>>;
export type CreateSmartAccountInput<TAccountProgramConfig extends string = string, TAccountSettings extends string = string, TAccountTreasury extends string = string, TAccountCreator extends string = string, TAccountSystemProgram extends string = string, TAccountProgram extends string = string> = {
    /** Global program config account. */
    programConfig: Address<TAccountProgramConfig>;
    /** The settings account for the smart account. */
    settings: Address<TAccountSettings>;
    /** The treasury where the creation fee is transferred to. */
    treasury: Address<TAccountTreasury>;
    /** The creator of the smart account. */
    creator: TransactionSigner<TAccountCreator>;
    systemProgram?: Address<TAccountSystemProgram>;
    program?: Address<TAccountProgram>;
    settingsAuthority: CreateSmartAccountInstructionDataArgs['settingsAuthority'];
    threshold: CreateSmartAccountInstructionDataArgs['threshold'];
    signers: CreateSmartAccountInstructionDataArgs['signers'];
    restrictedSigners: CreateSmartAccountInstructionDataArgs['restrictedSigners'];
    timeLock: CreateSmartAccountInstructionDataArgs['timeLock'];
    rentCollector: CreateSmartAccountInstructionDataArgs['rentCollector'];
    memo: CreateSmartAccountInstructionDataArgs['memo'];
};
export declare function getCreateSmartAccountInstruction<TAccountProgramConfig extends string, TAccountSettings extends string, TAccountTreasury extends string, TAccountCreator extends string, TAccountSystemProgram extends string, TAccountProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: CreateSmartAccountInput<TAccountProgramConfig, TAccountSettings, TAccountTreasury, TAccountCreator, TAccountSystemProgram, TAccountProgram>, config?: {
    programAddress?: TProgramAddress;
}): CreateSmartAccountInstruction<TProgramAddress, TAccountProgramConfig, TAccountSettings, TAccountTreasury, TAccountCreator, TAccountSystemProgram, TAccountProgram>;
export type ParsedCreateSmartAccountInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Global program config account. */
        programConfig: TAccountMetas[0];
        /** The settings account for the smart account. */
        settings: TAccountMetas[1];
        /** The treasury where the creation fee is transferred to. */
        treasury: TAccountMetas[2];
        /** The creator of the smart account. */
        creator: TAccountMetas[3];
        systemProgram: TAccountMetas[4];
        program: TAccountMetas[5];
    };
    data: CreateSmartAccountInstructionData;
};
export declare function parseCreateSmartAccountInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedCreateSmartAccountInstruction<TProgram, TAccountMetas>;
