/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
export declare const USE_SPENDING_LIMIT_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getUseSpendingLimitDiscriminatorBytes(): ReadonlyUint8Array;
export type UseSpendingLimitInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | AccountMeta<string> = string, TAccountSigner extends string | AccountMeta<string> = string, TAccountSpendingLimit extends string | AccountMeta<string> = string, TAccountSmartAccount extends string | AccountMeta<string> = string, TAccountDestination extends string | AccountMeta<string> = string, TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111', TAccountMint extends string | AccountMeta<string> = string, TAccountSmartAccountTokenAccount extends string | AccountMeta<string> = string, TAccountDestinationTokenAccount extends string | AccountMeta<string> = string, TAccountTokenProgram extends string | AccountMeta<string> = string, TAccountProgram extends string | AccountMeta<string> = 'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q', TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountSettings extends string ? ReadonlyAccount<TAccountSettings> : TAccountSettings,
    TAccountSigner extends string ? ReadonlySignerAccount<TAccountSigner> & AccountSignerMeta<TAccountSigner> : TAccountSigner,
    TAccountSpendingLimit extends string ? WritableAccount<TAccountSpendingLimit> : TAccountSpendingLimit,
    TAccountSmartAccount extends string ? WritableAccount<TAccountSmartAccount> : TAccountSmartAccount,
    TAccountDestination extends string ? WritableAccount<TAccountDestination> : TAccountDestination,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountMint extends string ? ReadonlyAccount<TAccountMint> : TAccountMint,
    TAccountSmartAccountTokenAccount extends string ? WritableAccount<TAccountSmartAccountTokenAccount> : TAccountSmartAccountTokenAccount,
    TAccountDestinationTokenAccount extends string ? WritableAccount<TAccountDestinationTokenAccount> : TAccountDestinationTokenAccount,
    TAccountTokenProgram extends string ? ReadonlyAccount<TAccountTokenProgram> : TAccountTokenProgram,
    TAccountProgram extends string ? ReadonlyAccount<TAccountProgram> : TAccountProgram,
    ...TRemainingAccounts
]>;
export type UseSpendingLimitInstructionData = {
    discriminator: ReadonlyUint8Array;
    /** Amount of tokens to transfer. */
    amount: bigint;
    /** Decimals of the token mint. Used for double-checking against incorrect order of magnitude of `amount`. */
    decimals: number;
    /** Memo used for indexing. */
    memo: Option<string>;
};
export type UseSpendingLimitInstructionDataArgs = {
    /** Amount of tokens to transfer. */
    amount: number | bigint;
    /** Decimals of the token mint. Used for double-checking against incorrect order of magnitude of `amount`. */
    decimals: number;
    /** Memo used for indexing. */
    memo: OptionOrNullable<string>;
};
export declare function getUseSpendingLimitInstructionDataEncoder(): Encoder<UseSpendingLimitInstructionDataArgs>;
export declare function getUseSpendingLimitInstructionDataDecoder(): Decoder<UseSpendingLimitInstructionData>;
export declare function getUseSpendingLimitInstructionDataCodec(): Codec<UseSpendingLimitInstructionDataArgs, UseSpendingLimitInstructionData>;
export type UseSpendingLimitInput<TAccountSettings extends string = string, TAccountSigner extends string = string, TAccountSpendingLimit extends string = string, TAccountSmartAccount extends string = string, TAccountDestination extends string = string, TAccountSystemProgram extends string = string, TAccountMint extends string = string, TAccountSmartAccountTokenAccount extends string = string, TAccountDestinationTokenAccount extends string = string, TAccountTokenProgram extends string = string, TAccountProgram extends string = string> = {
    /** The settings the `spending_limit` belongs to. */
    settings: Address<TAccountSettings>;
    signer: TransactionSigner<TAccountSigner>;
    /** The SpendingLimit account to use. */
    spendingLimit: Address<TAccountSpendingLimit>;
    /** Smart account to transfer tokens from. */
    smartAccount: Address<TAccountSmartAccount>;
    /** Destination account to transfer tokens to. */
    destination: Address<TAccountDestination>;
    /** In case `spending_limit.mint` is SOL. */
    systemProgram?: Address<TAccountSystemProgram>;
    /** The mint of the tokens to transfer in case `spending_limit.mint` is an SPL token. */
    mint?: Address<TAccountMint>;
    /** Smart account token account to transfer tokens from in case `spending_limit.mint` is an SPL token. */
    smartAccountTokenAccount?: Address<TAccountSmartAccountTokenAccount>;
    /** Destination token account in case `spending_limit.mint` is an SPL token. */
    destinationTokenAccount?: Address<TAccountDestinationTokenAccount>;
    /** In case `spending_limit.mint` is an SPL token. */
    tokenProgram?: Address<TAccountTokenProgram>;
    program?: Address<TAccountProgram>;
    amount: UseSpendingLimitInstructionDataArgs['amount'];
    decimals: UseSpendingLimitInstructionDataArgs['decimals'];
    memo: UseSpendingLimitInstructionDataArgs['memo'];
};
export declare function getUseSpendingLimitInstruction<TAccountSettings extends string, TAccountSigner extends string, TAccountSpendingLimit extends string, TAccountSmartAccount extends string, TAccountDestination extends string, TAccountSystemProgram extends string, TAccountMint extends string, TAccountSmartAccountTokenAccount extends string, TAccountDestinationTokenAccount extends string, TAccountTokenProgram extends string, TAccountProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: UseSpendingLimitInput<TAccountSettings, TAccountSigner, TAccountSpendingLimit, TAccountSmartAccount, TAccountDestination, TAccountSystemProgram, TAccountMint, TAccountSmartAccountTokenAccount, TAccountDestinationTokenAccount, TAccountTokenProgram, TAccountProgram>, config?: {
    programAddress?: TProgramAddress;
}): UseSpendingLimitInstruction<TProgramAddress, TAccountSettings, TAccountSigner, TAccountSpendingLimit, TAccountSmartAccount, TAccountDestination, TAccountSystemProgram, TAccountMint, TAccountSmartAccountTokenAccount, TAccountDestinationTokenAccount, TAccountTokenProgram, TAccountProgram>;
export type ParsedUseSpendingLimitInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** The settings the `spending_limit` belongs to. */
        settings: TAccountMetas[0];
        signer: TAccountMetas[1];
        /** The SpendingLimit account to use. */
        spendingLimit: TAccountMetas[2];
        /** Smart account to transfer tokens from. */
        smartAccount: TAccountMetas[3];
        /** Destination account to transfer tokens to. */
        destination: TAccountMetas[4];
        /** In case `spending_limit.mint` is SOL. */
        systemProgram?: TAccountMetas[5] | undefined;
        /** The mint of the tokens to transfer in case `spending_limit.mint` is an SPL token. */
        mint?: TAccountMetas[6] | undefined;
        /** Smart account token account to transfer tokens from in case `spending_limit.mint` is an SPL token. */
        smartAccountTokenAccount?: TAccountMetas[7] | undefined;
        /** Destination token account in case `spending_limit.mint` is an SPL token. */
        destinationTokenAccount?: TAccountMetas[8] | undefined;
        /** In case `spending_limit.mint` is an SPL token. */
        tokenProgram?: TAccountMetas[9] | undefined;
        program: TAccountMetas[10];
    };
    data: UseSpendingLimitInstructionData;
};
export declare function parseUseSpendingLimitInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedUseSpendingLimitInstruction<TProgram, TAccountMetas>;
