"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseCreateProposalInstruction = exports.getCreateProposalInstruction = exports.getCreateProposalInstructionDataCodec = exports.getCreateProposalInstructionDataDecoder = exports.getCreateProposalInstructionDataEncoder = exports.getCreateProposalDiscriminatorBytes = exports.CREATE_PROPOSAL_DISCRIMINATOR = void 0;
const kit_1 = require("@solana/kit");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
exports.CREATE_PROPOSAL_DISCRIMINATOR = new Uint8Array([
    132, 116, 68, 174, 216, 160, 198, 22,
]);
function getCreateProposalDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.CREATE_PROPOSAL_DISCRIMINATOR);
}
exports.getCreateProposalDiscriminatorBytes = getCreateProposalDiscriminatorBytes;
function getCreateProposalInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['transactionIndex', (0, kit_1.getU64Encoder)()],
        ['draft', (0, kit_1.getBooleanEncoder)()],
    ]), (value) => ({ ...value, discriminator: exports.CREATE_PROPOSAL_DISCRIMINATOR }));
}
exports.getCreateProposalInstructionDataEncoder = getCreateProposalInstructionDataEncoder;
function getCreateProposalInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['transactionIndex', (0, kit_1.getU64Decoder)()],
        ['draft', (0, kit_1.getBooleanDecoder)()],
    ]);
}
exports.getCreateProposalInstructionDataDecoder = getCreateProposalInstructionDataDecoder;
function getCreateProposalInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getCreateProposalInstructionDataEncoder(), getCreateProposalInstructionDataDecoder());
}
exports.getCreateProposalInstructionDataCodec = getCreateProposalInstructionDataCodec;
function getCreateProposalInstruction(input, config) {
    // Program address.
    const programAddress = config?.programAddress ?? programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        settings: { value: input.settings ?? null, isWritable: false },
        proposal: { value: input.proposal ?? null, isWritable: true },
        creator: { value: input.creator ?? null, isWritable: false },
        rentPayer: { value: input.rentPayer ?? null, isWritable: true },
        systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = { ...input };
    // Resolve default values.
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111';
    }
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.settings),
            getAccountMeta(accounts.proposal),
            getAccountMeta(accounts.creator),
            getAccountMeta(accounts.rentPayer),
            getAccountMeta(accounts.systemProgram),
        ],
        programAddress,
        data: getCreateProposalInstructionDataEncoder().encode(args),
    };
    return instruction;
}
exports.getCreateProposalInstruction = getCreateProposalInstruction;
function parseCreateProposalInstruction(instruction) {
    if (instruction.accounts.length < 5) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            settings: getNextAccount(),
            proposal: getNextAccount(),
            creator: getNextAccount(),
            rentPayer: getNextAccount(),
            systemProgram: getNextAccount(),
        },
        data: getCreateProposalInstructionDataDecoder().decode(instruction.data),
    };
}
exports.parseCreateProposalInstruction = parseCreateProposalInstruction;
