/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
export declare const ACTIVATE_PROPOSAL_DISCRIMINATOR: Uint8Array;
export declare function getActivateProposalDiscriminatorBytes(): ReadonlyUint8Array;
export type ActivateProposalInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | IAccountMeta<string> = string, TAccountSigner extends string | IAccountMeta<string> = string, TAccountProposal extends string | IAccountMeta<string> = string, TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountSettings extends string ? ReadonlyAccount<TAccountSettings> : TAccountSettings,
    TAccountSigner extends string ? WritableSignerAccount<TAccountSigner> & IAccountSignerMeta<TAccountSigner> : TAccountSigner,
    TAccountProposal extends string ? WritableAccount<TAccountProposal> : TAccountProposal,
    ...TRemainingAccounts
]>;
export type ActivateProposalInstructionData = {
    discriminator: ReadonlyUint8Array;
};
export type ActivateProposalInstructionDataArgs = {};
export declare function getActivateProposalInstructionDataEncoder(): Encoder<ActivateProposalInstructionDataArgs>;
export declare function getActivateProposalInstructionDataDecoder(): Decoder<ActivateProposalInstructionData>;
export declare function getActivateProposalInstructionDataCodec(): Codec<ActivateProposalInstructionDataArgs, ActivateProposalInstructionData>;
export type ActivateProposalInput<TAccountSettings extends string = string, TAccountSigner extends string = string, TAccountProposal extends string = string> = {
    settings: Address<TAccountSettings>;
    signer: TransactionSigner<TAccountSigner>;
    proposal: Address<TAccountProposal>;
};
export declare function getActivateProposalInstruction<TAccountSettings extends string, TAccountSigner extends string, TAccountProposal extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: ActivateProposalInput<TAccountSettings, TAccountSigner, TAccountProposal>, config?: {
    programAddress?: TProgramAddress;
}): ActivateProposalInstruction<TProgramAddress, TAccountSettings, TAccountSigner, TAccountProposal>;
export type ParsedActivateProposalInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        settings: TAccountMetas[0];
        signer: TAccountMetas[1];
        proposal: TAccountMetas[2];
    };
    data: ActivateProposalInstructionData;
};
export declare function parseActivateProposalInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedActivateProposalInstruction<TProgram, TAccountMetas>;
