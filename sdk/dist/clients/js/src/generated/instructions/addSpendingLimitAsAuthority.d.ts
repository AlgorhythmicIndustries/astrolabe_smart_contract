/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { type Period, type PeriodArgs } from '../types';
export declare const ADD_SPENDING_LIMIT_AS_AUTHORITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getAddSpendingLimitAsAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
export type AddSpendingLimitAsAuthorityInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | AccountMeta<string> = string, TAccountSettingsAuthority extends string | AccountMeta<string> = string, TAccountSpendingLimit extends string | AccountMeta<string> = string, TAccountRentPayer extends string | AccountMeta<string> = string, TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111', TAccountProgram extends string | AccountMeta<string> = 'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q', TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountSettings extends string ? ReadonlyAccount<TAccountSettings> : TAccountSettings,
    TAccountSettingsAuthority extends string ? ReadonlySignerAccount<TAccountSettingsAuthority> & AccountSignerMeta<TAccountSettingsAuthority> : TAccountSettingsAuthority,
    TAccountSpendingLimit extends string ? WritableAccount<TAccountSpendingLimit> : TAccountSpendingLimit,
    TAccountRentPayer extends string ? WritableSignerAccount<TAccountRentPayer> & AccountSignerMeta<TAccountRentPayer> : TAccountRentPayer,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountProgram extends string ? ReadonlyAccount<TAccountProgram> : TAccountProgram,
    ...TRemainingAccounts
]>;
export type AddSpendingLimitAsAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
    /** Key that is used to seed the SpendingLimit PDA. */
    seed: Address;
    /** The index of the smart account that the spending limit is for. */
    accountIndex: number;
    /** The token mint the spending limit is for. */
    mint: Address;
    /**
     * The amount of tokens that can be spent in a period.
     * This amount is in decimals of the mint,
     * so 1 SOL would be `1_000_000_000` and 1 USDC would be `1_000_000`.
     */
    amount: bigint;
    /**
     * The reset period of the spending limit.
     * When it passes, the remaining amount is reset, unless it's `Period::OneTime`.
     */
    period: Period;
    /**
     * Signers of the Spending Limit that can use it.
     * Don't have to be signers of the settings.
     */
    signers: Array<Address>;
    /**
     * The destination addresses the spending limit is allowed to sent funds to.
     * If empty, funds can be sent to any address.
     */
    destinations: Array<Address>;
    /**
     * The expiration timestamp of the spending limit.
     * Non expiring spending limits are set to `i64::MAX`.
     */
    expiration: bigint;
    /** Memo is used for indexing only. */
    memo: Option<string>;
};
export type AddSpendingLimitAsAuthorityInstructionDataArgs = {
    /** Key that is used to seed the SpendingLimit PDA. */
    seed: Address;
    /** The index of the smart account that the spending limit is for. */
    accountIndex: number;
    /** The token mint the spending limit is for. */
    mint: Address;
    /**
     * The amount of tokens that can be spent in a period.
     * This amount is in decimals of the mint,
     * so 1 SOL would be `1_000_000_000` and 1 USDC would be `1_000_000`.
     */
    amount: number | bigint;
    /**
     * The reset period of the spending limit.
     * When it passes, the remaining amount is reset, unless it's `Period::OneTime`.
     */
    period: PeriodArgs;
    /**
     * Signers of the Spending Limit that can use it.
     * Don't have to be signers of the settings.
     */
    signers: Array<Address>;
    /**
     * The destination addresses the spending limit is allowed to sent funds to.
     * If empty, funds can be sent to any address.
     */
    destinations: Array<Address>;
    /**
     * The expiration timestamp of the spending limit.
     * Non expiring spending limits are set to `i64::MAX`.
     */
    expiration: number | bigint;
    /** Memo is used for indexing only. */
    memo: OptionOrNullable<string>;
};
export declare function getAddSpendingLimitAsAuthorityInstructionDataEncoder(): Encoder<AddSpendingLimitAsAuthorityInstructionDataArgs>;
export declare function getAddSpendingLimitAsAuthorityInstructionDataDecoder(): Decoder<AddSpendingLimitAsAuthorityInstructionData>;
export declare function getAddSpendingLimitAsAuthorityInstructionDataCodec(): Codec<AddSpendingLimitAsAuthorityInstructionDataArgs, AddSpendingLimitAsAuthorityInstructionData>;
export type AddSpendingLimitAsAuthorityInput<TAccountSettings extends string = string, TAccountSettingsAuthority extends string = string, TAccountSpendingLimit extends string = string, TAccountRentPayer extends string = string, TAccountSystemProgram extends string = string, TAccountProgram extends string = string> = {
    settings: Address<TAccountSettings>;
    /** Settings `settings_authority` that must authorize the configuration change. */
    settingsAuthority: TransactionSigner<TAccountSettingsAuthority>;
    spendingLimit: Address<TAccountSpendingLimit>;
    /** This is usually the same as `settings_authority`, but can be a different account if needed. */
    rentPayer: TransactionSigner<TAccountRentPayer>;
    systemProgram?: Address<TAccountSystemProgram>;
    program?: Address<TAccountProgram>;
    seed: AddSpendingLimitAsAuthorityInstructionDataArgs['seed'];
    accountIndex: AddSpendingLimitAsAuthorityInstructionDataArgs['accountIndex'];
    mint: AddSpendingLimitAsAuthorityInstructionDataArgs['mint'];
    amount: AddSpendingLimitAsAuthorityInstructionDataArgs['amount'];
    period: AddSpendingLimitAsAuthorityInstructionDataArgs['period'];
    signers: AddSpendingLimitAsAuthorityInstructionDataArgs['signers'];
    destinations: AddSpendingLimitAsAuthorityInstructionDataArgs['destinations'];
    expiration: AddSpendingLimitAsAuthorityInstructionDataArgs['expiration'];
    memo: AddSpendingLimitAsAuthorityInstructionDataArgs['memo'];
};
export declare function getAddSpendingLimitAsAuthorityInstruction<TAccountSettings extends string, TAccountSettingsAuthority extends string, TAccountSpendingLimit extends string, TAccountRentPayer extends string, TAccountSystemProgram extends string, TAccountProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: AddSpendingLimitAsAuthorityInput<TAccountSettings, TAccountSettingsAuthority, TAccountSpendingLimit, TAccountRentPayer, TAccountSystemProgram, TAccountProgram>, config?: {
    programAddress?: TProgramAddress;
}): AddSpendingLimitAsAuthorityInstruction<TProgramAddress, TAccountSettings, TAccountSettingsAuthority, TAccountSpendingLimit, TAccountRentPayer, TAccountSystemProgram, TAccountProgram>;
export type ParsedAddSpendingLimitAsAuthorityInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        settings: TAccountMetas[0];
        /** Settings `settings_authority` that must authorize the configuration change. */
        settingsAuthority: TAccountMetas[1];
        spendingLimit: TAccountMetas[2];
        /** This is usually the same as `settings_authority`, but can be a different account if needed. */
        rentPayer: TAccountMetas[3];
        systemProgram: TAccountMetas[4];
        program: TAccountMetas[5];
    };
    data: AddSpendingLimitAsAuthorityInstructionData;
};
export declare function parseAddSpendingLimitAsAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedAddSpendingLimitAsAuthorityInstruction<TProgram, TAccountMetas>;
