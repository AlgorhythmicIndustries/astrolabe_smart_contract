/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
export declare const CREATE_BATCH_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getCreateBatchDiscriminatorBytes(): ReadonlyUint8Array;
export type CreateBatchInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | AccountMeta<string> = string, TAccountBatch extends string | AccountMeta<string> = string, TAccountCreator extends string | AccountMeta<string> = string, TAccountRentPayer extends string | AccountMeta<string> = string, TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountSettings extends string ? WritableAccount<TAccountSettings> : TAccountSettings,
    TAccountBatch extends string ? WritableAccount<TAccountBatch> : TAccountBatch,
    TAccountCreator extends string ? ReadonlySignerAccount<TAccountCreator> & AccountSignerMeta<TAccountCreator> : TAccountCreator,
    TAccountRentPayer extends string ? WritableSignerAccount<TAccountRentPayer> & AccountSignerMeta<TAccountRentPayer> : TAccountRentPayer,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
export type CreateBatchInstructionData = {
    discriminator: ReadonlyUint8Array;
    /** Index of the smart account this batch belongs to. */
    accountIndex: number;
    memo: Option<string>;
};
export type CreateBatchInstructionDataArgs = {
    /** Index of the smart account this batch belongs to. */
    accountIndex: number;
    memo: OptionOrNullable<string>;
};
export declare function getCreateBatchInstructionDataEncoder(): Encoder<CreateBatchInstructionDataArgs>;
export declare function getCreateBatchInstructionDataDecoder(): Decoder<CreateBatchInstructionData>;
export declare function getCreateBatchInstructionDataCodec(): Codec<CreateBatchInstructionDataArgs, CreateBatchInstructionData>;
export type CreateBatchInput<TAccountSettings extends string = string, TAccountBatch extends string = string, TAccountCreator extends string = string, TAccountRentPayer extends string = string, TAccountSystemProgram extends string = string> = {
    settings: Address<TAccountSettings>;
    batch: Address<TAccountBatch>;
    /** The signer of the settings that is creating the batch. */
    creator: TransactionSigner<TAccountCreator>;
    /** The payer for the batch account rent. */
    rentPayer: TransactionSigner<TAccountRentPayer>;
    systemProgram?: Address<TAccountSystemProgram>;
    accountIndex: CreateBatchInstructionDataArgs['accountIndex'];
    memo: CreateBatchInstructionDataArgs['memo'];
};
export declare function getCreateBatchInstruction<TAccountSettings extends string, TAccountBatch extends string, TAccountCreator extends string, TAccountRentPayer extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: CreateBatchInput<TAccountSettings, TAccountBatch, TAccountCreator, TAccountRentPayer, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): CreateBatchInstruction<TProgramAddress, TAccountSettings, TAccountBatch, TAccountCreator, TAccountRentPayer, TAccountSystemProgram>;
export type ParsedCreateBatchInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        settings: TAccountMetas[0];
        batch: TAccountMetas[1];
        /** The signer of the settings that is creating the batch. */
        creator: TAccountMetas[2];
        /** The payer for the batch account rent. */
        rentPayer: TAccountMetas[3];
        systemProgram: TAccountMetas[4];
    };
    data: CreateBatchInstructionData;
};
export declare function parseCreateBatchInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedCreateBatchInstruction<TProgram, TAccountMetas>;
