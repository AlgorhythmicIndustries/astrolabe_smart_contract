"use strict";
/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SET_PROGRAM_CONFIG_TREASURY_DISCRIMINATOR = void 0;
exports.getSetProgramConfigTreasuryDiscriminatorBytes = getSetProgramConfigTreasuryDiscriminatorBytes;
exports.getSetProgramConfigTreasuryInstructionDataEncoder = getSetProgramConfigTreasuryInstructionDataEncoder;
exports.getSetProgramConfigTreasuryInstructionDataDecoder = getSetProgramConfigTreasuryInstructionDataDecoder;
exports.getSetProgramConfigTreasuryInstructionDataCodec = getSetProgramConfigTreasuryInstructionDataCodec;
exports.getSetProgramConfigTreasuryInstructionAsync = getSetProgramConfigTreasuryInstructionAsync;
exports.getSetProgramConfigTreasuryInstruction = getSetProgramConfigTreasuryInstruction;
exports.parseSetProgramConfigTreasuryInstruction = parseSetProgramConfigTreasuryInstruction;
const kit_1 = require("@solana/kit");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
exports.SET_PROGRAM_CONFIG_TREASURY_DISCRIMINATOR = new Uint8Array([
    244, 119, 192, 190, 182, 101, 227, 189,
]);
function getSetProgramConfigTreasuryDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.SET_PROGRAM_CONFIG_TREASURY_DISCRIMINATOR);
}
function getSetProgramConfigTreasuryInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['newTreasury', (0, kit_1.getAddressEncoder)()],
    ]), (value) => ({
        ...value,
        discriminator: exports.SET_PROGRAM_CONFIG_TREASURY_DISCRIMINATOR,
    }));
}
function getSetProgramConfigTreasuryInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['newTreasury', (0, kit_1.getAddressDecoder)()],
    ]);
}
function getSetProgramConfigTreasuryInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getSetProgramConfigTreasuryInstructionDataEncoder(), getSetProgramConfigTreasuryInstructionDataDecoder());
}
async function getSetProgramConfigTreasuryInstructionAsync(input, config) {
    // Program address.
    const programAddress = config?.programAddress ?? programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        programConfig: { value: input.programConfig ?? null, isWritable: true },
        authority: { value: input.authority ?? null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = { ...input };
    // Resolve default values.
    if (!accounts.programConfig.value) {
        accounts.programConfig.value = await (0, kit_1.getProgramDerivedAddress)({
            programAddress,
            seeds: [
                (0, kit_1.getBytesEncoder)().encode(new Uint8Array([
                    115, 109, 97, 114, 116, 95, 97, 99, 99, 111, 117, 110, 116,
                ])),
                (0, kit_1.getBytesEncoder)().encode(new Uint8Array([
                    112, 114, 111, 103, 114, 97, 109, 95, 99, 111, 110, 102, 105, 103,
                ])),
            ],
        });
    }
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    return Object.freeze({
        accounts: [
            getAccountMeta(accounts.programConfig),
            getAccountMeta(accounts.authority),
        ],
        data: getSetProgramConfigTreasuryInstructionDataEncoder().encode(args),
        programAddress,
    });
}
function getSetProgramConfigTreasuryInstruction(input, config) {
    // Program address.
    const programAddress = config?.programAddress ?? programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        programConfig: { value: input.programConfig ?? null, isWritable: true },
        authority: { value: input.authority ?? null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = { ...input };
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    return Object.freeze({
        accounts: [
            getAccountMeta(accounts.programConfig),
            getAccountMeta(accounts.authority),
        ],
        data: getSetProgramConfigTreasuryInstructionDataEncoder().encode(args),
        programAddress,
    });
}
function parseSetProgramConfigTreasuryInstruction(instruction) {
    if (instruction.accounts.length < 2) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: { programConfig: getNextAccount(), authority: getNextAccount() },
        data: getSetProgramConfigTreasuryInstructionDataDecoder().decode(instruction.data),
    };
}
