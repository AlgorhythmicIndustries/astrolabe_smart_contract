/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { type SmartAccountSigner, type SmartAccountSignerArgs } from '../types';
export declare const ADD_SIGNER_AS_AUTHORITY_DISCRIMINATOR: Uint8Array;
export declare function getAddSignerAsAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
export type AddSignerAsAuthorityInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | IAccountMeta<string> = string, TAccountSettingsAuthority extends string | IAccountMeta<string> = string, TAccountRentPayer extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TAccountProgram extends string | IAccountMeta<string> = 'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountSettings extends string ? WritableAccount<TAccountSettings> : TAccountSettings,
    TAccountSettingsAuthority extends string ? ReadonlySignerAccount<TAccountSettingsAuthority> & IAccountSignerMeta<TAccountSettingsAuthority> : TAccountSettingsAuthority,
    TAccountRentPayer extends string ? WritableSignerAccount<TAccountRentPayer> & IAccountSignerMeta<TAccountRentPayer> : TAccountRentPayer,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountProgram extends string ? ReadonlyAccount<TAccountProgram> : TAccountProgram,
    ...TRemainingAccounts
]>;
export type AddSignerAsAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
    newSigner: SmartAccountSigner;
    /** Memo is used for indexing only. */
    memo: Option<string>;
};
export type AddSignerAsAuthorityInstructionDataArgs = {
    newSigner: SmartAccountSignerArgs;
    /** Memo is used for indexing only. */
    memo: OptionOrNullable<string>;
};
export declare function getAddSignerAsAuthorityInstructionDataEncoder(): Encoder<AddSignerAsAuthorityInstructionDataArgs>;
export declare function getAddSignerAsAuthorityInstructionDataDecoder(): Decoder<AddSignerAsAuthorityInstructionData>;
export declare function getAddSignerAsAuthorityInstructionDataCodec(): Codec<AddSignerAsAuthorityInstructionDataArgs, AddSignerAsAuthorityInstructionData>;
export type AddSignerAsAuthorityInput<TAccountSettings extends string = string, TAccountSettingsAuthority extends string = string, TAccountRentPayer extends string = string, TAccountSystemProgram extends string = string, TAccountProgram extends string = string> = {
    settings: Address<TAccountSettings>;
    /** Settings `settings_authority` that must authorize the configuration change. */
    settingsAuthority: TransactionSigner<TAccountSettingsAuthority>;
    /**
     * The account that will be charged or credited in case the settings account needs to reallocate space,
     * for example when adding a new signer or a spending limit.
     * This is usually the same as `settings_authority`, but can be a different account if needed.
     */
    rentPayer?: TransactionSigner<TAccountRentPayer>;
    /** We might need it in case reallocation is needed. */
    systemProgram?: Address<TAccountSystemProgram>;
    program?: Address<TAccountProgram>;
    newSigner: AddSignerAsAuthorityInstructionDataArgs['newSigner'];
    memo: AddSignerAsAuthorityInstructionDataArgs['memo'];
};
export declare function getAddSignerAsAuthorityInstruction<TAccountSettings extends string, TAccountSettingsAuthority extends string, TAccountRentPayer extends string, TAccountSystemProgram extends string, TAccountProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: AddSignerAsAuthorityInput<TAccountSettings, TAccountSettingsAuthority, TAccountRentPayer, TAccountSystemProgram, TAccountProgram>, config?: {
    programAddress?: TProgramAddress;
}): AddSignerAsAuthorityInstruction<TProgramAddress, TAccountSettings, TAccountSettingsAuthority, TAccountRentPayer, TAccountSystemProgram, TAccountProgram>;
export type ParsedAddSignerAsAuthorityInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        settings: TAccountMetas[0];
        /** Settings `settings_authority` that must authorize the configuration change. */
        settingsAuthority: TAccountMetas[1];
        /**
         * The account that will be charged or credited in case the settings account needs to reallocate space,
         * for example when adding a new signer or a spending limit.
         * This is usually the same as `settings_authority`, but can be a different account if needed.
         */
        rentPayer?: TAccountMetas[2] | undefined;
        /** We might need it in case reallocation is needed. */
        systemProgram?: TAccountMetas[3] | undefined;
        program: TAccountMetas[4];
    };
    data: AddSignerAsAuthorityInstructionData;
};
export declare function parseAddSignerAsAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedAddSignerAsAuthorityInstruction<TProgram, TAccountMetas>;
