/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
export declare const CREATE_TRANSACTION_BUFFER_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getCreateTransactionBufferDiscriminatorBytes(): ReadonlyUint8Array;
export type CreateTransactionBufferInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | AccountMeta<string> = string, TAccountTransactionBuffer extends string | AccountMeta<string> = string, TAccountBufferCreator extends string | AccountMeta<string> = string, TAccountRentPayer extends string | AccountMeta<string> = string, TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountSettings extends string ? ReadonlyAccount<TAccountSettings> : TAccountSettings,
    TAccountTransactionBuffer extends string ? WritableAccount<TAccountTransactionBuffer> : TAccountTransactionBuffer,
    TAccountBufferCreator extends string ? ReadonlySignerAccount<TAccountBufferCreator> & AccountSignerMeta<TAccountBufferCreator> : TAccountBufferCreator,
    TAccountRentPayer extends string ? WritableSignerAccount<TAccountRentPayer> & AccountSignerMeta<TAccountRentPayer> : TAccountRentPayer,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
export type CreateTransactionBufferInstructionData = {
    discriminator: ReadonlyUint8Array;
    /** Index of the buffer account to seed the account derivation */
    bufferIndex: number;
    /** Index of the smart account this transaction belongs to. */
    accountIndex: number;
    /** Hash of the final assembled transaction message. */
    finalBufferHash: ReadonlyUint8Array;
    /** Final size of the buffer. */
    finalBufferSize: number;
    /** Initial slice of the buffer. */
    buffer: ReadonlyUint8Array;
};
export type CreateTransactionBufferInstructionDataArgs = {
    /** Index of the buffer account to seed the account derivation */
    bufferIndex: number;
    /** Index of the smart account this transaction belongs to. */
    accountIndex: number;
    /** Hash of the final assembled transaction message. */
    finalBufferHash: ReadonlyUint8Array;
    /** Final size of the buffer. */
    finalBufferSize: number;
    /** Initial slice of the buffer. */
    buffer: ReadonlyUint8Array;
};
export declare function getCreateTransactionBufferInstructionDataEncoder(): Encoder<CreateTransactionBufferInstructionDataArgs>;
export declare function getCreateTransactionBufferInstructionDataDecoder(): Decoder<CreateTransactionBufferInstructionData>;
export declare function getCreateTransactionBufferInstructionDataCodec(): Codec<CreateTransactionBufferInstructionDataArgs, CreateTransactionBufferInstructionData>;
export type CreateTransactionBufferInput<TAccountSettings extends string = string, TAccountTransactionBuffer extends string = string, TAccountBufferCreator extends string = string, TAccountRentPayer extends string = string, TAccountSystemProgram extends string = string> = {
    settings: Address<TAccountSettings>;
    transactionBuffer: Address<TAccountTransactionBuffer>;
    /** The signer on the smart account that is creating the transaction. */
    bufferCreator: TransactionSigner<TAccountBufferCreator>;
    /** The payer for the transaction account rent. */
    rentPayer: TransactionSigner<TAccountRentPayer>;
    systemProgram?: Address<TAccountSystemProgram>;
    bufferIndex: CreateTransactionBufferInstructionDataArgs['bufferIndex'];
    accountIndex: CreateTransactionBufferInstructionDataArgs['accountIndex'];
    finalBufferHash: CreateTransactionBufferInstructionDataArgs['finalBufferHash'];
    finalBufferSize: CreateTransactionBufferInstructionDataArgs['finalBufferSize'];
    buffer: CreateTransactionBufferInstructionDataArgs['buffer'];
};
export declare function getCreateTransactionBufferInstruction<TAccountSettings extends string, TAccountTransactionBuffer extends string, TAccountBufferCreator extends string, TAccountRentPayer extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: CreateTransactionBufferInput<TAccountSettings, TAccountTransactionBuffer, TAccountBufferCreator, TAccountRentPayer, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): CreateTransactionBufferInstruction<TProgramAddress, TAccountSettings, TAccountTransactionBuffer, TAccountBufferCreator, TAccountRentPayer, TAccountSystemProgram>;
export type ParsedCreateTransactionBufferInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        settings: TAccountMetas[0];
        transactionBuffer: TAccountMetas[1];
        /** The signer on the smart account that is creating the transaction. */
        bufferCreator: TAccountMetas[2];
        /** The payer for the transaction account rent. */
        rentPayer: TAccountMetas[3];
        systemProgram: TAccountMetas[4];
    };
    data: CreateTransactionBufferInstructionData;
};
export declare function parseCreateTransactionBufferInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedCreateTransactionBufferInstruction<TProgram, TAccountMetas>;
