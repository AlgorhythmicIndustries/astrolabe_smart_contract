"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EXECUTE_TRANSACTION_SYNC_DISCRIMINATOR = void 0;
exports.getExecuteTransactionSyncDiscriminatorBytes = getExecuteTransactionSyncDiscriminatorBytes;
exports.getExecuteTransactionSyncInstructionDataEncoder = getExecuteTransactionSyncInstructionDataEncoder;
exports.getExecuteTransactionSyncInstructionDataDecoder = getExecuteTransactionSyncInstructionDataDecoder;
exports.getExecuteTransactionSyncInstructionDataCodec = getExecuteTransactionSyncInstructionDataCodec;
exports.getExecuteTransactionSyncInstruction = getExecuteTransactionSyncInstruction;
exports.parseExecuteTransactionSyncInstruction = parseExecuteTransactionSyncInstruction;
const kit_1 = require("@solana/kit");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
exports.EXECUTE_TRANSACTION_SYNC_DISCRIMINATOR = new Uint8Array([
    43, 102, 248, 89, 231, 97, 104, 134,
]);
function getExecuteTransactionSyncDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.EXECUTE_TRANSACTION_SYNC_DISCRIMINATOR);
}
function getExecuteTransactionSyncInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['accountIndex', (0, kit_1.getU8Encoder)()],
        ['numSigners', (0, kit_1.getU8Encoder)()],
        [
            'instructions',
            (0, kit_1.addEncoderSizePrefix)((0, kit_1.getBytesEncoder)(), (0, kit_1.getU32Encoder)()),
        ],
    ]), (value) => ({
        ...value,
        discriminator: exports.EXECUTE_TRANSACTION_SYNC_DISCRIMINATOR,
    }));
}
function getExecuteTransactionSyncInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['accountIndex', (0, kit_1.getU8Decoder)()],
        ['numSigners', (0, kit_1.getU8Decoder)()],
        ['instructions', (0, kit_1.addDecoderSizePrefix)((0, kit_1.getBytesDecoder)(), (0, kit_1.getU32Decoder)())],
    ]);
}
function getExecuteTransactionSyncInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getExecuteTransactionSyncInstructionDataEncoder(), getExecuteTransactionSyncInstructionDataDecoder());
}
function getExecuteTransactionSyncInstruction(input, config) {
    // Program address.
    const programAddress = config?.programAddress ?? programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        settings: { value: input.settings ?? null, isWritable: false },
        program: { value: input.program ?? null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = { ...input };
    // Resolve default values.
    if (!accounts.program.value) {
        accounts.program.value =
            'GyhGAqjokLwF9UXdQ2dR5Zwiup242j4mX4J1tSMKyAmD';
    }
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.settings),
            getAccountMeta(accounts.program),
        ],
        programAddress,
        data: getExecuteTransactionSyncInstructionDataEncoder().encode(args),
    };
    return instruction;
}
function parseExecuteTransactionSyncInstruction(instruction) {
    if (instruction.accounts.length < 2) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            settings: getNextAccount(),
            program: getNextAccount(),
        },
        data: getExecuteTransactionSyncInstructionDataDecoder().decode(instruction.data),
    };
}
