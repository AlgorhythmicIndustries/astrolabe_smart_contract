/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type WritableAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
export declare const CLOSE_SETTINGS_TRANSACTION_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getCloseSettingsTransactionDiscriminatorBytes(): ReadonlyUint8Array;
export type CloseSettingsTransactionInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | IAccountMeta<string> = string, TAccountProposal extends string | IAccountMeta<string> = string, TAccountTransaction extends string | IAccountMeta<string> = string, TAccountProposalRentCollector extends string | IAccountMeta<string> = string, TAccountTransactionRentCollector extends string | IAccountMeta<string> = string, TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountSettings extends string ? ReadonlyAccount<TAccountSettings> : TAccountSettings,
    TAccountProposal extends string ? WritableAccount<TAccountProposal> : TAccountProposal,
    TAccountTransaction extends string ? WritableAccount<TAccountTransaction> : TAccountTransaction,
    TAccountProposalRentCollector extends string ? WritableAccount<TAccountProposalRentCollector> : TAccountProposalRentCollector,
    TAccountTransactionRentCollector extends string ? WritableAccount<TAccountTransactionRentCollector> : TAccountTransactionRentCollector,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
export type CloseSettingsTransactionInstructionData = {
    discriminator: ReadonlyUint8Array;
};
export type CloseSettingsTransactionInstructionDataArgs = {};
export declare function getCloseSettingsTransactionInstructionDataEncoder(): Encoder<CloseSettingsTransactionInstructionDataArgs>;
export declare function getCloseSettingsTransactionInstructionDataDecoder(): Decoder<CloseSettingsTransactionInstructionData>;
export declare function getCloseSettingsTransactionInstructionDataCodec(): Codec<CloseSettingsTransactionInstructionDataArgs, CloseSettingsTransactionInstructionData>;
export type CloseSettingsTransactionInput<TAccountSettings extends string = string, TAccountProposal extends string = string, TAccountTransaction extends string = string, TAccountProposalRentCollector extends string = string, TAccountTransactionRentCollector extends string = string, TAccountSystemProgram extends string = string> = {
    settings: Address<TAccountSettings>;
    /** the logic within `settings_transaction_close` does the rest of the checks. */
    proposal: Address<TAccountProposal>;
    /** SettingsTransaction corresponding to the `proposal`. */
    transaction: Address<TAccountTransaction>;
    /** The rent payer for the proposal account. */
    proposalRentCollector: Address<TAccountProposalRentCollector>;
    /** The rent collector. */
    transactionRentCollector: Address<TAccountTransactionRentCollector>;
    systemProgram?: Address<TAccountSystemProgram>;
};
export declare function getCloseSettingsTransactionInstruction<TAccountSettings extends string, TAccountProposal extends string, TAccountTransaction extends string, TAccountProposalRentCollector extends string, TAccountTransactionRentCollector extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: CloseSettingsTransactionInput<TAccountSettings, TAccountProposal, TAccountTransaction, TAccountProposalRentCollector, TAccountTransactionRentCollector, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): CloseSettingsTransactionInstruction<TProgramAddress, TAccountSettings, TAccountProposal, TAccountTransaction, TAccountProposalRentCollector, TAccountTransactionRentCollector, TAccountSystemProgram>;
export type ParsedCloseSettingsTransactionInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        settings: TAccountMetas[0];
        /** the logic within `settings_transaction_close` does the rest of the checks. */
        proposal: TAccountMetas[1];
        /** SettingsTransaction corresponding to the `proposal`. */
        transaction: TAccountMetas[2];
        /** The rent payer for the proposal account. */
        proposalRentCollector: TAccountMetas[3];
        /** The rent collector. */
        transactionRentCollector: TAccountMetas[4];
        systemProgram: TAccountMetas[5];
    };
    data: CloseSettingsTransactionInstructionData;
};
export declare function parseCloseSettingsTransactionInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedCloseSettingsTransactionInstruction<TProgram, TAccountMetas>;
