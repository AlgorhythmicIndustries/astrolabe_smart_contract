/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
export declare const EXECUTE_TRANSACTION_SYNC_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getExecuteTransactionSyncDiscriminatorBytes(): ReadonlyUint8Array;
export type ExecuteTransactionSyncInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | AccountMeta<string> = string, TAccountProgram extends string | AccountMeta<string> = 'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q', TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountSettings extends string ? ReadonlyAccount<TAccountSettings> : TAccountSettings,
    TAccountProgram extends string ? ReadonlyAccount<TAccountProgram> : TAccountProgram,
    ...TRemainingAccounts
]>;
export type ExecuteTransactionSyncInstructionData = {
    discriminator: ReadonlyUint8Array;
    /** The index of the smart account this transaction is for */
    accountIndex: number;
    /** The number of signers to reach threshold and adequate permissions */
    numSigners: number;
    /** Expected to be serialized as a Vec<u8, CompiledInstruction> */
    instructions: ReadonlyUint8Array;
};
export type ExecuteTransactionSyncInstructionDataArgs = {
    /** The index of the smart account this transaction is for */
    accountIndex: number;
    /** The number of signers to reach threshold and adequate permissions */
    numSigners: number;
    /** Expected to be serialized as a Vec<u8, CompiledInstruction> */
    instructions: ReadonlyUint8Array;
};
export declare function getExecuteTransactionSyncInstructionDataEncoder(): Encoder<ExecuteTransactionSyncInstructionDataArgs>;
export declare function getExecuteTransactionSyncInstructionDataDecoder(): Decoder<ExecuteTransactionSyncInstructionData>;
export declare function getExecuteTransactionSyncInstructionDataCodec(): Codec<ExecuteTransactionSyncInstructionDataArgs, ExecuteTransactionSyncInstructionData>;
export type ExecuteTransactionSyncInput<TAccountSettings extends string = string, TAccountProgram extends string = string> = {
    settings: Address<TAccountSettings>;
    program?: Address<TAccountProgram>;
    accountIndex: ExecuteTransactionSyncInstructionDataArgs['accountIndex'];
    numSigners: ExecuteTransactionSyncInstructionDataArgs['numSigners'];
    instructions: ExecuteTransactionSyncInstructionDataArgs['instructions'];
};
export declare function getExecuteTransactionSyncInstruction<TAccountSettings extends string, TAccountProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: ExecuteTransactionSyncInput<TAccountSettings, TAccountProgram>, config?: {
    programAddress?: TProgramAddress;
}): ExecuteTransactionSyncInstruction<TProgramAddress, TAccountSettings, TAccountProgram>;
export type ParsedExecuteTransactionSyncInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        settings: TAccountMetas[0];
        program: TAccountMetas[1];
    };
    data: ExecuteTransactionSyncInstructionData;
};
export declare function parseExecuteTransactionSyncInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedExecuteTransactionSyncInstruction<TProgram, TAccountMetas>;
