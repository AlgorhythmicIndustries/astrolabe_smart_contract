/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
import { type CreateTransactionArgs, type CreateTransactionArgsArgs } from '../types';
export declare const CREATE_TRANSACTION_FROM_BUFFER_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getCreateTransactionFromBufferDiscriminatorBytes(): ReadonlyUint8Array;
export type CreateTransactionFromBufferInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | AccountMeta<string> = string, TAccountTransaction extends string | AccountMeta<string> = string, TAccountCreator extends string | AccountMeta<string> = string, TAccountRentPayer extends string | AccountMeta<string> = string, TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111', TAccountTransactionBuffer extends string | AccountMeta<string> = string, TAccountBufferCreator extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountSettings extends string ? WritableAccount<TAccountSettings> : TAccountSettings,
    TAccountTransaction extends string ? WritableAccount<TAccountTransaction> : TAccountTransaction,
    TAccountCreator extends string ? ReadonlySignerAccount<TAccountCreator> & AccountSignerMeta<TAccountCreator> : TAccountCreator,
    TAccountRentPayer extends string ? WritableSignerAccount<TAccountRentPayer> & AccountSignerMeta<TAccountRentPayer> : TAccountRentPayer,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountTransactionBuffer extends string ? WritableAccount<TAccountTransactionBuffer> : TAccountTransactionBuffer,
    TAccountBufferCreator extends string ? WritableSignerAccount<TAccountBufferCreator> & AccountSignerMeta<TAccountBufferCreator> : TAccountBufferCreator,
    ...TRemainingAccounts
]>;
export type CreateTransactionFromBufferInstructionData = {
    discriminator: ReadonlyUint8Array;
    args: CreateTransactionArgs;
};
export type CreateTransactionFromBufferInstructionDataArgs = {
    args: CreateTransactionArgsArgs;
};
export declare function getCreateTransactionFromBufferInstructionDataEncoder(): Encoder<CreateTransactionFromBufferInstructionDataArgs>;
export declare function getCreateTransactionFromBufferInstructionDataDecoder(): Decoder<CreateTransactionFromBufferInstructionData>;
export declare function getCreateTransactionFromBufferInstructionDataCodec(): Codec<CreateTransactionFromBufferInstructionDataArgs, CreateTransactionFromBufferInstructionData>;
export type CreateTransactionFromBufferInput<TAccountSettings extends string = string, TAccountTransaction extends string = string, TAccountCreator extends string = string, TAccountRentPayer extends string = string, TAccountSystemProgram extends string = string, TAccountTransactionBuffer extends string = string, TAccountBufferCreator extends string = string> = {
    settings: Address<TAccountSettings>;
    transaction: Address<TAccountTransaction>;
    /** The member of the multisig that is creating the transaction. */
    creator: TransactionSigner<TAccountCreator>;
    /** The payer for the transaction account rent. */
    rentPayer: TransactionSigner<TAccountRentPayer>;
    systemProgram?: Address<TAccountSystemProgram>;
    transactionBuffer: Address<TAccountTransactionBuffer>;
    bufferCreator: TransactionSigner<TAccountBufferCreator>;
    args: CreateTransactionFromBufferInstructionDataArgs['args'];
};
export declare function getCreateTransactionFromBufferInstruction<TAccountSettings extends string, TAccountTransaction extends string, TAccountCreator extends string, TAccountRentPayer extends string, TAccountSystemProgram extends string, TAccountTransactionBuffer extends string, TAccountBufferCreator extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: CreateTransactionFromBufferInput<TAccountSettings, TAccountTransaction, TAccountCreator, TAccountRentPayer, TAccountSystemProgram, TAccountTransactionBuffer, TAccountBufferCreator>, config?: {
    programAddress?: TProgramAddress;
}): CreateTransactionFromBufferInstruction<TProgramAddress, TAccountSettings, TAccountTransaction, TAccountCreator, TAccountRentPayer, TAccountSystemProgram, TAccountTransactionBuffer, TAccountBufferCreator>;
export type ParsedCreateTransactionFromBufferInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        settings: TAccountMetas[0];
        transaction: TAccountMetas[1];
        /** The member of the multisig that is creating the transaction. */
        creator: TAccountMetas[2];
        /** The payer for the transaction account rent. */
        rentPayer: TAccountMetas[3];
        systemProgram: TAccountMetas[4];
        transactionBuffer: TAccountMetas[5];
        bufferCreator: TAccountMetas[6];
    };
    data: CreateTransactionFromBufferInstructionData;
};
export declare function parseCreateTransactionFromBufferInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedCreateTransactionFromBufferInstruction<TProgram, TAccountMetas>;
