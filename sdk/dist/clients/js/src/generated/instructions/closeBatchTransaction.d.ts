/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type WritableAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
export declare const CLOSE_BATCH_TRANSACTION_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getCloseBatchTransactionDiscriminatorBytes(): ReadonlyUint8Array;
export type CloseBatchTransactionInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | AccountMeta<string> = string, TAccountProposal extends string | AccountMeta<string> = string, TAccountBatch extends string | AccountMeta<string> = string, TAccountTransaction extends string | AccountMeta<string> = string, TAccountTransactionRentCollector extends string | AccountMeta<string> = string, TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountSettings extends string ? ReadonlyAccount<TAccountSettings> : TAccountSettings,
    TAccountProposal extends string ? ReadonlyAccount<TAccountProposal> : TAccountProposal,
    TAccountBatch extends string ? WritableAccount<TAccountBatch> : TAccountBatch,
    TAccountTransaction extends string ? WritableAccount<TAccountTransaction> : TAccountTransaction,
    TAccountTransactionRentCollector extends string ? WritableAccount<TAccountTransactionRentCollector> : TAccountTransactionRentCollector,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
export type CloseBatchTransactionInstructionData = {
    discriminator: ReadonlyUint8Array;
};
export type CloseBatchTransactionInstructionDataArgs = {};
export declare function getCloseBatchTransactionInstructionDataEncoder(): FixedSizeEncoder<CloseBatchTransactionInstructionDataArgs>;
export declare function getCloseBatchTransactionInstructionDataDecoder(): FixedSizeDecoder<CloseBatchTransactionInstructionData>;
export declare function getCloseBatchTransactionInstructionDataCodec(): FixedSizeCodec<CloseBatchTransactionInstructionDataArgs, CloseBatchTransactionInstructionData>;
export type CloseBatchTransactionInput<TAccountSettings extends string = string, TAccountProposal extends string = string, TAccountBatch extends string = string, TAccountTransaction extends string = string, TAccountTransactionRentCollector extends string = string, TAccountSystemProgram extends string = string> = {
    settings: Address<TAccountSettings>;
    proposal: Address<TAccountProposal>;
    /** `Batch` corresponding to the `proposal`. */
    batch: Address<TAccountBatch>;
    /**
     * `BatchTransaction` account to close.
     * The transaction must be the current last one in the batch.
     */
    transaction: Address<TAccountTransaction>;
    /** The rent collector. */
    transactionRentCollector: Address<TAccountTransactionRentCollector>;
    systemProgram?: Address<TAccountSystemProgram>;
};
export declare function getCloseBatchTransactionInstruction<TAccountSettings extends string, TAccountProposal extends string, TAccountBatch extends string, TAccountTransaction extends string, TAccountTransactionRentCollector extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: CloseBatchTransactionInput<TAccountSettings, TAccountProposal, TAccountBatch, TAccountTransaction, TAccountTransactionRentCollector, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): CloseBatchTransactionInstruction<TProgramAddress, TAccountSettings, TAccountProposal, TAccountBatch, TAccountTransaction, TAccountTransactionRentCollector, TAccountSystemProgram>;
export type ParsedCloseBatchTransactionInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        settings: TAccountMetas[0];
        proposal: TAccountMetas[1];
        /** `Batch` corresponding to the `proposal`. */
        batch: TAccountMetas[2];
        /**
         * `BatchTransaction` account to close.
         * The transaction must be the current last one in the batch.
         */
        transaction: TAccountMetas[3];
        /** The rent collector. */
        transactionRentCollector: TAccountMetas[4];
        systemProgram: TAccountMetas[5];
    };
    data: CloseBatchTransactionInstructionData;
};
export declare function parseCloseBatchTransactionInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedCloseBatchTransactionInstruction<TProgram, TAccountMetas>;
