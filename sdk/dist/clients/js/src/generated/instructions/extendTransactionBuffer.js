"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.EXTEND_TRANSACTION_BUFFER_DISCRIMINATOR = void 0;
exports.getExtendTransactionBufferDiscriminatorBytes = getExtendTransactionBufferDiscriminatorBytes;
exports.getExtendTransactionBufferInstructionDataEncoder = getExtendTransactionBufferInstructionDataEncoder;
exports.getExtendTransactionBufferInstructionDataDecoder = getExtendTransactionBufferInstructionDataDecoder;
exports.getExtendTransactionBufferInstructionDataCodec = getExtendTransactionBufferInstructionDataCodec;
exports.getExtendTransactionBufferInstruction = getExtendTransactionBufferInstruction;
exports.parseExtendTransactionBufferInstruction = parseExtendTransactionBufferInstruction;
const kit_1 = require("@solana/kit");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
exports.EXTEND_TRANSACTION_BUFFER_DISCRIMINATOR = new Uint8Array([
    190, 86, 246, 95, 231, 154, 229, 91,
]);
function getExtendTransactionBufferDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.EXTEND_TRANSACTION_BUFFER_DISCRIMINATOR);
}
function getExtendTransactionBufferInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['buffer', (0, kit_1.addEncoderSizePrefix)((0, kit_1.getBytesEncoder)(), (0, kit_1.getU32Encoder)())],
    ]), (value) => ({
        ...value,
        discriminator: exports.EXTEND_TRANSACTION_BUFFER_DISCRIMINATOR,
    }));
}
function getExtendTransactionBufferInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['buffer', (0, kit_1.addDecoderSizePrefix)((0, kit_1.getBytesDecoder)(), (0, kit_1.getU32Decoder)())],
    ]);
}
function getExtendTransactionBufferInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getExtendTransactionBufferInstructionDataEncoder(), getExtendTransactionBufferInstructionDataDecoder());
}
function getExtendTransactionBufferInstruction(input, config) {
    // Program address.
    const programAddress = config?.programAddress ?? programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        settings: { value: input.settings ?? null, isWritable: false },
        transactionBuffer: {
            value: input.transactionBuffer ?? null,
            isWritable: true,
        },
        creator: { value: input.creator ?? null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = { ...input };
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.settings),
            getAccountMeta(accounts.transactionBuffer),
            getAccountMeta(accounts.creator),
        ],
        programAddress,
        data: getExtendTransactionBufferInstructionDataEncoder().encode(args),
    };
    return instruction;
}
function parseExtendTransactionBufferInstruction(instruction) {
    if (instruction.accounts.length < 3) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            settings: getNextAccount(),
            transactionBuffer: getNextAccount(),
            creator: getNextAccount(),
        },
        data: getExtendTransactionBufferInstructionDataDecoder().decode(instruction.data),
    };
}
