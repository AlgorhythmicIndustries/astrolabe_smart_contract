/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type FixedSizeCodec, type FixedSizeDecoder, type FixedSizeEncoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
export declare const EXECUTE_BATCH_TRANSACTION_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getExecuteBatchTransactionDiscriminatorBytes(): ReadonlyUint8Array;
export type ExecuteBatchTransactionInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | AccountMeta<string> = string, TAccountSigner extends string | AccountMeta<string> = string, TAccountProposal extends string | AccountMeta<string> = string, TAccountBatch extends string | AccountMeta<string> = string, TAccountTransaction extends string | AccountMeta<string> = string, TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountSettings extends string ? ReadonlyAccount<TAccountSettings> : TAccountSettings,
    TAccountSigner extends string ? ReadonlySignerAccount<TAccountSigner> & AccountSignerMeta<TAccountSigner> : TAccountSigner,
    TAccountProposal extends string ? WritableAccount<TAccountProposal> : TAccountProposal,
    TAccountBatch extends string ? WritableAccount<TAccountBatch> : TAccountBatch,
    TAccountTransaction extends string ? ReadonlyAccount<TAccountTransaction> : TAccountTransaction,
    ...TRemainingAccounts
]>;
export type ExecuteBatchTransactionInstructionData = {
    discriminator: ReadonlyUint8Array;
};
export type ExecuteBatchTransactionInstructionDataArgs = {};
export declare function getExecuteBatchTransactionInstructionDataEncoder(): FixedSizeEncoder<ExecuteBatchTransactionInstructionDataArgs>;
export declare function getExecuteBatchTransactionInstructionDataDecoder(): FixedSizeDecoder<ExecuteBatchTransactionInstructionData>;
export declare function getExecuteBatchTransactionInstructionDataCodec(): FixedSizeCodec<ExecuteBatchTransactionInstructionDataArgs, ExecuteBatchTransactionInstructionData>;
export type ExecuteBatchTransactionInput<TAccountSettings extends string = string, TAccountSigner extends string = string, TAccountProposal extends string = string, TAccountBatch extends string = string, TAccountTransaction extends string = string> = {
    /** Settings account this batch belongs to. */
    settings: Address<TAccountSettings>;
    /** Signer of the settings. */
    signer: TransactionSigner<TAccountSigner>;
    /**
     * The proposal account associated with the batch.
     * If `transaction` is the last in the batch, the `proposal` status will be set to `Executed`.
     */
    proposal: Address<TAccountProposal>;
    batch: Address<TAccountBatch>;
    /** Batch transaction to execute. */
    transaction: Address<TAccountTransaction>;
};
export declare function getExecuteBatchTransactionInstruction<TAccountSettings extends string, TAccountSigner extends string, TAccountProposal extends string, TAccountBatch extends string, TAccountTransaction extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: ExecuteBatchTransactionInput<TAccountSettings, TAccountSigner, TAccountProposal, TAccountBatch, TAccountTransaction>, config?: {
    programAddress?: TProgramAddress;
}): ExecuteBatchTransactionInstruction<TProgramAddress, TAccountSettings, TAccountSigner, TAccountProposal, TAccountBatch, TAccountTransaction>;
export type ParsedExecuteBatchTransactionInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        /** Settings account this batch belongs to. */
        settings: TAccountMetas[0];
        /** Signer of the settings. */
        signer: TAccountMetas[1];
        /**
         * The proposal account associated with the batch.
         * If `transaction` is the last in the batch, the `proposal` status will be set to `Executed`.
         */
        proposal: TAccountMetas[2];
        batch: TAccountMetas[3];
        /** Batch transaction to execute. */
        transaction: TAccountMetas[4];
    };
    data: ExecuteBatchTransactionInstructionData;
};
export declare function parseExecuteBatchTransactionInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedExecuteBatchTransactionInstruction<TProgram, TAccountMetas>;
