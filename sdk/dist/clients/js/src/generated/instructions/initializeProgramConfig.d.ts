/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type IAccountMeta, type IAccountSignerMeta, type IInstruction, type IInstructionWithAccounts, type IInstructionWithData, type ReadonlyAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
export declare const INITIALIZE_PROGRAM_CONFIG_DISCRIMINATOR: Uint8Array;
export declare function getInitializeProgramConfigDiscriminatorBytes(): ReadonlyUint8Array;
export type InitializeProgramConfigInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountProgramConfig extends string | IAccountMeta<string> = string, TAccountInitializer extends string | IAccountMeta<string> = 'BrQAbGdWQ9YUHmWWgKFdFe4miTURH71jkYFPXfaosqDv', TAccountSystemProgram extends string | IAccountMeta<string> = '11111111111111111111111111111111', TRemainingAccounts extends readonly IAccountMeta<string>[] = []> = IInstruction<TProgram> & IInstructionWithData<Uint8Array> & IInstructionWithAccounts<[
    TAccountProgramConfig extends string ? WritableAccount<TAccountProgramConfig> : TAccountProgramConfig,
    TAccountInitializer extends string ? WritableSignerAccount<TAccountInitializer> & IAccountSignerMeta<TAccountInitializer> : TAccountInitializer,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    ...TRemainingAccounts
]>;
export type InitializeProgramConfigInstructionData = {
    discriminator: ReadonlyUint8Array;
    /** The authority that can configure the program config: change the treasury, etc. */
    authority: Address;
    /** The fee that is charged for creating a new smart account. */
    smartAccountCreationFee: bigint;
    /** The treasury where the creation fee is transferred to. */
    treasury: Address;
};
export type InitializeProgramConfigInstructionDataArgs = {
    /** The authority that can configure the program config: change the treasury, etc. */
    authority: Address;
    /** The fee that is charged for creating a new smart account. */
    smartAccountCreationFee: number | bigint;
    /** The treasury where the creation fee is transferred to. */
    treasury: Address;
};
export declare function getInitializeProgramConfigInstructionDataEncoder(): Encoder<InitializeProgramConfigInstructionDataArgs>;
export declare function getInitializeProgramConfigInstructionDataDecoder(): Decoder<InitializeProgramConfigInstructionData>;
export declare function getInitializeProgramConfigInstructionDataCodec(): Codec<InitializeProgramConfigInstructionDataArgs, InitializeProgramConfigInstructionData>;
export type InitializeProgramConfigAsyncInput<TAccountProgramConfig extends string = string, TAccountInitializer extends string = string, TAccountSystemProgram extends string = string> = {
    programConfig?: Address<TAccountProgramConfig>;
    /** The hard-coded account that is used to initialize the program config once. */
    initializer?: TransactionSigner<TAccountInitializer>;
    systemProgram?: Address<TAccountSystemProgram>;
    authority: InitializeProgramConfigInstructionDataArgs['authority'];
    smartAccountCreationFee: InitializeProgramConfigInstructionDataArgs['smartAccountCreationFee'];
    treasury: InitializeProgramConfigInstructionDataArgs['treasury'];
};
export declare function getInitializeProgramConfigInstructionAsync<TAccountProgramConfig extends string, TAccountInitializer extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: InitializeProgramConfigAsyncInput<TAccountProgramConfig, TAccountInitializer, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): Promise<InitializeProgramConfigInstruction<TProgramAddress, TAccountProgramConfig, TAccountInitializer, TAccountSystemProgram>>;
export type InitializeProgramConfigInput<TAccountProgramConfig extends string = string, TAccountInitializer extends string = string, TAccountSystemProgram extends string = string> = {
    programConfig: Address<TAccountProgramConfig>;
    /** The hard-coded account that is used to initialize the program config once. */
    initializer?: TransactionSigner<TAccountInitializer>;
    systemProgram?: Address<TAccountSystemProgram>;
    authority: InitializeProgramConfigInstructionDataArgs['authority'];
    smartAccountCreationFee: InitializeProgramConfigInstructionDataArgs['smartAccountCreationFee'];
    treasury: InitializeProgramConfigInstructionDataArgs['treasury'];
};
export declare function getInitializeProgramConfigInstruction<TAccountProgramConfig extends string, TAccountInitializer extends string, TAccountSystemProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: InitializeProgramConfigInput<TAccountProgramConfig, TAccountInitializer, TAccountSystemProgram>, config?: {
    programAddress?: TProgramAddress;
}): InitializeProgramConfigInstruction<TProgramAddress, TAccountProgramConfig, TAccountInitializer, TAccountSystemProgram>;
export type ParsedInitializeProgramConfigInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        programConfig: TAccountMetas[0];
        /** The hard-coded account that is used to initialize the program config once. */
        initializer: TAccountMetas[1];
        systemProgram: TAccountMetas[2];
    };
    data: InitializeProgramConfigInstructionData;
};
export declare function parseInitializeProgramConfigInstruction<TProgram extends string, TAccountMetas extends readonly IAccountMeta[]>(instruction: IInstruction<TProgram> & IInstructionWithAccounts<TAccountMetas> & IInstructionWithData<Uint8Array>): ParsedInitializeProgramConfigInstruction<TProgram, TAccountMetas>;
