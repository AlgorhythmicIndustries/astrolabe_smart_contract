"use strict";
/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CREATE_BATCH_DISCRIMINATOR = void 0;
exports.getCreateBatchDiscriminatorBytes = getCreateBatchDiscriminatorBytes;
exports.getCreateBatchInstructionDataEncoder = getCreateBatchInstructionDataEncoder;
exports.getCreateBatchInstructionDataDecoder = getCreateBatchInstructionDataDecoder;
exports.getCreateBatchInstructionDataCodec = getCreateBatchInstructionDataCodec;
exports.getCreateBatchInstruction = getCreateBatchInstruction;
exports.parseCreateBatchInstruction = parseCreateBatchInstruction;
const kit_1 = require("@solana/kit");
const programs_1 = require("../programs");
const shared_1 = require("../shared");
exports.CREATE_BATCH_DISCRIMINATOR = new Uint8Array([
    159, 198, 248, 43, 248, 31, 235, 86,
]);
function getCreateBatchDiscriminatorBytes() {
    return (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8).encode(exports.CREATE_BATCH_DISCRIMINATOR);
}
function getCreateBatchInstructionDataEncoder() {
    return (0, kit_1.transformEncoder)((0, kit_1.getStructEncoder)([
        ['discriminator', (0, kit_1.fixEncoderSize)((0, kit_1.getBytesEncoder)(), 8)],
        ['accountIndex', (0, kit_1.getU8Encoder)()],
        [
            'memo',
            (0, kit_1.getOptionEncoder)((0, kit_1.addEncoderSizePrefix)((0, kit_1.getUtf8Encoder)(), (0, kit_1.getU32Encoder)())),
        ],
    ]), (value) => ({ ...value, discriminator: exports.CREATE_BATCH_DISCRIMINATOR }));
}
function getCreateBatchInstructionDataDecoder() {
    return (0, kit_1.getStructDecoder)([
        ['discriminator', (0, kit_1.fixDecoderSize)((0, kit_1.getBytesDecoder)(), 8)],
        ['accountIndex', (0, kit_1.getU8Decoder)()],
        [
            'memo',
            (0, kit_1.getOptionDecoder)((0, kit_1.addDecoderSizePrefix)((0, kit_1.getUtf8Decoder)(), (0, kit_1.getU32Decoder)())),
        ],
    ]);
}
function getCreateBatchInstructionDataCodec() {
    return (0, kit_1.combineCodec)(getCreateBatchInstructionDataEncoder(), getCreateBatchInstructionDataDecoder());
}
function getCreateBatchInstruction(input, config) {
    // Program address.
    const programAddress = config?.programAddress ?? programs_1.ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS;
    // Original accounts.
    const originalAccounts = {
        settings: { value: input.settings ?? null, isWritable: true },
        batch: { value: input.batch ?? null, isWritable: true },
        creator: { value: input.creator ?? null, isWritable: false },
        rentPayer: { value: input.rentPayer ?? null, isWritable: true },
        systemProgram: { value: input.systemProgram ?? null, isWritable: false },
    };
    const accounts = originalAccounts;
    // Original args.
    const args = { ...input };
    // Resolve default values.
    if (!accounts.systemProgram.value) {
        accounts.systemProgram.value =
            '11111111111111111111111111111111';
    }
    const getAccountMeta = (0, shared_1.getAccountMetaFactory)(programAddress, 'programId');
    const instruction = {
        accounts: [
            getAccountMeta(accounts.settings),
            getAccountMeta(accounts.batch),
            getAccountMeta(accounts.creator),
            getAccountMeta(accounts.rentPayer),
            getAccountMeta(accounts.systemProgram),
        ],
        programAddress,
        data: getCreateBatchInstructionDataEncoder().encode(args),
    };
    return instruction;
}
function parseCreateBatchInstruction(instruction) {
    if (instruction.accounts.length < 5) {
        // TODO: Coded error.
        throw new Error('Not enough accounts');
    }
    let accountIndex = 0;
    const getNextAccount = () => {
        const accountMeta = instruction.accounts[accountIndex];
        accountIndex += 1;
        return accountMeta;
    };
    return {
        programAddress: instruction.programAddress,
        accounts: {
            settings: getNextAccount(),
            batch: getNextAccount(),
            creator: getNextAccount(),
            rentPayer: getNextAccount(),
            systemProgram: getNextAccount(),
        },
        data: getCreateBatchInstructionDataDecoder().decode(instruction.data),
    };
}
