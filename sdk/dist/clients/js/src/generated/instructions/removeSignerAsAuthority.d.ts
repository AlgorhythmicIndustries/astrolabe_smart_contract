/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type AccountMeta, type AccountSignerMeta, type Address, type Codec, type Decoder, type Encoder, type Instruction, type InstructionWithAccounts, type InstructionWithData, type Option, type OptionOrNullable, type ReadonlyAccount, type ReadonlySignerAccount, type ReadonlyUint8Array, type TransactionSigner, type WritableAccount, type WritableSignerAccount } from '@solana/kit';
import { ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS } from '../programs';
export declare const REMOVE_SIGNER_AS_AUTHORITY_DISCRIMINATOR: Uint8Array<ArrayBuffer>;
export declare function getRemoveSignerAsAuthorityDiscriminatorBytes(): ReadonlyUint8Array;
export type RemoveSignerAsAuthorityInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountSettings extends string | AccountMeta<string> = string, TAccountSettingsAuthority extends string | AccountMeta<string> = string, TAccountRentPayer extends string | AccountMeta<string> = string, TAccountSystemProgram extends string | AccountMeta<string> = '11111111111111111111111111111111', TAccountProgram extends string | AccountMeta<string> = 'ASTRjN4RRXupfb6d2HD24ozu8Gbwqf6JmS32UnNeGQ6q', TRemainingAccounts extends readonly AccountMeta<string>[] = []> = Instruction<TProgram> & InstructionWithData<ReadonlyUint8Array> & InstructionWithAccounts<[
    TAccountSettings extends string ? WritableAccount<TAccountSettings> : TAccountSettings,
    TAccountSettingsAuthority extends string ? ReadonlySignerAccount<TAccountSettingsAuthority> & AccountSignerMeta<TAccountSettingsAuthority> : TAccountSettingsAuthority,
    TAccountRentPayer extends string ? WritableSignerAccount<TAccountRentPayer> & AccountSignerMeta<TAccountRentPayer> : TAccountRentPayer,
    TAccountSystemProgram extends string ? ReadonlyAccount<TAccountSystemProgram> : TAccountSystemProgram,
    TAccountProgram extends string ? ReadonlyAccount<TAccountProgram> : TAccountProgram,
    ...TRemainingAccounts
]>;
export type RemoveSignerAsAuthorityInstructionData = {
    discriminator: ReadonlyUint8Array;
    oldSigner: Address;
    /** Memo is used for indexing only. */
    memo: Option<string>;
};
export type RemoveSignerAsAuthorityInstructionDataArgs = {
    oldSigner: Address;
    /** Memo is used for indexing only. */
    memo: OptionOrNullable<string>;
};
export declare function getRemoveSignerAsAuthorityInstructionDataEncoder(): Encoder<RemoveSignerAsAuthorityInstructionDataArgs>;
export declare function getRemoveSignerAsAuthorityInstructionDataDecoder(): Decoder<RemoveSignerAsAuthorityInstructionData>;
export declare function getRemoveSignerAsAuthorityInstructionDataCodec(): Codec<RemoveSignerAsAuthorityInstructionDataArgs, RemoveSignerAsAuthorityInstructionData>;
export type RemoveSignerAsAuthorityInput<TAccountSettings extends string = string, TAccountSettingsAuthority extends string = string, TAccountRentPayer extends string = string, TAccountSystemProgram extends string = string, TAccountProgram extends string = string> = {
    settings: Address<TAccountSettings>;
    /** Settings `settings_authority` that must authorize the configuration change. */
    settingsAuthority: TransactionSigner<TAccountSettingsAuthority>;
    /**
     * The account that will be charged or credited in case the settings account needs to reallocate space,
     * for example when adding a new signer or a spending limit.
     * This is usually the same as `settings_authority`, but can be a different account if needed.
     */
    rentPayer?: TransactionSigner<TAccountRentPayer>;
    /** We might need it in case reallocation is needed. */
    systemProgram?: Address<TAccountSystemProgram>;
    program?: Address<TAccountProgram>;
    oldSigner: RemoveSignerAsAuthorityInstructionDataArgs['oldSigner'];
    memo: RemoveSignerAsAuthorityInstructionDataArgs['memo'];
};
export declare function getRemoveSignerAsAuthorityInstruction<TAccountSettings extends string, TAccountSettingsAuthority extends string, TAccountRentPayer extends string, TAccountSystemProgram extends string, TAccountProgram extends string, TProgramAddress extends Address = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS>(input: RemoveSignerAsAuthorityInput<TAccountSettings, TAccountSettingsAuthority, TAccountRentPayer, TAccountSystemProgram, TAccountProgram>, config?: {
    programAddress?: TProgramAddress;
}): RemoveSignerAsAuthorityInstruction<TProgramAddress, TAccountSettings, TAccountSettingsAuthority, TAccountRentPayer, TAccountSystemProgram, TAccountProgram>;
export type ParsedRemoveSignerAsAuthorityInstruction<TProgram extends string = typeof ASTROLABE_SMART_ACCOUNT_PROGRAM_ADDRESS, TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[]> = {
    programAddress: Address<TProgram>;
    accounts: {
        settings: TAccountMetas[0];
        /** Settings `settings_authority` that must authorize the configuration change. */
        settingsAuthority: TAccountMetas[1];
        /**
         * The account that will be charged or credited in case the settings account needs to reallocate space,
         * for example when adding a new signer or a spending limit.
         * This is usually the same as `settings_authority`, but can be a different account if needed.
         */
        rentPayer?: TAccountMetas[2] | undefined;
        /** We might need it in case reallocation is needed. */
        systemProgram?: TAccountMetas[3] | undefined;
        program: TAccountMetas[4];
    };
    data: RemoveSignerAsAuthorityInstructionData;
};
export declare function parseRemoveSignerAsAuthorityInstruction<TProgram extends string, TAccountMetas extends readonly AccountMeta[]>(instruction: Instruction<TProgram> & InstructionWithAccounts<TAccountMetas> & InstructionWithData<ReadonlyUint8Array>): ParsedRemoveSignerAsAuthorityInstruction<TProgram, TAccountMetas>;
