/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder } from '@solana/kit';
import { type SmartAccountCompiledInstruction, type SmartAccountCompiledInstructionArgs, type SmartAccountMessageAddressTableLookup, type SmartAccountMessageAddressTableLookupArgs } from '.';
export type SmartAccountTransactionMessage = {
    /** The number of signer pubkeys in the account_keys vec. */
    numSigners: number;
    /** The number of writable signer pubkeys in the account_keys vec. */
    numWritableSigners: number;
    /** The number of writable non-signer pubkeys in the account_keys vec. */
    numWritableNonSigners: number;
    /**
     * Unique account pubkeys (including program IDs) required for execution of the tx.
     * The signer pubkeys appear at the beginning of the vec, with writable pubkeys first, and read-only pubkeys following.
     * The non-signer pubkeys follow with writable pubkeys first and read-only ones following.
     * Program IDs are also stored at the end of the vec along with other non-signer non-writable pubkeys:
     *
     * ```plaintext
     * [pubkey1, pubkey2, pubkey3, pubkey4, pubkey5, pubkey6, pubkey7, pubkey8]
     * |---writable---|  |---readonly---|  |---writable---|  |---readonly---|
     * |------------signers-------------|  |----------non-singers-----------|
     * ```
     */
    accountKeys: Array<Address>;
    /** List of instructions making up the tx. */
    instructions: Array<SmartAccountCompiledInstruction>;
    /**
     * List of address table lookups used to load additional accounts
     * for this transaction.
     */
    addressTableLookups: Array<SmartAccountMessageAddressTableLookup>;
};
export type SmartAccountTransactionMessageArgs = {
    /** The number of signer pubkeys in the account_keys vec. */
    numSigners: number;
    /** The number of writable signer pubkeys in the account_keys vec. */
    numWritableSigners: number;
    /** The number of writable non-signer pubkeys in the account_keys vec. */
    numWritableNonSigners: number;
    /**
     * Unique account pubkeys (including program IDs) required for execution of the tx.
     * The signer pubkeys appear at the beginning of the vec, with writable pubkeys first, and read-only pubkeys following.
     * The non-signer pubkeys follow with writable pubkeys first and read-only ones following.
     * Program IDs are also stored at the end of the vec along with other non-signer non-writable pubkeys:
     *
     * ```plaintext
     * [pubkey1, pubkey2, pubkey3, pubkey4, pubkey5, pubkey6, pubkey7, pubkey8]
     * |---writable---|  |---readonly---|  |---writable---|  |---readonly---|
     * |------------signers-------------|  |----------non-singers-----------|
     * ```
     */
    accountKeys: Array<Address>;
    /** List of instructions making up the tx. */
    instructions: Array<SmartAccountCompiledInstructionArgs>;
    /**
     * List of address table lookups used to load additional accounts
     * for this transaction.
     */
    addressTableLookups: Array<SmartAccountMessageAddressTableLookupArgs>;
};
export declare function getSmartAccountTransactionMessageEncoder(): Encoder<SmartAccountTransactionMessageArgs>;
export declare function getSmartAccountTransactionMessageDecoder(): Decoder<SmartAccountTransactionMessage>;
export declare function getSmartAccountTransactionMessageCodec(): Codec<SmartAccountTransactionMessageArgs, SmartAccountTransactionMessage>;
