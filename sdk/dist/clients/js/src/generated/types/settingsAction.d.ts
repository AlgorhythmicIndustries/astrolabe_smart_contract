/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */
import { type Address, type Codec, type Decoder, type Encoder, type GetDiscriminatedUnionVariant, type GetDiscriminatedUnionVariantContent, type Option, type OptionOrNullable } from '@solana/kit';
import { type Period, type PeriodArgs, type SmartAccountSigner, type SmartAccountSignerArgs } from '.';
export type SettingsAction = {
    __kind: 'AddSigner';
    newSigner: SmartAccountSigner;
} | {
    __kind: 'RemoveSigner';
    oldSigner: Address;
} | {
    __kind: 'ChangeThreshold';
    newThreshold: number;
} | {
    __kind: 'SetTimeLock';
    newTimeLock: number;
} | {
    __kind: 'AddSpendingLimit';
    /** Key that is used to seed the SpendingLimit PDA. */
    seed: Address;
    /** The index of the account that the spending limit is for. */
    accountIndex: number;
    /** The token mint the spending limit is for. */
    mint: Address;
    /**
     * The amount of tokens that can be spent in a period.
     * This amount is in decimals of the mint,
     * so 1 SOL would be `1_000_000_000` and 1 USDC would be `1_000_000`.
     */
    amount: bigint;
    /**
     * The reset period of the spending limit.
     * When it passes, the remaining amount is reset, unless it's `Period::OneTime`.
     */
    period: Period;
    /**
     * Members of the settings that can use the spending limit.
     * In case a member is removed from the settings, the spending limit will remain existent
     * (until explicitly deleted), but the removed member will not be able to use it anymore.
     */
    signers: Array<Address>;
    /**
     * The destination addresses the spending limit is allowed to sent funds to.
     * If empty, funds can be sent to any address.
     */
    destinations: Array<Address>;
    /**
     * The expiration timestamp of the spending limit.
     * Non expiring spending limits are set to `i64::MAX`.
     */
    expiration: bigint;
} | {
    __kind: 'RemoveSpendingLimit';
    spendingLimit: Address;
} | {
    __kind: 'SetArchivalAuthority';
    newArchivalAuthority: Option<Address>;
};
export type SettingsActionArgs = {
    __kind: 'AddSigner';
    newSigner: SmartAccountSignerArgs;
} | {
    __kind: 'RemoveSigner';
    oldSigner: Address;
} | {
    __kind: 'ChangeThreshold';
    newThreshold: number;
} | {
    __kind: 'SetTimeLock';
    newTimeLock: number;
} | {
    __kind: 'AddSpendingLimit';
    /** Key that is used to seed the SpendingLimit PDA. */
    seed: Address;
    /** The index of the account that the spending limit is for. */
    accountIndex: number;
    /** The token mint the spending limit is for. */
    mint: Address;
    /**
     * The amount of tokens that can be spent in a period.
     * This amount is in decimals of the mint,
     * so 1 SOL would be `1_000_000_000` and 1 USDC would be `1_000_000`.
     */
    amount: number | bigint;
    /**
     * The reset period of the spending limit.
     * When it passes, the remaining amount is reset, unless it's `Period::OneTime`.
     */
    period: PeriodArgs;
    /**
     * Members of the settings that can use the spending limit.
     * In case a member is removed from the settings, the spending limit will remain existent
     * (until explicitly deleted), but the removed member will not be able to use it anymore.
     */
    signers: Array<Address>;
    /**
     * The destination addresses the spending limit is allowed to sent funds to.
     * If empty, funds can be sent to any address.
     */
    destinations: Array<Address>;
    /**
     * The expiration timestamp of the spending limit.
     * Non expiring spending limits are set to `i64::MAX`.
     */
    expiration: number | bigint;
} | {
    __kind: 'RemoveSpendingLimit';
    spendingLimit: Address;
} | {
    __kind: 'SetArchivalAuthority';
    newArchivalAuthority: OptionOrNullable<Address>;
};
export declare function getSettingsActionEncoder(): Encoder<SettingsActionArgs>;
export declare function getSettingsActionDecoder(): Decoder<SettingsAction>;
export declare function getSettingsActionCodec(): Codec<SettingsActionArgs, SettingsAction>;
export declare function settingsAction(kind: 'AddSigner', data: GetDiscriminatedUnionVariantContent<SettingsActionArgs, '__kind', 'AddSigner'>): GetDiscriminatedUnionVariant<SettingsActionArgs, '__kind', 'AddSigner'>;
export declare function settingsAction(kind: 'RemoveSigner', data: GetDiscriminatedUnionVariantContent<SettingsActionArgs, '__kind', 'RemoveSigner'>): GetDiscriminatedUnionVariant<SettingsActionArgs, '__kind', 'RemoveSigner'>;
export declare function settingsAction(kind: 'ChangeThreshold', data: GetDiscriminatedUnionVariantContent<SettingsActionArgs, '__kind', 'ChangeThreshold'>): GetDiscriminatedUnionVariant<SettingsActionArgs, '__kind', 'ChangeThreshold'>;
export declare function settingsAction(kind: 'SetTimeLock', data: GetDiscriminatedUnionVariantContent<SettingsActionArgs, '__kind', 'SetTimeLock'>): GetDiscriminatedUnionVariant<SettingsActionArgs, '__kind', 'SetTimeLock'>;
export declare function settingsAction(kind: 'AddSpendingLimit', data: GetDiscriminatedUnionVariantContent<SettingsActionArgs, '__kind', 'AddSpendingLimit'>): GetDiscriminatedUnionVariant<SettingsActionArgs, '__kind', 'AddSpendingLimit'>;
export declare function settingsAction(kind: 'RemoveSpendingLimit', data: GetDiscriminatedUnionVariantContent<SettingsActionArgs, '__kind', 'RemoveSpendingLimit'>): GetDiscriminatedUnionVariant<SettingsActionArgs, '__kind', 'RemoveSpendingLimit'>;
export declare function settingsAction(kind: 'SetArchivalAuthority', data: GetDiscriminatedUnionVariantContent<SettingsActionArgs, '__kind', 'SetArchivalAuthority'>): GetDiscriminatedUnionVariant<SettingsActionArgs, '__kind', 'SetArchivalAuthority'>;
export declare function isSettingsAction<K extends SettingsAction['__kind']>(kind: K, value: SettingsAction): value is SettingsAction & {
    __kind: K;
};
